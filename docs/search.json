[{"path":"https://mladenjovanovic.github.io/STMr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Mladen Jovanović Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://mladenjovanovic.github.io/STMr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mladen Jovanović. Author, maintainer.","code":""},{"path":"https://mladenjovanovic.github.io/STMr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jovanović M (2023). STMr: Strength Training Manual R-Language Functions. R package version 0.1.6, https://github.com/mladenjovanovic/STMr.","code":"@Manual{STMr-package,   title = {{STMr}: Strength Training Manual R-Language Functions},   author = {Mladen Jovanović},   year = {2023},   note = {R package version 0.1.6},   url = {https://github.com/mladenjovanovic/STMr}, }"},{"path":"https://mladenjovanovic.github.io/STMr/index.html","id":"stmr-package-","dir":"","previous_headings":"","what":"Strength Training Manual R-Language Functions","title":"Strength Training Manual R-Language Functions","text":"Table Contents longer README file, TOC easier jumping topics Introduction Installation Reps-Max Functions Adjustment Functions Progressions Vertical Planning Set Rep Schemes Release Estimation Scheme plotting tips information cite {STMr}","code":""},{"path":"https://mladenjovanovic.github.io/STMr/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Strength Training Manual R-Language Functions","text":"STMr (short Strength Training Manual R-functions) package created help sports scientists strength coaches estimate strength profiles, create visualize (percent-based) progression tables set rep schemes. Originally STMr package created internal project/package help writing Strength Training Manual Volume 3 book, soon became project . STMr package open-source package MIT License implemented R language. STMr package can divided following functional units: Reps-Max functions (start max_) adjustment functions (start adj_) wrapper functions get_reps() get_perc_1RM() implemented combine Reps-Max models well progression (adjustment) functions easy use format progression functions (start progression_) vertical planning functions (start vertical_) scheme function (start scheme_) release() function molding multiple back--back schemes (.e., blocks phases) plotting printing functions: generate_progression_table(), plot_progression_table(), plot_scheme() (deprecated STMr version 0.1.4. Please use S3 plot() method instead), create_example() built-datasets (strength_training_log RTF_testing) estimation functions (start estimate_) Figure depicts relationship STMr package functional units:  walk functional units demonstrate simplicity, flexibility, usability, power STMr package. information regarding logic behind STMr package please check Load-Exertion Tables Use Planning article series.","code":""},{"path":"https://mladenjovanovic.github.io/STMr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Strength Training Manual R-Language Functions","text":"can install released version (released) STMr CRAN : development version GitHub : installed, can load STMr package:","code":"install.packages(\"STMr\") # install.packages(\"devtools\") devtools::install_github(\"mladenjovanovic/STMr\") require(STMr)"},{"path":"https://mladenjovanovic.github.io/STMr/index.html","id":"reps-max-functions","dir":"","previous_headings":"","what":"Reps-Max Functions","title":"Strength Training Manual R-Language Functions","text":"Reps-Max functions map relationship %1RM maximum number repetitions (nRM, reps--failure; RTF). STMr package comes three Reps-Max models: (1) Epley’s, (2) Modified Epley’s, (3) Linear/Brzycki’s. Please refer Load-Exertion Tables Use Planning article series information. Reps-Max functions start max_ allow either predict max %1RM repetitions (start max_perc_1RM_), predict max repetitions (.e., nRM) %1RM used (start max_reps_). Reps-Max functions allow use different model parameter values. helpful using individualized profiles create set rep schemes (see Estimation section). Let’s say interested predicting max %1RM can used 5 reps failure. can see three different models can used, together providing custom parameter values: interested predicting nRM %1RM utilized, can use max_reps_ family functions. interested estimating max reps using 85% 1RM: Let’s make bit eye appealing. plotted relationship max reps (RTF; nRM) x-axis max %1RM used y-axis:","code":"# Predicting max %1RM to be used for target number of repetitions (to failure)  # ------------------------------------------ # Epley equation max_perc_1RM_epley(5) # Default k=0.0333 #> [1] 0.857 max_perc_1RM_epley(5, k = 0.04) #> [1] 0.833  # ------------------------------------------ # Modified Epley equation max_perc_1RM_modified_epley(5) # Default kmod=0.0353 #> [1] 0.876 max_perc_1RM_modified_epley(5, kmod = 0.05) #> [1] 0.833  # ------------------------------------------ # Linear/Brzycki equation max_perc_1RM_linear(5) # Default klin=33 #> [1] 0.879 max_perc_1RM_linear(5, klin = 36) #> [1] 0.889 # Predicting reps-to-failure (RTF) or nRM from used %1RM  # ------------------------------------------ # Epley equation max_reps_epley(0.85) # Default k=0.0333 #> [1] 5.3 max_reps_epley(0.85, k = 0.04) #> [1] 4.41  # ------------------------------------------ # Modified Epley equation max_reps_modified_epley(0.85) # Default kmod=0.0353 #> [1] 6 max_reps_modified_epley(0.85, kmod = 0.05) #> [1] 4.53  # ------------------------------------------ # Linear/Brzycki's equation max_reps_linear(0.85) # Default klin=33 #> [1] 5.95 max_reps_linear(0.85, klin = 36) #> [1] 6.4 # install.packages(\"tidyverse\", dependencies = TRUE) require(tidyverse)  max_reps_relationship <- tibble(Reps = seq(1, 12)) %>%   mutate(     Epley = max_perc_1RM_epley(Reps),     `Modified Epley` = max_perc_1RM_modified_epley(Reps),     `Linear/Brzycki` = max_perc_1RM_linear(Reps)   ) %>%   pivot_longer(cols = 2:4, names_to = \"Model\", values_to = \"%1RM\") %>%   mutate(`%1RM` = `%1RM` * 100)  ggplot(max_reps_relationship, aes(x = Reps, y = `%1RM`, color = Model)) +   theme_bw() +   geom_line() +   scale_x_continuous(breaks = 1:12)"},{"path":"https://mladenjovanovic.github.io/STMr/index.html","id":"adjustment-functions","dir":"","previous_headings":"","what":"Adjustment Functions","title":"Strength Training Manual R-Language Functions","text":"Reps-Max functions help map relationship reps--failure %1RM. Luckily, sets taken point failure. STMr package allows adjust %1RM repetitions using four different methods: (1) Deducted Intensity (DI), (2) Relative Intensity (Rel Int), (3) Reps--Reserve (RIR), (4) Percentage Maximum Reps (%MR). done using adj_ family functions, apply adjustments selected Reps-Max function/relationship. Adjustment method main element progression table represents method progression (see [Progression] section). Although adjustment %1RM used target reps (adj_perc_1RM_ family functions) common, can also adjust reps target %1RM (adj_reps_ family functions). Default Reps-Max function used across adjustment functions max_perc_1RM_epley(). User allowed provide Reps-Max function well custom model parameter value. extremely useful creating individualized progression tables set rep schemes. can use adjustment functions adjust %1RM 5 repetitions: addition using adjustment, user can use multiplication factor (mfactor parameter). useful creating ballistic schemes. Strength Training Manual suggested using factor 2 ballistic exercises. Using RIR method, show can customize adjustments using different Reps-Max function custom model parameter value: Although show simpler solution (see [Progression] section), can create simple RIR adjustment table:","code":"# Use 10 perc deducted intensity adj_perc_1RM_DI(5, adjustment = -0.1) #> [1] 0.757  # Use 90 perc  relative intensity adj_perc_1RM_rel_int(5, adjustment = 0.9) #> [1] 0.772  # Use 2 reps in reserve adj_perc_1RM_RIR(5, adjustment = 2) #> [1] 0.811  # Use 70 perc max reps adj_perc_1RM_perc_MR(5, adjustment = 0.7) #> [1] 0.808 # Use ballistic adjustment (this implies doing half the reps of max reps possible) # In other words, if I am doing 5 reps, I will use 10RM adj_perc_1RM_DI(5, mfactor = 2) #> [1] 0.75 # Use Linear model adj_perc_1RM_RIR(5, max_perc_1RM_func = max_perc_1RM_linear, adjustment = 2) #> [1] 0.818  # Use Modifed Epley's equation with a custom parameter values adj_perc_1RM_RIR(   5,   max_perc_1RM_func = max_perc_1RM_modified_epley,   adjustment = 2,   kmod = 0.06 ) #> [1] 0.735 # install.packages(\"knitr\", dependencies = TRUE) require(knitr)  at <- expand_grid(Reps = 1:5, RIR = 0:4) %>%   mutate(     `%1RM` = adj_perc_1RM_RIR(       reps = Reps,       adjustment = RIR,       max_perc_1RM_func = max_perc_1RM_linear,       klin = 36     ),     `%1RM` = round(100 * `%1RM`, 0),     RIR = paste0(RIR, \"RIR\")   ) %>%   pivot_wider(names_from = RIR, values_from = `%1RM`)  kable(at)"},{"path":"https://mladenjovanovic.github.io/STMr/index.html","id":"wrapper-functions","dir":"","previous_headings":"Adjustment Functions","what":"Wrapper Functions","title":"Strength Training Manual R-Language Functions","text":"noticed, adjustment functions utilize Reps-Max function parameter forwards custom model parameter value (default custom provided). Wrapper functions simplify process. STMr package implements two wrapper functions: get_perc_1RM() get_reps():","code":"get_perc_1RM(5, method = \"RelInt\", model = \"linear\", adjustment = 0.8) #> [1] 0.703  get_perc_1RM(5, method = \"%MR\", model = \"linear\", adjustment = 0.8, klin = 36) #> [1] 0.854  get_reps(0.85, method = \"RIR\", model = \"modified epley\", adjustment = 2, kmod = 0.035) #> [1] 4.04"},{"path":"https://mladenjovanovic.github.io/STMr/index.html","id":"progressions","dir":"","previous_headings":"","what":"Progressions","title":"Strength Training Manual R-Language Functions","text":"Progressions (progression tables) represent implemented adjustments systematic organized manner across progression steps scheme volume types (intensive, normal, extensive). Please refer Strength Training Manual book Load-Exertion Tables Use Planning article series information progression tables. STMr package multiple progressions implemented start progression_. Progression functions also allow user utilize different Reps-Max function (default max_perc_1RM_epley()) provide custom model parameter value. modular flexible feature allows easier generation individualized progression tables, well set rep schemes. example using Constant RIR Increment Progression using 5 repetitions -3, -2, -1, 0 progression steps using “normal” volume. Please note progression steps move backwards Reps-Max relationship, indicated step 0. output progression_ functions list two elements: (1) adjustment, (2) perc_1RM. can use directly, progression_ function often used within scheme_ functions (see Set Rep Schemes section). Easier way create progression table across different types (grinding, ballistic), volumes, rep ranges, progression steps use generate_progression_table() function: default mfactor ballistic progression table equal 2. Even better approach plot progression table:  interested plotting adjustments used, use:  progression_RIR() allows use custom progression increments well volume increments:  another example using Perc Drop progression table Linear/Brzycki’s model:  adjustments used Perc Drop progression table (deducted %1RM):  Another useful feature implemented STMr package create_example() function quickly generate strength training program example. use progression_perc_MR_variable() example: STMr package following progression tables implemented: progression_DI(), progression_perc_drop(), progression_perc_MR(), progression_perc_MR_variable(), progression_rel_int(), progression_RIR(), progression_RIR_increment(). can use aforementioned functions explore progression tables, build . Please refer Load-Exertion Tables Use Planning article series information progression tables.","code":"progression_RIR(5, step = c(-3, -2, -1, 0), volume = \"normal\") #> $adjustment #> [1] 4 3 2 1 #>  #> $perc_1RM #> [1] 0.769 0.790 0.811 0.833 pt <- generate_progression_table(progression_RIR)  head(pt) #>        type    volume reps step adjustment perc_1RM #> 1  grinding intensive    1   -3          3    0.882 #> 2 ballistic intensive    1   -3          3    0.790 #> 3  grinding    normal    1   -3          4    0.857 #> 4 ballistic    normal    1   -3          4    0.750 #> 5  grinding extensive    1   -3          5    0.833 #> 6 ballistic extensive    1   -3          5    0.714 plot_progression_table(progression_RIR, signif_digits = 2) plot_progression_table(progression_RIR, plot = \"adjustment\") plot_progression_table(   progression_RIR,   plot = \"adjustment\",   step_increment = 1,   volume_increment = 2 ) plot_progression_table(   progression_perc_drop,   max_perc_1RM_func = max_perc_1RM_linear,   klin = 36,   type = \"grinding\",   reps = 1:20,   signif_digits = 2 ) plot_progression_table(   progression_perc_drop,   plot = \"adjustment\", adjustment_multiplier = 100,   max_perc_1RM_func = max_perc_1RM_linear,   klin = 36,   type = \"grinding\",   reps = 1:20,   signif_digits = 2 ) example <- create_example(progression_perc_MR_variable, reps = c(5, 10), type = \"grinding\")  kable(example)"},{"path":"https://mladenjovanovic.github.io/STMr/index.html","id":"vertical-planning","dir":"","previous_headings":"","what":"Vertical Planning","title":"Strength Training Manual R-Language Functions","text":"Vertical Planning represents another layer building set rep schemes revolves around changes progressions across time. involves changes repetitions, progression steps, number sets forth. Please refer Strength Training Manual book thorough information Vertical Planning. Vertical Planning functions STMr package begin vertical_. example involving constant variant Vertical Planning: can seen code output, Vertical Planning involves keeping constant repetitions decreasing progression steps. Let’s use linear Vertical Planning: can also plot vertical plan function, using plot_vertical(). Might easier comprehend variations different vertical plans.  Vertical Planning functionalities can achieved generic Vertical Planning function vertical_planning(). can seen output, result Vertical Planning functions simple data.frame five columns: (1) index, (2) step, (3) set, (4) set_id, reps. Usability Vertical Planning functions mostly visible next layer prescription: schemes (see Set Rep Schemes section). STMr currently features following Vertical Planning functions: vertical_planning(), vertical_constant(), vertical_linear(), vertical_linear_reverse(), vertical_block(), vertical_block_variant(), vertical_block_undulating(), vertical_rep_accumulation(), vertical_set_accumulation(), vertical_set_accumulation_reverse(), vertical_undulating(), vertical_undulating_reverse(), vertical_volume_intensity(). Please note vertical_rep_accumulation() used Set Rep Schemes yield wrong results. address deal issue Rep Accumulation section.","code":"vertical_constant(reps = c(5, 5, 5)) #>    index step set set_id reps #> 1      1   -3   1      1    5 #> 2      1   -3   2      2    5 #> 3      1   -3   3      3    5 #> 4      2   -2   1      1    5 #> 5      2   -2   2      2    5 #> 6      2   -2   3      3    5 #> 7      3   -1   1      1    5 #> 8      3   -1   2      2    5 #> 9      3   -1   3      3    5 #> 10     4    0   1      1    5 #> 11     4    0   2      2    5 #> 12     4    0   3      3    5 vertical_linear(reps = c(10, 10, 10), reps_change = c(0, -2, -4)) #>   index step set set_id reps #> 1     1   -2   1      1   10 #> 2     1   -2   2      2   10 #> 3     1   -2   3      3   10 #> 4     2   -1   1      1    8 #> 5     2   -1   2      2    8 #> 6     2   -1   3      3    8 #> 7     3    0   1      1    6 #> 8     3    0   2      2    6 #> 9     3    0   3      3    6 plot_vertical(vertical_linear, reps = c(10, 10, 10))"},{"path":"https://mladenjovanovic.github.io/STMr/index.html","id":"set-and-rep-schemes","dir":"","previous_headings":"","what":"Set and Rep Schemes","title":"Strength Training Manual R-Language Functions","text":"Set rep schemes highest layer STMr package, since utilize Reps-Max model, adjustment method, progression table, vertical planning. STMr package built follow modular approach, makes extensible flexible. Set rep schemes implemented using functions begin scheme_. example Wave Set Rep Scheme (information various set rep schemes please refer Strength Training Manual book): output scheme_ functions simple data.frame following six columns: (1) index, (2) step, (3) set, (4) reps, (5) adjustment, (6) perc_1RM. Set rep scheme functions offers ability utilize different vertical planning (using vertical_planning argument, well vertical_planning_control forward extra parameters vertical planning function), progression table (using progression_table argument, well progression_table_control forward extra parameters, including Reps-Max function), extra adjustments reps utilized. Please note adjustment utilized depends progression table selected (.e., using RIR Increment, adjustment RIR). Also, adjustment results total adjustment, sum progression table adjustment user-provided extra adjustment using adjustment argument. Plotting scheme better way comprehend :  Check Scheme plotting tips section information tips plotting schemes. next example utilize different progression table progression steps, well Linear/Brzycki’s Reps-Max model custom model parameter value:  scheme pretty impossible , since using intensive variant Deducted Intensity progression, case 3 heavy sets. Deducted Intensity progression table (-2.5% decrement across volume types progression steps):   make Waves Loading scheme example doable, can apply additional adjustments make sets easier. Since using Deducted Intensity, adjustments %1RM:  scheme_ functions afford great flexibility designing set rep schemes. following set rep schemes implemented STMr package: scheme_generic(), scheme_wave(), scheme_plateau(), scheme_step(), scheme_step_reverse(), scheme_wave_descending(), scheme_light_heavy(), scheme_pyramid(), scheme_pyramid_reverse(), scheme_rep_acc(), scheme_manual(), scheme_perc_1RM().","code":"# Wave set and rep scheme scheme <- scheme_wave(   reps = c(10, 8, 6, 10, 8, 6),   # Adjusting sets to use lower %1RM (RIR Inc method used, so RIR adjusted)   adjustment = c(4, 2, 0, 6, 4, 2),   vertical_planning = vertical_linear,   vertical_planning_control = list(reps_change = c(0, -2, -4)),   progression_table = progression_RIR_increment,   progression_table_control = list(volume = \"extensive\") )  head(scheme) #>   index step set reps adjustment perc_1RM #> 1     1   -2   1   10      12.91    0.567 #> 2     1   -2   2    8       9.82    0.628 #> 3     1   -2   3    6       6.73    0.702 #> 4     1   -2   4   10      14.91    0.547 #> 5     1   -2   5    8      11.82    0.602 #> 6     1   -2   6    6       8.73    0.671 plot(scheme) # Wave set and rep scheme scheme <- scheme_wave(   reps = c(10, 8, 6, 10, 8, 6),   # Since the default Wave Loading adjustments assume RIR progression table,   # we need to set it to zero   adjustment = 0,   vertical_planning = vertical_planning, # Generic function   vertical_planning_control = list(reps_change = c(0, -2, -4, -5), step = c(-6, -4, -2, 0)),   progression_table = progression_DI,   progression_table_control = list(     volume = \"intensive\",     max_perc_1RM_func = max_perc_1RM_linear,     klin = 36   ) )  plot(scheme) plot_progression_table(   progression_DI,   max_perc_1RM_func = max_perc_1RM_linear,   klin = 36,   type = \"grinding\",   reps = 1:20,   signif_digits = 2 ) plot_progression_table(   progression_DI,   plot = \"adjustment\", adjustment_multiplier = 100,   max_perc_1RM_func = max_perc_1RM_linear,   klin = 36,   type = \"grinding\",   reps = 1:20,   signif_digits = 2 ) # Wave set and rep scheme scheme <- scheme_wave(   reps = c(10, 8, 6, 10, 8, 6),   adjustment = c(-15, -10, -5, -10, -5, 0) / 100,   vertical_planning = vertical_planning, # Generic function   vertical_planning_control = list(reps_change = c(0, -2, -4, -5), step = c(-6, -4, -2, 0)),   progression_table = progression_DI,   progression_table_control = list(     volume = \"intensive\",     max_perc_1RM_func = max_perc_1RM_linear,     klin = 36   ) )  plot(scheme)"},{"path":"https://mladenjovanovic.github.io/STMr/index.html","id":"schemes-modularity-through--operator","dir":"","previous_headings":"Set and Rep Schemes","what":"Schemes modularity through + operator","title":"Strength Training Manual R-Language Functions","text":"STMr package allows modular approach designing set rep schemes. example, might want use simple warm-, followed single wave, finished 3 sets 5 across. , can simple add using + operator. explain scheme_perc_1RM() function Manual scheme section.","code":"warmup <- scheme_perc_1RM(   reps = c(5, 5, 5),   perc_1RM = c(0.4, 0.5, 0.6) )  wave <- scheme_wave(vertical_planning = vertical_linear) plateau <- scheme_plateau()  # Simply add them up my_scheme <- warmup + wave + plateau  plot(my_scheme)"},{"path":"https://mladenjovanovic.github.io/STMr/index.html","id":"rep-accumulation","dir":"","previous_headings":"Set and Rep Schemes","what":"Rep Accumulation","title":"Strength Training Manual R-Language Functions","text":"intend use vertical_rep_accumulation() withing scheme_ functions, yield wrong result. example: need check perc_1RM column - needs across progression steps, . due modular design shorts package. One way sort , use scheme_rep_acc() function: extra arguments, can generate waves, pyramid schemes: Unfortunately, work ladders volume-intensity scheme. universal approach apply rep accumulation scheme generated. reason .vertical_rep_accumulation.post() function, works across schemes. Just make sure use vertical_constant generating scheme (default option):  default, .vertical_rep_accumulation.post() function use highest progression step scheme.","code":"scheme_plateau(reps = c(5, 5, 5), vertical_planning = vertical_rep_accumulation) #>    index step set reps adjustment perc_1RM #> 1      1    0   1    2    -0.0273    0.910 #> 2      1    0   2    2    -0.0273    0.910 #> 3      1    0   3    2    -0.0273    0.910 #> 4      2    0   1    3    -0.0295    0.880 #> 5      2    0   2    3    -0.0295    0.880 #> 6      2    0   3    3    -0.0295    0.880 #> 7      3    0   1    4    -0.0318    0.851 #> 8      3    0   2    4    -0.0318    0.851 #> 9      3    0   3    4    -0.0318    0.851 #> 10     4    0   1    5    -0.0341    0.823 #> 11     4    0   2    5    -0.0341    0.823 #> 12     4    0   3    5    -0.0341    0.823 scheme_rep_acc(reps = c(5, 5, 5)) #>    index step set reps adjustment perc_1RM #> 1      1    0   1    2    -0.0341    0.823 #> 2      1    0   2    2    -0.0341    0.823 #> 3      1    0   3    2    -0.0341    0.823 #> 4      2    0   1    3    -0.0341    0.823 #> 5      2    0   2    3    -0.0341    0.823 #> 6      2    0   3    3    -0.0341    0.823 #> 7      3    0   1    4    -0.0341    0.823 #> 8      3    0   2    4    -0.0341    0.823 #> 9      3    0   3    4    -0.0341    0.823 #> 10     4    0   1    5    -0.0341    0.823 #> 11     4    0   2    5    -0.0341    0.823 #> 12     4    0   3    5    -0.0341    0.823 scheme_rep_acc(reps = c(10, 8, 6), adjustment = c(-0.1, -0.05, 0)) #>    index step set reps adjustment perc_1RM #> 1      1    0   1    7    -0.1455    0.605 #> 2      1    0   2    5    -0.0909    0.699 #> 3      1    0   3    3    -0.0364    0.797 #> 4      2    0   1    8    -0.1455    0.605 #> 5      2    0   2    6    -0.0909    0.699 #> 6      2    0   3    4    -0.0364    0.797 #> 7      3    0   1    9    -0.1455    0.605 #> 8      3    0   2    7    -0.0909    0.699 #> 9      3    0   3    5    -0.0364    0.797 #> 10     4    0   1   10    -0.1455    0.605 #> 11     4    0   2    8    -0.0909    0.699 #> 12     4    0   3    6    -0.0364    0.797 scheme_ladder() %>%   .vertical_rep_accumulation.post() #>    index step set reps adjustment perc_1RM #> 2      1    0   2    2         NA    0.705 #> 3      1    0   3    7         NA    0.705 #> 4      2    0   1    1         NA    0.705 #> 5      2    0   2    3         NA    0.705 #> 6      2    0   3    8         NA    0.705 #> 7      3    0   1    2         NA    0.705 #> 8      3    0   2    4         NA    0.705 #> 9      3    0   3    9         NA    0.705 #> 10     4    0   1    3         NA    0.705 #> 11     4    0   2    5         NA    0.705 #> 12     4    0   3   10         NA    0.705 scheme <- scheme_wave() %>%   .vertical_rep_accumulation.post()  plot(scheme)"},{"path":"https://mladenjovanovic.github.io/STMr/index.html","id":"set-accumulation","dir":"","previous_headings":"Set and Rep Schemes","what":"Set Accumulation","title":"Strength Training Manual R-Language Functions","text":"Set Accumulation can happen multiple ways. can accumulate last set, simplest default approach:  can also accumulate whole sequence, example using Waves:  , instead accumulating sequence, can accumulate individual sets:  Set accumulation function flexible. another example, can use vertical_set_accumulation_reverse() create neat accumulation-intensification progression:  Maybe want another progression steps:  maybe want reps fall well, even bigger accumulation-intensification effect. case case use reps_change argument:  last example, let us create Block Undulating reverse set accumulation:","code":"scheme <- scheme_step(   reps = c(5, 5, 5),   vertical_planning = vertical_set_accumulation   )  plot(scheme) scheme <- scheme_wave(   reps = c(10, 8, 6),   vertical_planning = vertical_set_accumulation,   vertical_planning_control = list(accumulate_set = 1:3)   )  plot(scheme) scheme <- scheme_wave(   reps = c(10, 8, 6),   vertical_planning = vertical_set_accumulation,   vertical_planning_control = list(accumulate_set = 1:3, sequence = FALSE)   )  plot(scheme) scheme <- scheme_wave(   reps = c(6, 4, 2),   vertical_planning = vertical_set_accumulation_reverse,   vertical_planning_control = list(accumulate_set = 1:3)   )  plot(scheme) scheme <- scheme_wave(   reps = c(6, 4, 2),   vertical_planning = vertical_set_accumulation_reverse,   vertical_planning_control = list(     accumulate_set = 1:3,     # Lets create non-linear (aka unduating step changes)     step = c(-2, -1, -3, 0))   )  plot(scheme) scheme <- scheme_wave(   reps = c(10, 8, 6),   vertical_planning = vertical_set_accumulation_reverse,   vertical_planning_control = list(     accumulate_set = 1:3,     reps_change = c(0, -1, -2, -3))   )  plot(scheme) scheme <- scheme_wave(   reps = c(10, 8, 6),   vertical_planning = vertical_set_accumulation_reverse,   vertical_planning_control = list(     accumulate_set = 1:3,     step = c(-2, -1, -3, 0),     reps_change = c(0, -2, -1, -3))   )  plot(scheme)"},{"path":"https://mladenjovanovic.github.io/STMr/index.html","id":"manual-scheme","dir":"","previous_headings":"Set and Rep Schemes","what":"Manual scheme","title":"Strength Training Manual R-Language Functions","text":"looking pen-ultimate flexibility, scheme_manual() function . allows manually code index, step, number sets, reps, adjustments, thus provide greatest flexibility. examples get started:    scheme_manual() function allows manually enter 1RM percentage (rather calculated using progression table):  Easier method create pre-filled 1RM percentages use scheme_perc_1RM() function:  can use + operator mold warm-selected scheme. example:","code":"scheme_df <- data.frame(   index = 1, # Use this just as an example   step = c(-3, -2, -1, 0),   # Sets are just an easy way to repeat reps and adjustment   sets = c(5, 4, 3, 2),   reps = c(5, 4, 3, 2),   adjustment = 0 )  # Step index is estimated to be sequences of steps # If you want specific indexes, use it as an argument (see next example) scheme <- scheme_manual(   step = scheme_df$step,   sets = scheme_df$sets,   reps = scheme_df$reps,   adjustment = scheme_df$adjustment )  plot(scheme) # Here we are going to provide our own index scheme <- scheme_manual(   index = scheme_df$index,   step = scheme_df$step,   sets = scheme_df$sets,   reps = scheme_df$reps,   adjustment = scheme_df$adjustment )  plot(scheme) # More complicated example scheme_df <- data.frame(   step = c(-3, -3, -3, -3, -2, -2, -2, -1, -1, 0),   sets = 1,   reps = c(5, 5, 5, 5, 3, 2, 1, 2, 1, 1),   adjustment = c(0, -0.05, -0.1, -0.15, -0.1, -0.05, 0, -0.1, 0, 0) )  scheme_df #>    step sets reps adjustment #> 1    -3    1    5       0.00 #> 2    -3    1    5      -0.05 #> 3    -3    1    5      -0.10 #> 4    -3    1    5      -0.15 #> 5    -2    1    3      -0.10 #> 6    -2    1    2      -0.05 #> 7    -2    1    1       0.00 #> 8    -1    1    2      -0.10 #> 9    -1    1    1       0.00 #> 10    0    1    1       0.00  scheme <- scheme_manual(   step = scheme_df$step,   sets = scheme_df$sets,   reps = scheme_df$reps,   adjustment = scheme_df$adjustment,       # Select another progression table   progression_table = progression_DI,   # Extra parameters for the progression table   progression_table_control = list(     volume = \"extensive\",     type = \"ballistic\",      max_perc_1RM_func = max_perc_1RM_linear,     klin = 36) )  plot(scheme) # Provide %1RM manually scheme_df <- data.frame(   index = rep(c(1, 2, 3, 4), each = 3),   reps = rep(c(5, 5, 5), 4),   perc_1RM = rep(c(0.4, 0.5, 0.6), 4) )  warmup_scheme <- scheme_manual(   index = scheme_df$index,   reps = scheme_df$reps,   perc_1RM = scheme_df$perc_1RM )  plot(warmup_scheme) warmup_scheme <- scheme_perc_1RM(   reps = c(5, 5, 5),   perc_1RM = c(0.4, 0.5, 0.6),   n_steps = 4)  plot(warmup_scheme) plot(warmup_scheme + scheme_wave())"},{"path":"https://mladenjovanovic.github.io/STMr/index.html","id":"release","dir":"","previous_headings":"","what":"Release","title":"Strength Training Manual R-Language Functions","text":"mold multiple schemes (.e., blocks phases) together, use release() function accompanying S3 plot() method. release() function allows inspect multiple back--back schemes merge together provide long-term progressive overload. calculate weight scheme percentages, use prescription_1RM, adjusted/updated every phases using additive_1RM_adjustment multiplicative_1RM_adjustment arguments. Additionally, load_1RM calculated using selected reps-max function. done dividing weight used estimated %1RM done repetitions. helps visualizing loading trends time. Please check information section info.","code":"scheme1 <- scheme_step(vertical_planning = vertical_constant) scheme2 <- scheme_step(vertical_planning = vertical_linear) scheme3 <- scheme_step(vertical_planning = vertical_undulating)  release_df <- release(   scheme1, scheme2, scheme3,   prescription_1RM = 150,    additive_1RM_adjustment = 5,     multiplicative_1RM_adjustment = 1, #no adjustment      rounding = 2.5, # round weight to the closest 2.5   max_perc_1RM_func = max_perc_1RM_epley  )  plot(release_df)"},{"path":"https://mladenjovanovic.github.io/STMr/index.html","id":"estimation","dir":"","previous_headings":"","what":"Estimation","title":"Strength Training Manual R-Language Functions","text":"STMr package offers flexible customizable approach percent-based strength prescription. explained previous examples, one can use three models Reps-Max relationship (write additional implementation) apply custom model parameter values (.e., k, kmod, klin Epley’s, Modified Epley’s, Linear/Brzycki’s models respectively). addition providing custom model parameter values, STMr package offers function estimate parameter values. introducing estimate_ family functions, let’s introduce built-datasets going use. first dataset RTF testing: dataset contains reps--failure tests 12 athletes, 1RMs RTF sets using 90, 80, 70% 1RM. next dataset strength training log: dataset contains strength training log single athlete single exercise performed training program. Strength training program involves two strength training sessions, 12 week (4 phases 3 weeks ). Session involves linear wave-loading pattern starting 2x12/10/8 reps reaching 2x8/6/4 reps. Session B involves constant wave-loading pattern using 2x3/2/1. dataset contains weight used, well estimated/perceived reps--reserve (eRIR), represent subjective rating proximity failure. STMr package three types estimation functions: (1) simple estimation functions, (2) mixed-effect estimation functions, (3) quantile estimation functions. three types estimation functions allow work (1) %1RM repetitions estimate single parameter (.e., k, kmod, klin parameters Epley’s, Modified Epley’s, Linear/Brzycki’s models respectively), (2) absolute weight repetitions, addition estimating model parameter value estimates 1RM. represent novel technique sports science, yet validated (paper preparation currently ongoing). next section walk , information please refer Load-Exertion Tables Use Planning article series.","code":"data(RTF_testing)  head(RTF_testing) #> # A tibble: 6 × 7 #>   Athlete   `1RM` `Target %1RM` `Target Weight` `Real Weight` `Real %1RM`   nRM #>   <chr>     <dbl>         <dbl>           <dbl>         <dbl>       <dbl> <dbl> #> 1 Athlete A   100           0.9            90            90         0.9       6 #> 2 Athlete A   100           0.8            80            80         0.8      13 #> 3 Athlete A   100           0.7            70            70         0.7      22 #> 4 Athlete B    95           0.9            85.5          85         0.895     3 #> 5 Athlete B    95           0.8            76            75         0.789     8 #> 6 Athlete B    95           0.7            66.5          67.5       0.711    12 data(strength_training_log)  head(strength_training_log) #> # A tibble: 6 × 8 #>   phase  week   day session     set weight  reps  eRIR #>   <int> <int> <dbl> <chr>     <int>  <dbl> <dbl> <dbl> #> 1     1     1     1 Session A     1   57.5    12    NA #> 2     1     1     1 Session A     2   62.5    10     5 #> 3     1     1     1 Session A     3   70       8     3 #> 4     1     1     1 Session A     4   55      12    NA #> 5     1     1     1 Session A     5   60      10    NA #> 6     1     1     1 Session A     6   65       8     4"},{"path":"https://mladenjovanovic.github.io/STMr/index.html","id":"simple-estimation","dir":"","previous_headings":"Estimation","what":"Simple estimation","title":"Strength Training Manual R-Language Functions","text":"demonstrate simple profile estimation use RTF_testing dataset. figure depicts maximum number repetitions performed absolute (raw) relative weights (using %1RM).  Let’s use Athlete B RTF testing dataset estimate individual model parameter values Epley’s, Modified Epley’s, Linear/Brzycki’s models. simple estimation functions return nls object, since nls() function used estimate model parameter values. can also use ... feature simple estimation function forward extra arguments nls() function. Estimate functions also allow use reverse statistical model (using reverse = TRUE argument), predictor number reps (.e., nRM), target variable %1RM. Estimate functions offer various observation weighting options. Options ‘none’, ‘reps’, ‘load’, ‘eRIR’, ‘reps x load’, ‘reps x eRIR’, ‘load x eRIR’, ‘reps x load x eRIR’ set using weighted = argument. Novel technique implemented STMr estimation 1RM model parameter value absolute weights, rather %1RM need known 1RM: novel technique allows embedded testing (please refer Strength Training Manual Load-Exertion Tables Use Planning article series information) using strength training log data. case sets taken failure, one can also utilize subjective rating perceived/estimated RIR (eRIR argument). technique applied log analysis Quantile estimation section.","code":"# install.packages(\"patchwork\", dependencies = TRUE) require(patchwork)  gg_absolute <- ggplot(RTF_testing, aes(x = `Real Weight`, y = nRM, color = Athlete)) +   theme_bw() +   geom_point(alpha = 0.8) +   geom_line(alpha = 0.8) +   xlab(\"Weight (kg)\") +   theme(legend.position = \"none\")  gg_relative <- ggplot(RTF_testing, aes(x = `Real %1RM` * 100, y = nRM, color = Athlete)) +   theme_bw() +   geom_point(alpha = 0.8) +   geom_line(alpha = 0.8) +   xlab(\"%1RM\") +   ylab(NULL)  gg_absolute + gg_relative + plot_layout(widths = c(1, 1.1)) athlete_rtf <- RTF_testing %>%   filter(Athlete == \"Athlete B\")  # Estimate Epley's model m1 <- estimate_k(   perc_1RM = athlete_rtf$`Real %1RM`,   reps = athlete_rtf$nRM )  coef(m1) #>     k  #> 0.034  # Estimate Modifed Epley's model m2 <- estimate_kmod(   perc_1RM = athlete_rtf$`Real %1RM`,   reps = athlete_rtf$nRM )  coef(m2) #>   kmod  #> 0.0381  # Estimate Linear/Brzycki's model m3 <- estimate_klin(   perc_1RM = athlete_rtf$`Real %1RM`,   reps = athlete_rtf$nRM )  coef(m3) #> klin  #>   35 # Estimate Epley's model m1 <- estimate_k_1RM(   weight = athlete_rtf$`Real Weight`,   reps = athlete_rtf$nRM )  coef(m1) #>       k     0RM  #>  0.0316 93.3874  # Since Epley's model estimated 0RM and NOT 1RM, use # the following function to get 1RM get_predicted_1RM_from_k_model(m1) #> [1] 90.5  # Estimate Modifed Epley's model m2 <- estimate_kmod_1RM(   weight = athlete_rtf$`Real Weight`,   reps = athlete_rtf$nRM )  coef(m2) #>    kmod     1RM  #>  0.0307 90.5246  # Estimate Linear/Brzycki's model m3 <- estimate_klin_1RM(   weight = athlete_rtf$`Real Weight`,   reps = athlete_rtf$nRM )  coef(m3) #> klin  1RM  #> 45.6 88.8"},{"path":"https://mladenjovanovic.github.io/STMr/index.html","id":"mixed-effect-estimation","dir":"","previous_headings":"Estimation","what":"Mixed-effect estimation","title":"Strength Training Manual R-Language Functions","text":"simple estimation function allow estimation single individual. Simple estimation can also used pooled analysis (.e., athletes /exercises pooled together) %1RM get generic average model parameter value. Unfortunately, work absolute weights predictors, hence need normalize predictors using relative weight %1RM. example pooled profile estimation using RTF_testing dataset Modified Epley’s model:  analyzing multiple individuals, particularly absolute weights used instead %1RM, one needs utilize mixed-effect approach. STMr package implements non-linear mixed-effect model using nlme() function nlme package. Mixed-effects estimation functions STMr package end _mixed. can also use ... feature mixed-effects estimation functions forward extra arguments nlme() function. perform mixed-effects model using Modified Epley’s model %1RM predictor: Please note difference fixed parameter value kmod estimated using mixed-effects model (equal 0.042) previous pooled model (equal 0.045). addition estimating fixed parameter value, mixed-effects model also estimates random parameter values (.e., individual athlete model parameter values). Mixed-effects model can thought combination pooled model (.e., fixed effects) multiple individual models (.e., random effects). Figure depicts random effects (.e., individual predictions), fixed effects (.e., group predictions; thick line), well pooled simple model predictions (dashed thick line):  STMr package also implements mixed-effect models utilize absolute weight values. alluded previously, novel technique besides estimating Reps-Max profile, also estimates 1RM. perform mixed-effects Linear/Brzycki’s model using absolute weights: looks graphically:  Mixed-effects functions implemented STMr package allows set-random parameters using random= function argument. previous example 1RM klin parameters treated random, can make klin fixed: easier grasp graphically:  opinion doesn’t make much sense. interested estimating group generic klin (k kmod) model parameter values, use fixed estimates, allow vary (.e. random effect). Estimated fixed klin value random 1RM random klin model equal 46.24, fixed klin random 1RM equal 47.62. Regardless statistical modeling preference, STMr package allows implementation .","code":"m_pooled <- estimate_kmod(   perc_1RM = RTF_testing$`Real %1RM`,   reps = RTF_testing$nRM,   # Use weighting   weighted = \"reps x load\" )  coef(m_pooled) #>   kmod  #> 0.0449  pred_df <- data.frame(perc_1RM = seq(0.65, 1, length.out = 100)) %>%   mutate(nRM = max_reps_modified_epley(perc_1RM = perc_1RM, kmod = coef(m_pooled)))  ggplot(RTF_testing, aes(x = `Real %1RM` * 100, y = nRM)) +   theme_bw() +   geom_point(aes(color = Athlete), alpha = 0.8) +   geom_line(aes(color = Athlete), alpha = 0.8) +   xlab(\"%1RM\") +   geom_line(data = pred_df, aes(x = perc_1RM * 100, y = nRM), size = 1.5, alpha = 0.8) mm1 <- estimate_kmod_mixed(   athlete = RTF_testing$Athlete,   perc_1RM = RTF_testing$`Real %1RM`,   reps = RTF_testing$nRM )  summary(mm1) #> Nonlinear mixed-effects model fit by maximum likelihood #>   Model: nRM ~ ((kmod - 1) * perc_1RM + 1)/(kmod * perc_1RM)  #>   Data: df  #>   AIC BIC logLik #>   131 136  -62.7 #>  #> Random effects: #>  Formula: kmod ~ 1 | athlete #>           kmod Residual #> StdDev: 0.0178    0.658 #>  #> Fixed effects:  kmod ~ 1  #>       Value Std.Error DF t-value p-value #> kmod 0.0422   0.00529 24    7.97       0 #>  #> Standardized Within-Group Residuals: #>    Min     Q1    Med     Q3    Max  #> -2.222 -0.769 -0.322  0.263  1.167  #>  #> Number of Observations: 36 #> Number of Groups: 12  coef(mm1) #>             kmod #> Athlete A 0.0206 #> Athlete B 0.0382 #> Athlete C 0.0796 #> Athlete D 0.0300 #> Athlete E 0.0456 #> Athlete F 0.0264 #> Athlete G 0.0404 #> Athlete H 0.0324 #> Athlete I 0.0233 #> Athlete J 0.0552 #> Athlete K 0.0692 #> Athlete L 0.0453 pred_rnd_df <- expand_grid(   athlete = unique(RTF_testing$Athlete),   perc_1RM = seq(0.65, 1, length.out = 100) ) %>%   mutate(nRM = predict(mm1, newdata = data.frame(athlete = athlete, perc_1RM = perc_1RM)))  pred_fix_df <- data.frame(perc_1RM = seq(0.65, 1, length.out = 100)) %>%   mutate(nRM = max_reps_modified_epley(perc_1RM = perc_1RM, kmod = summary(mm1)$coefficients$fixed))  gg <- ggplot(RTF_testing, aes(x = `Real %1RM` * 100, y = nRM)) +   theme_bw() +   geom_point(aes(color = Athlete), alpha = 0.8) +   geom_line(data = pred_rnd_df, aes(x = perc_1RM * 100, y = nRM, color = athlete), alpha = 0.8) +   geom_line(data = pred_fix_df, aes(x = perc_1RM * 100, y = nRM), alpha = 0.8, size = 1.5) +   geom_line(data = pred_df, aes(x = perc_1RM * 100, y = nRM), size = 1.5, alpha = 0.8, linetype = \"dashed\") +   xlab(\"%1RM\") gg mm2 <- estimate_klin_1RM_mixed(   athlete = RTF_testing$Athlete,   weight = RTF_testing$`Real Weight`,   reps = RTF_testing$nRM )  summary(mm2) #> Nonlinear mixed-effects model fit by maximum likelihood #>   Model: nRM ~ (1 - (weight/oneRM)) * klin + 1  #>   Data: df  #>   AIC BIC logLik #>   180 189    -84 #>  #> Random effects: #>  Formula: list(klin ~ 1, oneRM ~ 1) #>  Level: athlete #>  Structure: General positive-definite, Log-Cholesky parametrization #>          StdDev Corr   #> klin     15.809 klin   #> oneRM    13.544 -0.145 #> Residual  0.632        #>  #> Fixed effects:  klin + oneRM ~ 1  #>       Value Std.Error DF t-value p-value #> klin   46.2      4.82 23     9.6       0 #> oneRM 101.5      4.06 23    25.0       0 #>  Correlation:  #>       klin   #> oneRM -0.163 #>  #> Standardized Within-Group Residuals: #>    Min     Q1    Med     Q3    Max  #> -1.601 -0.238  0.103  0.388  0.988  #>  #> Number of Observations: 36 #> Number of Groups: 12  coef(mm2) #>           klin oneRM #> Athlete A 75.2  96.2 #> Athlete B 45.4  88.9 #> Athlete C 25.3 107.1 #> Athlete D 53.3 100.5 #> Athlete E 33.9 106.1 #> Athlete F 62.5  85.3 #> Athlete G 43.2  95.8 #> Athlete H 50.2 123.8 #> Athlete I 67.2 103.2 #> Athlete J 34.4  85.0 #> Athlete K 24.8  95.5 #> Athlete L 39.4 130.1 pred_rnd_df <- expand_grid(   athlete = unique(RTF_testing$Athlete),   weight = seq(     min(RTF_testing$`Real Weight`) * 0.9,     max(RTF_testing$`Real Weight`) * 1.1,     length.out = 100   ) ) %>%   mutate(nRM = predict(mm2, newdata = data.frame(athlete = athlete, weight = weight))) %>%   filter(nRM >= 1)   gg <- ggplot(RTF_testing, aes(x = `Real Weight`, y = nRM)) +   theme_bw() +   geom_point(aes(color = Athlete), alpha = 0.8) +   geom_line(data = pred_rnd_df, aes(x = weight, y = nRM, color = athlete), alpha = 0.8) +   xlab(\"Weight (kg)\") gg mm3 <- estimate_klin_1RM_mixed(   athlete = RTF_testing$Athlete,   weight = RTF_testing$`Real Weight`,   reps = RTF_testing$nRM,   random = oneRM ~ 1 )  summary(mm3) #> Nonlinear mixed-effects model fit by maximum likelihood #>   Model: nRM ~ (1 - (weight/oneRM)) * klin + 1  #>   Data: df  #>   AIC BIC logLik #>   199 205  -95.4 #>  #> Random effects: #>  Formula: oneRM ~ 1 | athlete #>         oneRM Residual #> StdDev:  13.3     2.05 #>  #> Fixed effects:  klin + oneRM ~ 1  #>       Value Std.Error DF t-value p-value #> klin   47.6      3.44 23    13.8       0 #> oneRM 101.6      4.23 23    24.0       0 #>  Correlation:  #>       klin   #> oneRM -0.293 #>  #> Standardized Within-Group Residuals: #>    Min     Q1    Med     Q3    Max  #> -1.497 -0.315 -0.110  0.500  2.120  #>  #> Number of Observations: 36 #> Number of Groups: 12  coef(mm3) #>           klin oneRM #> Athlete A 47.6 107.6 #> Athlete B 47.6  88.7 #> Athlete C 47.6 102.0 #> Athlete D 47.6 102.6 #> Athlete E 47.6 100.7 #> Athlete F 47.6  90.8 #> Athlete G 47.6  94.8 #> Athlete H 47.6 123.5 #> Athlete I 47.6 111.2 #> Athlete J 47.6  82.4 #> Athlete K 47.6  89.6 #> Athlete L 47.6 125.4 pred_rnd_df <- expand_grid(   athlete = unique(RTF_testing$Athlete),   weight = seq(     min(RTF_testing$`Real Weight`) * 0.9,     max(RTF_testing$`Real Weight`) * 1.1,     length.out = 100   ) ) %>%   mutate(nRM = predict(mm3, newdata = data.frame(athlete = athlete, weight = weight))) %>%   filter(nRM >= 1)   gg <- ggplot(RTF_testing, aes(x = `Real Weight`, y = nRM)) +   theme_bw() +   geom_point(aes(color = Athlete), alpha = 0.8) +   geom_line(data = pred_rnd_df, aes(x = weight, y = nRM, color = athlete), alpha = 0.8) +   xlab(\"Weight (kg)\") gg"},{"path":"https://mladenjovanovic.github.io/STMr/index.html","id":"quantile-estimation","dir":"","previous_headings":"Estimation","what":"Quantile estimation","title":"Strength Training Manual R-Language Functions","text":"far estimated Reps-Max profiles using sets failure. approach demands designated testing session(s). estimate Reps-Max profiles well 1RMs training log data? allow “embedded” testing, since need designated testing sessions sets, use normal training log data. sets taken failure, one way estimate max reps can performed utilize subjective rating perceived reps--reserve (pRIR eRIR). example, perform 100kg 5 reps bench press rate 2pRIR, can assume 7RM load (.e., 5 reps + 2pRIR). strength_training_log dataset contains reps performed well eRIR values, including weight used. High eRIR values (>5eRIR) treated missing-data (.e., unreliable). pooled plot 12 weeks training log data single exercise:  interested finding “best” “worst” profiles (well estimated 1RMs). achieve , utilize quantile non-linear regression. quantile non-linear estimation implemented STMr package using nlrq() function quantreg package. Quantile estimation functions ends _quantile. can also use ... feature quantile estimation functions forward extra arguments nlrq() function. “best” performance profile can use 0.9 quantile, “worst” can use 0.1 quantile. utilize Linear/Brzycki’s model. information please refer Load-Exertion Tables Use Planning article series. Graphically, profiles look like :","code":"gg <- ggplot(strength_training_log) +   theme_bw() +   geom_jitter(     aes(x = weight, y = reps + eRIR),     size = 2,     shape = 1,     width = 0.2,     height = 0.2,     alpha = 0.8   ) +   xlab(\"Weight (kg)\")  gg mq_best <- estimate_klin_1RM_quantile(   weight = strength_training_log$weight,   reps = strength_training_log$reps,   eRIR = strength_training_log$eRIR,   tau = 0.9 )  summary(mq_best) #>  #> Call: quantreg::nlrq(formula = nRM ~ (1 - (weight/`1RM`)) * klin +  #>     1, data = df, start = list(klin = 1, `1RM` = max(df$weight)),  #>     tau = tau, control = list(maxiter = 10000, k = 2, InitialStepSize = 0,  #>         big = 1e+20, eps = 1e-07, beta = 0.97), trace = FALSE) #>  #> tau: [1] 0.9 #>  #> Coefficients: #>      Value  Std. Error t value Pr(>|t|) #> klin  36.88   1.48      24.91    0.00   #> 1RM  105.36   1.15      91.97    0.00 coef(mq_best) #>  klin   1RM  #>  36.9 105.4  mq_worst <- estimate_klin_1RM_quantile(   weight = strength_training_log$weight,   reps = strength_training_log$reps,   eRIR = strength_training_log$eRIR,   tau = 0.1 )  summary(mq_worst) #>  #> Call: quantreg::nlrq(formula = nRM ~ (1 - (weight/`1RM`)) * klin +  #>     1, data = df, start = list(klin = 1, `1RM` = max(df$weight)),  #>     tau = tau, control = list(maxiter = 10000, k = 2, InitialStepSize = 0,  #>         big = 1e+20, eps = 1e-07, beta = 0.97), trace = FALSE) #>  #> tau: [1] 0.1 #>  #> Coefficients: #>      Value Std. Error t value Pr(>|t|) #> klin 26.00  3.90       6.67    0.00    #> 1RM  97.50  1.89      51.71    0.00 coef(mq_worst) #> klin  1RM  #> 26.0 97.5 pred_df_best <- tibble(weight = seq(60, 120, length.out = 100)) %>%   mutate(nRM = predict(mq_best, newdata = data.frame(weight = weight))) %>%   filter(nRM >= 1)  pred_df_worst <- tibble(weight = seq(60, 120, length.out = 100)) %>%   mutate(nRM = predict(mq_worst, newdata = data.frame(weight = weight))) %>%   filter(nRM >= 1)  gg +   geom_line(data = pred_df_best, aes(x = weight, y = nRM)) +   geom_line(data = pred_df_worst, aes(x = weight, y = nRM), linetype = \"dashed\")"},{"path":"https://mladenjovanovic.github.io/STMr/index.html","id":"rolling-estmation","dir":"","previous_headings":"Estimation","what":"Rolling estmation","title":"Strength Training Manual R-Language Functions","text":"previous example used 12 weeks strength training log data (.e., pooled). can perform rolling analysis using estimate_rolling_1RM() function. estimate_rolling_1RM() allows use different functions (.e., estimate_k_1RM(), estimate_kmod_1RM(), estimate_klin_1RM(), estimate_k_1RM_quantile(), estimate_kmod_1RM_quantile(), estimate_klin_1RM_quantile()). example using previous 6 days (.e., one phase, 3 rolling weeks): following example, using rolling 3 weeks estimation “best” “worst” 1RM, well kmod parameter using 0.1 0.9 quantiles:  analysis represents novel technique time tell valid interpret correctly. least powerful, transparent, flexible open-source tool: STMr package.","code":"estimate_rolling_1RM(   weight = strength_training_log$weight,   reps = strength_training_log$reps,   eRIR = strength_training_log$eRIR,   day_index = strength_training_log$day,   window = 6,   estimate_function = estimate_kmod_1RM_quantile,   tau = 0.9) #> # A tibble: 19 × 3 #>    day_index   kmod `1RM` #>        <int>  <dbl> <dbl> #>  1         6 0.0404  98.8 #>  2         7 0.0368  98.5 #>  3         8 0.0400 101.  #>  4         9 0.0383 101.  #>  5        10 0.0431 104.  #>  6        11 0.0432 104.  #>  7        12 0.0455 106.  #>  8        13 0.0385 104.  #>  9        14 0.0385 104.  #> 10        15 0.0410 106.  #> 11        16 0.0415 107.  #> 12        17 0.0415 107.  #> 13        18 0.0410 106.  #> 14        19 0.0410 106.  #> 15        20 0.0415 107.  #> 16        21 0.0381 106.  #> 17        22 0.0381 106.  #> 18        23 0.0364 106.  #> 19        24 0.0382 107. est_profiles <- function(.x) {   res <- estimate_rolling_1RM(     weight = strength_training_log$weight,     reps = strength_training_log$reps,     eRIR = strength_training_log$eRIR,     day_index = strength_training_log$day,     window = 6,     estimate_function = estimate_kmod_1RM_quantile,     tau = .x$tau)      tibble(tau = .x$tau, res) }  data.frame(tau = c(0.1, 0.9)) %>%   rowwise() %>%   do(est_profiles(.)) %>%   ungroup() %>%   pivot_longer(cols = -c(tau, day_index), names_to = \"param\") %>%   group_by(day_index, param) %>%   summarise(lower = min(value), upper = max(value)) %>%   ungroup() %>%      # Plot   ggplot(aes(x = day_index)) +   theme_bw() +   geom_ribbon(aes(ymin = lower, ymax = upper, fill = param), color = \"black\", alpha = 0.5) +   facet_wrap(~param, scales = \"free_y\") +   xlab(\"Day index\") +   ylab(NULL) +   theme(legend.position = \"none\")"},{"path":"https://mladenjovanovic.github.io/STMr/index.html","id":"scheme-plotting-tips","dir":"","previous_headings":"","what":"Scheme plotting tips","title":"Strength Training Manual R-Language Functions","text":"Since developed STMr package help write Strength Training Manual Volume 3 book, plotting functionalites vast flexible. tip can use.","code":""},{"path":"https://mladenjovanovic.github.io/STMr/index.html","id":"different-ways-to-plot-the-scheme","dir":"","previous_headings":"Scheme plotting tips","what":"Different ways to plot the scheme","title":"Strength Training Manual R-Language Functions","text":"S3 plot method plotting STMr schemes allow three different types plots: (1) bar (default), (2) vertical, (3) fraction. default bar plot:  Another way plot scheme using vertical method.  final method use fraction method, similar Olympic weightlifting log notation:  avoid printing %, make %1RM labels bigger, use perc_str = \"\":","code":"scheme <- scheme_wave(   reps = c(10, 8, 6),   vertical_planning = vertical_linear)  plot(scheme) plot(scheme, type = \"vertical\") plot(scheme, type = \"fraction\") plot(scheme, perc_str = \"\")"},{"path":"https://mladenjovanovic.github.io/STMr/index.html","id":"different-label-sizes","dir":"","previous_headings":"Scheme plotting tips","what":"Different label sizes","title":"Strength Training Manual R-Language Functions","text":"S3 plot method plotting STMr schemes allow set font size. can useful later used facets.  plotting allows flexible labels, using ggfittext package, fits labels exit bars. example using Set Accumulation vertical plan:  Using size argument, can set maximum label size. useful want avoid different sizes labels plot. labels still shrinked needed, bigger selected font size:  can also set padding labels. Let’s remove % set padding:","code":"plot(scheme, font_size = 20) scheme <- scheme_wave(   reps = c(10, 10, 10),   vertical_planning = vertical_set_accumulation,    vertical_planning_control = list(accumulate_set = 1:3, sequence =TRUE) )  plot(scheme) plot(scheme, size = 5) plot(   scheme,   perc_str = \"\",   padding.x = grid::unit(0.2, \"mm\"),   padding.y = grid::unit(0.2, \"mm\"),)"},{"path":"https://mladenjovanovic.github.io/STMr/index.html","id":"creating-facets","dir":"","previous_headings":"Scheme plotting tips","what":"Creating facets","title":"Strength Training Manual R-Language Functions","text":"Let’s say want generate multiple schemes want plot . can easily:","code":"scheme_1 <- scheme_wave(   reps = c(10, 8, 6),   vertical_planning = vertical_linear )  scheme_2 <- scheme_wave(   reps = c(10, 8, 6, 4),   vertical_planning = vertical_block_undulating )  scheme_df <- rbind(   data.frame(scheme = \"Linear Wave 10/8/6\", scheme_1),   data.frame(scheme = \"Block Undulating Wave 10/8/6\", scheme_2) )  # We need to set the same class to allow for S3 plotting method class(scheme_df) <- class(scheme_1)  # Since the plot() returns ggplot object, we can create facets plot(scheme_df) +   facet_wrap(~scheme)"},{"path":"https://mladenjovanovic.github.io/STMr/index.html","id":"further-information","dir":"","previous_headings":"","what":"Further information","title":"Strength Training Manual R-Language Functions","text":"find , please check Create Custom Set Rep Schemes {STMr} course, covers lot ground utilization STMr package depth.","code":""},{"path":"https://mladenjovanovic.github.io/STMr/index.html","id":"how-to-cite-stmr","dir":"","previous_headings":"","what":"How to cite {STMr}","title":"Strength Training Manual R-Language Functions","text":"using STMr package publications, please use following citation: plan using estimation models commercial non-commercial products, please contact email: coach.mladen.jovanovic @ gmail.com","code":"citation(\"STMr\") #>  #> To cite package 'STMr' in publications use: #>  #>   Jovanović M (2023). _STMr: Strength Training Manual R-Language #>   Functions_. R package version 0.1.6, #>   <https://github.com/mladenjovanovic/STMr>. #>  #> A BibTeX entry for LaTeX users is #>  #>   @Manual{STMr-package, #>     title = {{STMr}: Strength Training Manual R-Language Functions}, #>     author = {Mladen Jovanović}, #>     year = {2023}, #>     note = {R package version 0.1.6}, #>     url = {https://github.com/mladenjovanovic/STMr}, #>   }"},{"path":"https://mladenjovanovic.github.io/STMr/reference/RTF_testing.html","id":null,"dir":"Reference","previous_headings":"","what":"Reps to failure testing of 12 athletes — RTF_testing","title":"Reps to failure testing of 12 athletes — RTF_testing","text":"dataset containing reps failure testing 12 athletes using 70, 80, 90% 1RM","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/RTF_testing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reps to failure testing of 12 athletes — RTF_testing","text":"","code":"RTF_testing"},{"path":"https://mladenjovanovic.github.io/STMr/reference/RTF_testing.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Reps to failure testing of 12 athletes — RTF_testing","text":"data frame 36 rows 6 variables: Athlete Name athlete; ID 1RM Maximum weight athlete can lift correctly single rep Target %1RM %1RM want use testing; 70, 80, 90% Target Weight Estimated weight lifted Real Weight Weight estimated lifted, rounded closest 2.5 Real %1RM Recalculated %1RM rounding weight nRM Reps--failure (RTF), number maximum repetitions (nRM) performed","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/adj_perc_1RM.html","id":null,"dir":"Reference","previous_headings":"","what":"Family of functions to adjust %1RM — adj_perc_1RM","title":"Family of functions to adjust %1RM — adj_perc_1RM","text":"Family functions adjust %1RM","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/adj_perc_1RM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Family of functions to adjust %1RM — adj_perc_1RM","text":"","code":"adj_perc_1RM_RIR(   reps,   adjustment = 0,   mfactor = 1,   max_perc_1RM_func = max_perc_1RM_epley,   ... )  adj_perc_1RM_DI(   reps,   adjustment = 0,   mfactor = 1,   max_perc_1RM_func = max_perc_1RM_epley,   ... )  adj_perc_1RM_rel_int(   reps,   adjustment = 1,   mfactor = 1,   max_perc_1RM_func = max_perc_1RM_epley,   ... )  adj_perc_1RM_perc_MR(   reps,   adjustment = 1,   mfactor = 1,   max_perc_1RM_func = max_perc_1RM_epley,   ... )"},{"path":"https://mladenjovanovic.github.io/STMr/reference/adj_perc_1RM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Family of functions to adjust %1RM — adj_perc_1RM","text":"reps Numeric vector. Number repetition performed adjustment Numeric vector. Adjustment implemented mfactor Numeric vector. Default 1 (.e., adjustment). Use mfactor = 2 generate ballistic adjustment tables max_perc_1RM_func Max  %1RM function used. Default max_perc_1RM_epley ... Forwarded max_perc_1RM_func. Usually parameter value. example klin = 36 using max_perc_1RM_linear max_perc_1RM_func function","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/adj_perc_1RM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Family of functions to adjust %1RM — adj_perc_1RM","text":"Numeric vector. Predicted perc 1RM","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/adj_perc_1RM.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Family of functions to adjust %1RM — adj_perc_1RM","text":"adj_perc_1RM_RIR(): Adjust max  %1RM using Reps Reserve (RIR) approach adj_perc_1RM_DI(): Adjust max %1RM using Deducted Intensity (DI) approach. approach simple deducts adjustment estimated %1RM adj_perc_1RM_rel_int(): Adjust max perc 1RM using Relative Intensity (RelInt) approach. approach simple multiplies estimated perc 1RM adjustment adj_perc_1RM_perc_MR(): Adjust max perc 1RM using %Max Reps (%MR) approach. approach simple divides target reps adjustment","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/adj_perc_1RM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Family of functions to adjust %1RM — adj_perc_1RM","text":"","code":"# ------------------------------------------ # Adjustment using Reps In Reserve (RIR) adj_perc_1RM_RIR(5) #> [1] 0.8572653  # Use ballistic adjustment (this implies doing half the reps) adj_perc_1RM_RIR(5, mfactor = 2) #> [1] 0.7501875  # Use 2 reps in reserve adj_perc_1RM_RIR(5, adjustment = 2) #> [1] 0.8109642  # Use Linear model adj_perc_1RM_RIR(5, max_perc_1RM_func = max_perc_1RM_linear, adjustment = 2) #> [1] 0.8181818  # Use Modifed Epley's equation with a custom parameter values adj_perc_1RM_RIR(   5,   max_perc_1RM_func = max_perc_1RM_modified_epley,   adjustment = 2,   kmod = 0.06 ) #> [1] 0.7352941 # ------------------------------------------ # Adjustment using Deducted Intensity (DI) adj_perc_1RM_DI(5) #> [1] 0.8572653  # Use ballistic adjustment (this implies doing half the reps) adj_perc_1RM_DI(5, mfactor = 2) #> [1] 0.7501875  # Use 10 perc deducted intensity adj_perc_1RM_DI(5, adjustment = -0.1) #> [1] 0.7572653  # Use Linear model adj_perc_1RM_DI(5, max_perc_1RM_func = max_perc_1RM_linear, adjustment = -0.1) #> [1] 0.7787879  # Use Modifed Epley's equation with a custom parameter values adj_perc_1RM_DI(   5,   max_perc_1RM_func = max_perc_1RM_modified_epley,   adjustment = -0.1,   kmod = 0.06 ) #> [1] 0.7064516 # ------------------------------------------ # Adjustment using Relative Intensity (RelInt) adj_perc_1RM_rel_int(5) #> [1] 0.8572653  # Use ballistic adjustment (this implies doing half the reps) adj_perc_1RM_rel_int(5, mfactor = 2) #> [1] 0.7501875  # Use 90 perc  relative intensity adj_perc_1RM_rel_int(5, adjustment = 0.9) #> [1] 0.7715388  # Use Linear model adj_perc_1RM_rel_int(5, max_perc_1RM_func = max_perc_1RM_linear, adjustment = 0.9) #> [1] 0.7909091  # Use Modifed Epley's equation with a custom parameter values adj_perc_1RM_rel_int(   5,   max_perc_1RM_func = max_perc_1RM_modified_epley,   adjustment = 0.9,   kmod = 0.06 ) #> [1] 0.7258065 # ------------------------------------------ # Adjustment using % max reps (%MR) adj_perc_1RM_perc_MR(5) #> [1] 0.8572653  # Use ballistic adjustment (this implies doing half the reps) adj_perc_1RM_perc_MR(5, mfactor = 2) #> [1] 0.7501875  # Use 70 perc max reps adj_perc_1RM_perc_MR(5, adjustment = 0.7) #> [1] 0.8078477  # Use Linear model adj_perc_1RM_perc_MR(5, max_perc_1RM_func = max_perc_1RM_linear, adjustment = 0.7) #> [1] 0.8138528  # Use Modifed Epley's equation with a custom parameter values adj_perc_1RM_perc_MR(   5,   max_perc_1RM_func = max_perc_1RM_modified_epley,   adjustment = 0.7,   kmod = 0.06 ) #> [1] 0.7306889"},{"path":"https://mladenjovanovic.github.io/STMr/reference/adj_reps.html","id":null,"dir":"Reference","previous_headings":"","what":"Family of functions to adjust number of repetition — adj_reps","title":"Family of functions to adjust number of repetition — adj_reps","text":"functions reverse version adj_perc_1RM family functions. Use want estimate number repetitions used using known %1RM level adjustment","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/adj_reps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Family of functions to adjust number of repetition — adj_reps","text":"","code":"adj_reps_RIR(   perc_1RM,   adjustment = 0,   mfactor = 1,   max_reps_func = max_reps_epley,   ... )  adj_reps_DI(   perc_1RM,   adjustment = 1,   mfactor = 1,   max_reps_func = max_reps_epley,   ... )  adj_reps_rel_int(   perc_1RM,   adjustment = 1,   mfactor = 1,   max_reps_func = max_reps_epley,   ... )  adj_reps_perc_MR(   perc_1RM,   adjustment = 1,   mfactor = 1,   max_reps_func = max_reps_epley,   ... )"},{"path":"https://mladenjovanovic.github.io/STMr/reference/adj_reps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Family of functions to adjust number of repetition — adj_reps","text":"perc_1RM Numeric vector. %1RM used (use 0.5 50%, 0.9 90%) adjustment Numeric vector. Adjustment implemented mfactor Numeric vector. Default 1 (.e., adjustment). Use mfactor = 2 generate ballistic adjustment tables max_reps_func Max reps function used. Default max_reps_epley ... Forwarded max_reps_func. Usually parameter value. example klin = 36 using max_reps_linear max_reps_func function","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/adj_reps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Family of functions to adjust number of repetition — adj_reps","text":"Numeric vector. Predicted number repetitions performed","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/adj_reps.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Family of functions to adjust number of repetition — adj_reps","text":"adj_reps_RIR(): Adjust number repetitions using Reps Reserve (RIR) approach adj_reps_DI(): Adjust number repetitions using Deducted Intensity (DI) approach adj_reps_rel_int(): Adjust number repetitions using Relative Intensity (RelInt) approach adj_reps_perc_MR(): Adjust number repetitions using % max reps (%MR) approach","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/adj_reps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Family of functions to adjust number of repetition — adj_reps","text":"","code":"# ------------------------------------------ # Adjustment using Reps In Reserve (RIR) adj_reps_RIR(0.75) #> [1] 10.01001  # Use ballistic adjustment (this implies doing half the reps) adj_reps_RIR(0.75, mfactor = 2) #> [1] 5.005005  # Use 2 reps in reserve adj_reps_RIR(0.75, adjustment = 2) #> [1] 8.01001  # Use Linear model adj_reps_RIR(0.75, max_reps_func = max_reps_linear, adjustment = 2) #> [1] 7.25  # Use Modifed Epley's equation with a custom parameter values adj_reps_RIR(   0.75,   max_reps_func = max_reps_modified_epley,   adjustment = 2,   kmod = 0.06 ) #> [1] 4.555556 # ------------------------------------------ # Adjustment using Deducted Intensity (DI) adj_reps_DI(0.75) #> [1] -150.1502  # Use ballistic adjustment (this implies doing half the reps) adj_reps_DI(0.75, mfactor = 2) #> [1] -75.07508  # Use 10% deducted intensity adj_reps_DI(0.75, adjustment = -0.1) #> [1] 5.299417  # Use Linear model adj_reps_DI(0.75, max_reps_func = max_reps_linear, adjustment = -0.1) #> [1] 5.95  # Use Modifed Epley's equation with a custom parameter values adj_reps_DI(   0.75,   max_reps_func = max_reps_modified_epley,   adjustment = -0.1,   kmod = 0.06 ) #> [1] 3.941176 # ------------------------------------------ # Adjustment using Relative Intensity (RelInt) adj_reps_rel_int(0.75) #> [1] 10.01001  # Use ballistic adjustment (this implies doing half the reps) adj_reps_rel_int(0.75, mfactor = 2) #> [1] 5.005005  # Use 85% relative intensity adj_reps_rel_int(0.75, adjustment = 0.85) #> [1] 4.004004  # Use Linear model adj_reps_rel_int(0.75, max_reps_func = max_reps_linear, adjustment = 0.85) #> [1] 4.882353  # Use Modifed Epley's equation with a custom parameter values adj_reps_rel_int(   0.75,   max_reps_func = max_reps_modified_epley,   adjustment = 0.85,   kmod = 0.06 ) #> [1] 3.222222 # ------------------------------------------ # Adjustment using % max reps (%MR) adj_reps_perc_MR(0.75) #> [1] 10.01001  # Use ballistic adjustment (this implies doing half the reps) adj_reps_perc_MR(0.75, mfactor = 2) #> [1] 5.005005  # Use 85% of max reps adj_reps_perc_MR(0.75, adjustment = 0.85) #> [1] 8.508509  # Use Linear model adj_reps_perc_MR(0.75, max_reps_func = max_reps_linear, adjustment = 0.85) #> [1] 7.8625  # Use Modifed Epley's equation with a custom parameter values adj_reps_perc_MR(   0.75,   max_reps_func = max_reps_modified_epley,   adjustment = 0.85,   kmod = 0.06 ) #> [1] 5.572222"},{"path":"https://mladenjovanovic.github.io/STMr/reference/create_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Example — create_example","title":"Create Example — create_example","text":"function create simple example using progression_table","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/create_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Example — create_example","text":"","code":"create_example(   progression_table,   reps = c(3, 5, 10),   volume = c(\"intensive\", \"normal\", \"extensive\"),   type = c(\"grinding\", \"ballistic\"),   ... )"},{"path":"https://mladenjovanovic.github.io/STMr/reference/create_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Example — create_example","text":"progression_table Progression table function reps Numeric vector. Default c(3, 5, 10) volume Character vector. Default c(\"intensive\", \"normal\", \"extensive\") type Character vector. Type max rep table. Options grinding (Default) ballistic ... Extra arguments forwarded progression_table","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/create_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Example — create_example","text":"Data frame following structure type Type set rep scheme reps Number reps performed volume Volume type set rep scheme Step 1 First progression step %1RM Step 2 Second progression step %1RM Step 3 Third progression step %1RM Step 4 Fourth progression step %1RM Step 2-1 Diff Difference %1RM second first progression step Step 3-2 Diff Difference %1RM third second progression step Step 4-3 Diff Difference %1RM fourth third progression step","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/create_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Example — create_example","text":"","code":"create_example(progression_RIR) #> # A tibble: 18 × 10 #>    type       reps volume    `Step 1` `Step 2` `Step 3` `Step 4` `Step 2-1 Diff` #>    <chr>     <dbl> <chr>        <dbl>    <dbl>    <dbl>    <dbl>           <dbl> #>  1 grinding      3 intensive     83.3     85.7     88.2     90.9            2.38 #>  2 grinding      3 normal        81.1     83.3     85.7     88.2            2.25 #>  3 grinding      3 extensive     79.0     81.1     83.3     85.7            2.13 #>  4 grinding      5 intensive     79.0     81.1     83.3     85.7            2.13 #>  5 grinding      5 normal        76.9     79.0     81.1     83.3            2.02 #>  6 grinding      5 extensive     75.0     76.9     79.0     81.1            1.92 #>  7 grinding     10 intensive     69.8     71.4     73.2     75.0            1.66 #>  8 grinding     10 normal        68.2     69.8     71.4     73.2            1.59 #>  9 grinding     10 extensive     66.7     68.2     69.8     71.4            1.51 #> 10 ballistic     3 intensive     71.4     75.0     79.0     83.3            3.57 #> 11 ballistic     3 normal        68.2     71.4     75.0     79.0            3.25 #> 12 ballistic     3 extensive     65.2     68.2     71.4     75.0            2.96 #> 13 ballistic     5 intensive     65.2     68.2     71.4     75.0            2.96 #> 14 ballistic     5 normal        62.5     65.2     68.2     71.4            2.72 #> 15 ballistic     5 extensive     60.0     62.5     65.2     68.2            2.50 #> 16 ballistic    10 intensive     53.6     55.6     57.7     60.0            1.98 #> 17 ballistic    10 normal        51.7     53.6     55.6     57.7            1.85 #> 18 ballistic    10 extensive     50.0     51.7     53.6     55.6            1.72 #> # ℹ 2 more variables: `Step 3-2 Diff` <dbl>, `Step 4-3 Diff` <dbl>  # Create example using specific reps-max table and k value create_example(   progression_RIR,   max_perc_1RM_func = max_perc_1RM_modified_epley,   kmod = 0.0388 ) #> # A tibble: 18 × 10 #>    type       reps volume    `Step 1` `Step 2` `Step 3` `Step 4` `Step 2-1 Diff` #>    <chr>     <dbl> <chr>        <dbl>    <dbl>    <dbl>    <dbl>           <dbl> #>  1 grinding      3 intensive     83.8     86.6     89.6     92.8            2.81 #>  2 grinding      3 normal        81.1     83.8     86.6     89.6            2.64 #>  3 grinding      3 extensive     78.6     81.1     83.8     86.6            2.48 #>  4 grinding      5 intensive     78.6     81.1     83.8     86.6            2.48 #>  5 grinding      5 normal        76.3     78.6     81.1     83.8            2.33 #>  6 grinding      5 extensive     74.1     76.3     78.6     81.1            2.19 #>  7 grinding     10 intensive     68.2     70.1     72.0     74.1            1.86 #>  8 grinding     10 normal        66.5     68.2     70.1     72.0            1.76 #>  9 grinding     10 extensive     64.8     66.5     68.2     70.1            1.67 #> 10 ballistic     3 intensive     70.1     74.1     78.6     83.8            4.03 #> 11 ballistic     3 normal        66.5     70.1     74.1     78.6            3.62 #> 12 ballistic     3 extensive     63.2     66.5     70.1     74.1            3.26 #> 13 ballistic     5 intensive     63.2     66.5     70.1     74.1            3.26 #> 14 ballistic     5 normal        60.3     63.2     66.5     70.1            2.96 #> 15 ballistic     5 extensive     57.6     60.3     63.2     66.5            2.69 #> 16 ballistic    10 intensive     50.8     52.8     55.1     57.6            2.08 #> 17 ballistic    10 normal        48.8     50.8     52.8     55.1            1.92 #> 18 ballistic    10 extensive     47.1     48.8     50.8     52.8            1.78 #> # ℹ 2 more variables: `Step 3-2 Diff` <dbl>, `Step 4-3 Diff` <dbl>"},{"path":"https://mladenjovanovic.github.io/STMr/reference/estimate_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate relationship between reps and %1RM (or weight) — estimate_functions","title":"Estimate relationship between reps and %1RM (or weight) — estimate_functions","text":"default, target variable reps performed, predictors perc_1RM weight. reverse , use reverse = TRUE argument","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/estimate_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate relationship between reps and %1RM (or weight) — estimate_functions","text":"","code":"estimate_k_generic(   perc_1RM,   reps,   eRIR = 0,   k = 0.0333,   reverse = FALSE,   weighted = \"none\",   ... )  estimate_k_generic_1RM(   weight,   reps,   eRIR = 0,   k = 0.0333,   reverse = FALSE,   weighted = \"none\",   ... )  estimate_k(perc_1RM, reps, eRIR = 0, reverse = FALSE, weighted = \"none\", ...)  estimate_k_1RM(weight, reps, eRIR = 0, reverse = FALSE, weighted = \"none\", ...)  estimate_kmod(   perc_1RM,   reps,   eRIR = 0,   reverse = FALSE,   weighted = \"none\",   ... )  estimate_kmod_1RM(   weight,   reps,   eRIR = 0,   reverse = FALSE,   weighted = \"none\",   ... )  estimate_klin(   perc_1RM,   reps,   eRIR = 0,   reverse = FALSE,   weighted = \"none\",   ... )  estimate_klin_1RM(   weight,   reps,   eRIR = 0,   reverse = FALSE,   weighted = \"none\",   ... )  get_predicted_1RM_from_k_model(model)"},{"path":"https://mladenjovanovic.github.io/STMr/reference/estimate_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate relationship between reps and %1RM (or weight) — estimate_functions","text":"perc_1RM %1RM reps Number repetitions done eRIR Subjective estimation reps--reserve (eRIR) k Value generic Epley's equation, default equal 0.0333 reverse Logical, default FALSE. reps used predictor instead target? weighted weighting used non-linear regression? Default \"none\". options include: \"reps\" (1/reps weighting), \"load\" (using weight %1RM), \"eRIR\" (1/(eRIR+1) weighting), \"reps x load\", \"reps x eRIR\", \"load x eRIR\", \"reps x load x eRIR\" ... Forwarded nlsLM function weight Weight used model Object returned  estimate_k_1RM function","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/estimate_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate relationship between reps and %1RM (or weight) — estimate_functions","text":"nlsLM object","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/estimate_functions.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Estimate relationship between reps and %1RM (or weight) — estimate_functions","text":"estimate_k_generic(): Provides model generic k parameter estimate_k_generic_1RM(): Provides model generic k parameter, well estimated 1RM. novel estimation function uses absolute weights. estimate_k(): Estimate parameter k Epley's equation estimate_k_1RM(): Estimate parameter k Epley's equation, well 1RM. novel estimation function uses absolute weights. estimate_kmod(): Estimate parameter kmod modified Epley's equation estimate_kmod_1RM(): Estimate parameter kmod modified Epley's equation, well 1RM. novel estimation function uses absolute weights estimate_klin(): Estimate parameter klin using Linear/Brzycki model estimate_klin_1RM(): Estimate parameter klin Linear/Brzycki equation, well 1RM. novel estimation function uses absolute weights get_predicted_1RM_from_k_model(): Estimate 1RM estimate_k_1RM function problem Epley's estimation model (implemented estimate_k_1RM function) predicts 1RM nRM = 0. Thus, estimated parameter model produced estimate_k_1RM function 1RM, 0RM. function calculates weight nRM = 1 normal reverse model. See Examples code","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/estimate_functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate relationship between reps and %1RM (or weight) — estimate_functions","text":"","code":"# --------------------------------------------------------- # Generic Epley's model m1 <- estimate_k_generic(   perc_1RM = c(0.7, 0.8, 0.9),   reps = c(10, 5, 3) )  coef(m1) #>      k  #> 0.0333  # --------------------------------------------------------- # Generic Epley's model that also estimates 1RM m1 <- estimate_k_generic_1RM(   weight = c(70, 110, 140),   reps = c(10, 5, 3) )  coef(m1) #>        k      0RM  #>   0.0333 111.0413  # --------------------------------------------------------- # Epley's model m1 <- estimate_k(   perc_1RM = c(0.7, 0.8, 0.9),   reps = c(10, 5, 3) )  coef(m1) #>          k  #> 0.04404789  # --------------------------------------------------------- # Epley's model that also estimates 1RM m1 <- estimate_k_1RM(   weight = c(70, 110, 140),   reps = c(10, 5, 3) )  coef(m1) #>           k         0RM  #>   0.2542595 248.2568809  # --------------------------------------------------------- # Modified Epley's model m1 <- estimate_kmod(   perc_1RM = c(0.7, 0.8, 0.9),   reps = c(10, 5, 3) )  coef(m1) #>       kmod  #> 0.05089596  # --------------------------------------------------------- # Modified Epley's model that also estimates 1RM m1 <- estimate_kmod_1RM(   weight = c(70, 110, 140),   reps = c(10, 5, 3) )  coef(m1) #>        kmod         1RM  #>   0.2027168 197.9310344  # --------------------------------------------------------- # Linear/Brzycki model m1 <- estimate_klin(   perc_1RM = c(0.7, 0.8, 0.9),   reps = c(10, 5, 3) )  coef(m1) #>     klin  #> 26.42857  # --------------------------------------------------------- # Linear/Brzycki model thal also estimates 1RM m1 <- estimate_klin_1RM(   weight = c(70, 110, 140),   reps = c(10, 5, 3) )  coef(m1) #>      klin       1RM  #>  15.81081 156.00000  # --------------------------------------------------------- # Estimating 1RM from Epley's model m1 <- estimate_k_1RM(150 * c(0.9, 0.8, 0.7), c(3, 6, 12)) m2 <- estimate_k_1RM(150 * c(0.9, 0.8, 0.7), c(3, 6, 12), reverse = TRUE)  # Estimated 0RM values from both model c(coef(m1)[[1]], coef(m2)[[1]]) #> [1] 0.03433858 0.03518712  # But these are not 1RMs!!! # Using the \"reverse\" model, where nRM is the predictor (in this case m2) # makes it easier to predict 1RM predict(m2, newdata = data.frame(nRM = 1)) #> [1] 142.9047  # But for the normal model it involve reversing the formula # To spare you from the math pain, use this get_predicted_1RM_from_k_model(m1) #> [1] 142.3961  # It also works for the \"reverse\" model get_predicted_1RM_from_k_model(m2) #> [1] 142.9047"},{"path":"https://mladenjovanovic.github.io/STMr/reference/estimate_functions_mixed.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate relationship between reps and weight using the non-linear mixed-effects regression — estimate_functions_mixed","title":"Estimate relationship between reps and weight using the non-linear mixed-effects regression — estimate_functions_mixed","text":"functions provide estimated 1RM parameter values using mixed-effect regression. default, target variable reps performed, predictor perc_1RM weight. reverse , use reverse = TRUE argument","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/estimate_functions_mixed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate relationship between reps and weight using the non-linear mixed-effects regression — estimate_functions_mixed","text":"","code":"estimate_k_mixed(athlete, perc_1RM, reps, eRIR = 0, reverse = FALSE, ...)  estimate_k_generic_1RM_mixed(   athlete,   weight,   reps,   eRIR = 0,   k = 0.0333,   reverse = FALSE,   random = zeroRM ~ 1,   ... )  estimate_k_1RM_mixed(   athlete,   weight,   reps,   eRIR = 0,   reverse = FALSE,   random = k + zeroRM ~ 1,   ... )  estimate_kmod_mixed(athlete, perc_1RM, reps, eRIR = 0, reverse = FALSE, ...)  estimate_kmod_1RM_mixed(   athlete,   weight,   reps,   eRIR = 0,   reverse = FALSE,   random = kmod + oneRM ~ 1,   ... )  estimate_klin_mixed(athlete, perc_1RM, reps, eRIR = 0, reverse = FALSE, ...)  estimate_klin_1RM_mixed(   athlete,   weight,   reps,   eRIR = 0,   reverse = FALSE,   random = klin + oneRM ~ 1,   ... )"},{"path":"https://mladenjovanovic.github.io/STMr/reference/estimate_functions_mixed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate relationship between reps and weight using the non-linear mixed-effects regression — estimate_functions_mixed","text":"athlete Athlete identifier perc_1RM %1RM reps Number repetitions done eRIR Subjective estimation reps--reserve (eRIR) reverse Logical, default FALSE. reps used predictor instead target? ... Forwarded nlme function weight Weight used k Value generic Epley's equation, default equal 0.0333 random Random parameter forwarded nlme function. Default k + zeroRM ~ 1 , estimate_k_mixed function, k + oneRM ~ 1 estimate_kmod_mixed estimate_klin_mixed functions","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/estimate_functions_mixed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate relationship between reps and weight using the non-linear mixed-effects regression — estimate_functions_mixed","text":"nlme object","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/estimate_functions_mixed.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Estimate relationship between reps and weight using the non-linear mixed-effects regression — estimate_functions_mixed","text":"estimate_k_mixed(): Estimate parameter k Epley's equation estimate_k_generic_1RM_mixed(): Provides model generic k parameter, well estimated 1RM. novel estimation function uses absolute weights estimate_k_1RM_mixed(): Estimate parameter k Epley's equation, well 1RM. novel estimation function uses absolute weights estimate_kmod_mixed(): Estimate parameter kmod Modified Epley's equation estimate_kmod_1RM_mixed(): Estimate parameter kmod Modified Epley's equation, well 1RM. novel estimation function uses absolute weights estimate_klin_mixed(): Estimate parameter klin Linear/Brzycki's equation estimate_klin_1RM_mixed(): Estimate parameter klin Linear/Brzycki equation, well 1RM. novel estimation function uses absolute weights","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/estimate_functions_mixed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate relationship between reps and weight using the non-linear mixed-effects regression — estimate_functions_mixed","text":"","code":"# --------------------------------------------------------- # Epley's model m1 <- estimate_k_mixed(   athlete = RTF_testing$Athlete,   perc_1RM = RTF_testing$`Real %1RM`,   reps = RTF_testing$nRM )  coef(m1) #>                    k #> Athlete A 0.01937865 #> Athlete B 0.03403605 #> Athlete C 0.06747237 #> Athlete D 0.02754989 #> Athlete E 0.04001677 #> Athlete F 0.02442086 #> Athlete G 0.03584091 #> Athlete H 0.02952992 #> Athlete I 0.02172886 #> Athlete J 0.04741195 #> Athlete K 0.05844494 #> Athlete L 0.03987504 # --------------------------------------------------------- # Generic Epley's model that also estimates 1RM m1 <- estimate_k_generic_1RM_mixed(   athlete = RTF_testing$Athlete,   weight = RTF_testing$`Real Weight`,   reps = RTF_testing$nRM )  coef(m1) #>              zeroRM #> Athlete A 115.60573 #> Athlete B  94.61033 #> Athlete C 106.24996 #> Athlete D 110.00999 #> Athlete E 106.53626 #> Athlete F  97.34956 #> Athlete G 100.87702 #> Athlete H 133.10815 #> Athlete I 119.93968 #> Athlete J  86.68878 #> Athlete K  93.39298 #> Athlete L 133.96571 # --------------------------------------------------------- # Epley's model that also estimates 1RM m1 <- estimate_k_1RM_mixed(   athlete = RTF_testing$Athlete,   weight = RTF_testing$`Real Weight`,   reps = RTF_testing$nRM ) #> Warning: Iteration 1, LME step: nlminb() did not converge (code = 1). PORT message: false convergence (8)  coef(m1) #>                    k    zeroRM #> Athlete A 0.02009568 100.90930 #> Athlete B 0.03190396  93.57043 #> Athlete C 0.05145824 112.78561 #> Athlete D 0.02931850 106.70531 #> Athlete E 0.04598450 114.11874 #> Athlete F 0.02445762  90.03293 #> Athlete G 0.03320945 100.69127 #> Athlete H 0.03081954 131.42121 #> Athlete I 0.02224391 108.13537 #> Athlete J 0.04190880  89.90771 #> Athlete K 0.05472586 101.01465 #> Athlete L 0.03821828 138.52861 # --------------------------------------------------------- # Modifed Epley's model m1 <- estimate_kmod_mixed(   athlete = RTF_testing$Athlete,   perc_1RM = RTF_testing$`Real %1RM`,   reps = RTF_testing$nRM )  coef(m1) #>                 kmod #> Athlete A 0.02061064 #> Athlete B 0.03816219 #> Athlete C 0.07955734 #> Athlete D 0.03001988 #> Athlete E 0.04559265 #> Athlete F 0.02638650 #> Athlete G 0.04044088 #> Athlete H 0.03240645 #> Athlete I 0.02325264 #> Athlete J 0.05521785 #> Athlete K 0.06915300 #> Athlete L 0.04531026 # --------------------------------------------------------- # Modified Epley's model that also estimates 1RM m1 <- estimate_kmod_1RM_mixed(   athlete = RTF_testing$Athlete,   weight = RTF_testing$`Real Weight`,   reps = RTF_testing$nRM ) #> Warning: Iteration 1, LME step: nlminb() did not converge (code = 1). PORT message: false convergence (8)  coef(m1) #>                 kmod     oneRM #> Athlete A 0.03015293 109.90580 #> Athlete B 0.03302723  91.99507 #> Athlete C 0.03135530 102.41449 #> Athlete D 0.03086471 105.47097 #> Athlete E 0.03133870 102.51784 #> Athlete F 0.03261364  94.57201 #> Athlete G 0.03213294  97.56801 #> Athlete H 0.02771254 125.11431 #> Athlete I 0.02956090 113.59524 #> Athlete J 0.03421875  84.57014 #> Athlete K 0.03325588  90.57076 #> Athlete L 0.02747218 126.61259 # --------------------------------------------------------- # Linear/Brzycki model m1 <- estimate_klin_mixed(   athlete = RTF_testing$Athlete,   perc_1RM = RTF_testing$`Real %1RM`,   reps = RTF_testing$nRM )  coef(m1) #>               klin #> Athlete A 64.11011 #> Athlete B 35.11002 #> Athlete C 16.22552 #> Athlete D 45.24156 #> Athlete E 30.05447 #> Athlete F 50.70299 #> Athlete G 33.20719 #> Athlete H 41.90200 #> Athlete I 57.35190 #> Athlete J 24.65495 #> Athlete K 19.43184 #> Athlete L 30.18074 # --------------------------------------------------------- # Linear/Brzycki model that also estimates 1RM m1 <- estimate_klin_1RM_mixed(   athlete = RTF_testing$Athlete,   weight = RTF_testing$`Real Weight`,   reps = RTF_testing$nRM ) #> Warning: Iteration 1, LME step: nlminb() did not converge (code = 1). PORT message: false convergence (8)  coef(m1) #>               klin     oneRM #> Athlete A 75.15769  96.19463 #> Athlete B 45.44975  88.91455 #> Athlete C 25.33309 107.11406 #> Athlete D 53.32681 100.49170 #> Athlete E 33.89090 106.06520 #> Athlete F 62.45929  85.33938 #> Athlete G 43.19576  95.83903 #> Athlete H 50.16078 123.79762 #> Athlete I 67.24280 103.20196 #> Athlete J 34.37575  84.98052 #> Athlete K 24.84090  95.45042 #> Athlete L 39.44232 130.14431"},{"path":"https://mladenjovanovic.github.io/STMr/reference/estimate_functions_quantile.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate relationship between reps and weight using the non-linear quantile regression — estimate_functions_quantile","title":"Estimate relationship between reps and weight using the non-linear quantile regression — estimate_functions_quantile","text":"functions provide estimate 1RM parameter values using quantile regression. default, target variable reps performed, predictors perc_1RM weight. reverse , use reverse = TRUE argument","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/estimate_functions_quantile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate relationship between reps and weight using the non-linear quantile regression — estimate_functions_quantile","text":"","code":"estimate_k_quantile(   perc_1RM,   reps,   eRIR = 0,   tau = 0.5,   reverse = FALSE,   control = quantreg::nlrq.control(maxiter = 10^4, InitialStepSize = 0),   ... )  estimate_k_generic_1RM_quantile(   weight,   reps,   eRIR = 0,   k = 0.0333,   tau = 0.5,   reverse = FALSE,   control = quantreg::nlrq.control(maxiter = 10^4, InitialStepSize = 0),   ... )  estimate_k_1RM_quantile(   weight,   reps,   eRIR = 0,   tau = 0.5,   reverse = FALSE,   control = quantreg::nlrq.control(maxiter = 10^4, InitialStepSize = 0),   ... )  estimate_kmod_quantile(   perc_1RM,   reps,   eRIR = 0,   tau = 0.5,   reverse = FALSE,   control = quantreg::nlrq.control(maxiter = 10^4, InitialStepSize = 0),   ... )  estimate_kmod_1RM_quantile(   weight,   reps,   eRIR = 0,   tau = 0.5,   reverse = FALSE,   control = quantreg::nlrq.control(maxiter = 10^4, InitialStepSize = 0),   ... )  estimate_klin_quantile(   perc_1RM,   reps,   eRIR = 0,   tau = 0.5,   reverse = FALSE,   control = quantreg::nlrq.control(maxiter = 10^4, InitialStepSize = 0),   ... )  estimate_klin_1RM_quantile(   weight,   reps,   eRIR = 0,   tau = 0.5,   reverse = FALSE,   control = quantreg::nlrq.control(maxiter = 10^4, InitialStepSize = 0),   ... )"},{"path":"https://mladenjovanovic.github.io/STMr/reference/estimate_functions_quantile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate relationship between reps and weight using the non-linear quantile regression — estimate_functions_quantile","text":"perc_1RM %1RM reps Number repetitions done eRIR Subjective estimation reps--reserve (eRIR) tau Vector quantiles estimated. Default 0.5 reverse Logical, default FALSE. reps used predictor instead target? control Control object nlrq function. Default : quantreg::nlrq.control(maxiter = 10^4, InitialStepSize = 0) ... Forwarded nlrq function weight Weight used k Value generic Epley's equation, default equal 0.0333","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/estimate_functions_quantile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate relationship between reps and weight using the non-linear quantile regression — estimate_functions_quantile","text":"nlrq object","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/estimate_functions_quantile.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Estimate relationship between reps and weight using the non-linear quantile regression — estimate_functions_quantile","text":"estimate_k_quantile(): Estimate parameter k Epley's equation estimate_k_generic_1RM_quantile(): Provides model generic k parameter, well estimated 1RM. novel estimation function uses absolute weights estimate_k_1RM_quantile(): Estimate parameter k Epley's equation, well 1RM. novel estimation function uses absolute weights estimate_kmod_quantile(): Estimate parameter kmod modified Epley's equation estimate_kmod_1RM_quantile(): Estimate parameter kmod modified Epley's equation, well 1RM. novel estimation function uses absolute weights estimate_klin_quantile(): Estimate parameter klin Linear/Brzycki equation estimate_klin_1RM_quantile(): Estimate parameter klin Linear/Brzycki equation, well 1RM. novel estimation function uses absolute weights","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/estimate_functions_quantile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate relationship between reps and weight using the non-linear quantile regression — estimate_functions_quantile","text":"","code":"# --------------------------------------------------------- # Epley's model m1 <- estimate_k_quantile(   perc_1RM = c(0.7, 0.8, 0.9),   reps = c(10, 5, 3) )  coef(m1) #>          k  #> 0.04285747  # --------------------------------------------------------- # Epley's model that also estimates 1RM m1 <- estimate_k_generic_1RM_quantile(   weight = c(70, 110, 140),   reps = c(10, 5, 3) )  coef(m1) #>     0RM  #> 128.315  # --------------------------------------------------------- # Epley's model that also estimates 1RM m1 <- estimate_k_1RM_quantile(   weight = c(70, 110, 140),   reps = c(10, 5, 3) )  coef(m1) #>           k         0RM  #>   0.2499988 245.0003205  # --------------------------------------------------------- # Modified Epley's model m1 <- estimate_kmod_quantile(   perc_1RM = c(0.7, 0.8, 0.9),   reps = c(10, 5, 3) )  coef(m1) #>       kmod  #> 0.04762194  # --------------------------------------------------------- # Modified Epley's model that also estimates 1RM m1 <- estimate_kmod_1RM_quantile(   weight = c(70, 110, 140),   reps = c(10, 5, 3) )  coef(m1) #>        kmod         1RM  #>   0.1999983 196.0002286  # --------------------------------------------------------- # Linear/Brzycki model m1 <- estimate_klin_quantile(   perc_1RM = c(0.7, 0.8, 0.9),   reps = c(10, 5, 3) )  coef(m1) #>     klin  #> 25.51547  # --------------------------------------------------------- # Linear/Brzycki model thal also estimates 1RM m1 <- estimate_klin_1RM_quantile(   weight = c(70, 110, 140),   reps = c(10, 5, 3) )  coef(m1) #> klin  1RM  #>   16  160"},{"path":"https://mladenjovanovic.github.io/STMr/reference/estimate_rolling_1RM.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the rolling profile and 1RM — estimate_rolling_1RM","title":"Estimate the rolling profile and 1RM — estimate_rolling_1RM","text":"Estimate rolling profile 1RM","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/estimate_rolling_1RM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the rolling profile and 1RM — estimate_rolling_1RM","text":"","code":"estimate_rolling_1RM(   weight,   reps,   eRIR = 0,   day_index,   window = 14,   estimate_function = estimate_k_1RM,   ... )"},{"path":"https://mladenjovanovic.github.io/STMr/reference/estimate_rolling_1RM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the rolling profile and 1RM — estimate_rolling_1RM","text":"weight Weight used reps Number repetitions done eRIR Subjective estimation reps--reserve (eRIR) day_index Day index used estimate rolling window window Width rolling window. Default 14 estimate_function Estimation function used. Default estimate_k_1RM ... Forwarded estimate_function function","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/estimate_rolling_1RM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the rolling profile and 1RM — estimate_rolling_1RM","text":"Data frame day index coefficients returned estimate_function function","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/estimate_rolling_1RM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the rolling profile and 1RM — estimate_rolling_1RM","text":"","code":"estimate_rolling_1RM(   weight = strength_training_log$weight,   reps = strength_training_log$reps,   eRIR = strength_training_log$eRIR,   day_index = strength_training_log$day,   window = 10,   estimate_function = estimate_k_1RM_quantile,   tau = 0.9 ) #> # A tibble: 15 × 3 #>    day_index      k `0RM` #>        <int>  <dbl> <dbl> #>  1        10 0.0448  109. #>  2        11 0.0451  109. #>  3        12 0.0476  111. #>  4        13 0.0417  109. #>  5        14 0.0417  109. #>  6        15 0.0400  108. #>  7        16 0.0439  111. #>  8        17 0.0437  111. #>  9        18 0.0437  111. #> 10        19 0.0427  111. #> 11        20 0.0433  111. #> 12        21 0.0396  111. #> 13        22 0.0396  111. #> 14        23 0.0378  110. #> 15        24 0.0397  112."},{"path":"https://mladenjovanovic.github.io/STMr/reference/get_perc_1RM.html","id":null,"dir":"Reference","previous_headings":"","what":"Get %1RM — get_perc_1RM","title":"Get %1RM — get_perc_1RM","text":"Function get_perc_1RM represent wrapper function","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/get_perc_1RM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get %1RM — get_perc_1RM","text":"","code":"get_perc_1RM(reps, method = \"RIR\", model = \"epley\", ...)"},{"path":"https://mladenjovanovic.github.io/STMr/reference/get_perc_1RM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get %1RM — get_perc_1RM","text":"reps Numeric vector. Number repetition performed method Character vector. Default \"RIR\". options \"DI\", \"RelInt\", \"%MR\" model Character vector. Default \"epley\". options \"modified epley\", \"linear\" ... Forwarded selected adj_perc_1RM function","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/get_perc_1RM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get %1RM — get_perc_1RM","text":"Numeric vector. Predicted %1RM","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/get_perc_1RM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get %1RM — get_perc_1RM","text":"","code":"get_perc_1RM(5) #> [1] 0.8572653  # # Use ballistic adjustment (this implies doing half the reps) get_perc_1RM(5, mfactor = 2) #> [1] 0.7501875  # Use perc MR adjustment method get_perc_1RM(5, \"%MR\", adjustment = 0.8) #> [1] 0.8277289  # Use linear model with use defined klin values get_perc_1RM(5, \"%MR\", model = \"linear\", adjustment = 0.8, klin = 36) #> [1] 0.8541667"},{"path":"https://mladenjovanovic.github.io/STMr/reference/get_reps.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Reps — get_reps","title":"Get Reps — get_reps","text":"Function get_reps represent wrapper function. function reverse version get_perc_1RM function. Use want estimate number repetitions used using known %1RM level adjustment","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/get_reps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Reps — get_reps","text":"","code":"get_reps(perc_1RM, method = \"RIR\", model = \"epley\", ...)"},{"path":"https://mladenjovanovic.github.io/STMr/reference/get_reps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Reps — get_reps","text":"perc_1RM Numeric vector. %1RM used (use 0.5 50 perc, 0.9 90 perc) method Character vector. Default \"RIR\". options \"DI\", \"RelInt\", \"%MR\" model Character vector. Default \"epley\". options \"modified epley\", \"linear\" ... Forwarded selected adj_reps function","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/get_reps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Reps — get_reps","text":"Numeric vector Predicted repetitions","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/get_reps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Reps — get_reps","text":"","code":"get_reps(0.75) #> [1] 10.01001  # # Use ballistic adjustment (this implies doing half the reps) get_reps(0.75, mfactor = 2) #> [1] 5.005005  # Use %MR adjustment method get_reps(0.75, \"%MR\", adjustment = 0.8) #> [1] 8.008008  # Use linear model with use defined klin values get_reps(0.75, \"%MR\", model = \"linear\", adjustment = 0.8, klin = 36) #> [1] 8"},{"path":"https://mladenjovanovic.github.io/STMr/reference/max_perc_1RM.html","id":null,"dir":"Reference","previous_headings":"","what":"Family of functions to estimate max %1RM — max_perc_1RM","title":"Family of functions to estimate max %1RM — max_perc_1RM","text":"Family functions estimate max %1RM","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/max_perc_1RM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Family of functions to estimate max %1RM — max_perc_1RM","text":"","code":"max_perc_1RM_epley(reps, k = 0.0333)  max_perc_1RM_modified_epley(reps, kmod = 0.0353)  max_perc_1RM_linear(reps, klin = 33)"},{"path":"https://mladenjovanovic.github.io/STMr/reference/max_perc_1RM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Family of functions to estimate max %1RM — max_perc_1RM","text":"reps Numeric vector. Number repetition performed k User defined k parameter Epley's equation. Default 0.0333 kmod User defined kmod parameter Modified Epley's equation. Default 0.0353 klin User defined klin parameter Linear equation. Default 33","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/max_perc_1RM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Family of functions to estimate max %1RM — max_perc_1RM","text":"Numeric vector. Predicted %1RM","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/max_perc_1RM.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Family of functions to estimate max %1RM — max_perc_1RM","text":"max_perc_1RM_epley(): Estimate max %1RM using Epley's equation max_perc_1RM_modified_epley(): Estimate max %1RM using Modified Epley's equation max_perc_1RM_linear(): Estimate max %1RM using Linear (Brzycki's) equation","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/max_perc_1RM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Family of functions to estimate max %1RM — max_perc_1RM","text":"","code":"# ------------------------------------------ # Epley equation max_perc_1RM_epley(1:10) #>  [1] 0.9677732 0.9375586 0.9091736 0.8824568 0.8572653 0.8334722 0.8109642 #>  [8] 0.7896399 0.7694083 0.7501875 max_perc_1RM_epley(1:10, k = 0.04) #>  [1] 0.9615385 0.9259259 0.8928571 0.8620690 0.8333333 0.8064516 0.7812500 #>  [8] 0.7575758 0.7352941 0.7142857 # ------------------------------------------ # Modified Epley equation max_perc_1RM_modified_epley(1:10) #>  [1] 1.0000000 0.9659036 0.9340557 0.9042409 0.8762706 0.8499788 0.8252187 #>  [8] 0.8018603 0.7797879 0.7588981 max_perc_1RM_modified_epley(1:10, kmod = 0.05) #>  [1] 1.0000000 0.9523810 0.9090909 0.8695652 0.8333333 0.8000000 0.7692308 #>  [8] 0.7407407 0.7142857 0.6896552 # ------------------------------------------ # Linear/Brzycki equation max_perc_1RM_linear(1:10) #>  [1] 1.0000000 0.9696970 0.9393939 0.9090909 0.8787879 0.8484848 0.8181818 #>  [8] 0.7878788 0.7575758 0.7272727 max_perc_1RM_linear(1:10, klin = 36) #>  [1] 1.0000000 0.9722222 0.9444444 0.9166667 0.8888889 0.8611111 0.8333333 #>  [8] 0.8055556 0.7777778 0.7500000"},{"path":"https://mladenjovanovic.github.io/STMr/reference/max_reps.html","id":null,"dir":"Reference","previous_headings":"","what":"Family of functions to estimate max number of repetition (nRM) — max_reps","title":"Family of functions to estimate max number of repetition (nRM) — max_reps","text":"Family functions estimate max number repetition (nRM)","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/max_reps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Family of functions to estimate max number of repetition (nRM) — max_reps","text":"","code":"max_reps_epley(perc_1RM, k = 0.0333)  max_reps_modified_epley(perc_1RM, kmod = 0.0353)  max_reps_linear(perc_1RM, klin = 33)"},{"path":"https://mladenjovanovic.github.io/STMr/reference/max_reps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Family of functions to estimate max number of repetition (nRM) — max_reps","text":"perc_1RM Numeric vector. % 1RM used (use 0.5 50 %, 0.9 90 %) k User defined k parameter Epley's equation. Default 0.0333 kmod User defined kmod parameter Modified Epley's equation. Default 0.0353 klin User defined klin parameter Linear equation. Default 33","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/max_reps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Family of functions to estimate max number of repetition (nRM) — max_reps","text":"Numeric vector. Predicted maximal number repetitions (nRM)","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/max_reps.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Family of functions to estimate max number of repetition (nRM) — max_reps","text":"max_reps_epley(): Estimate max number repetition (nRM) using Epley's equation max_reps_modified_epley(): Estimate max number repetition (nRM) using Modified Epley's equation max_reps_linear(): Estimate max number repetition (nRM) using Linear/Brzycki's equation","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/max_reps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Family of functions to estimate max number of repetition (nRM) — max_reps","text":"","code":"# ------------------------------------------ # Epley equation max_reps_epley(0.85) #> [1] 5.299417 max_reps_epley(c(0.75, 0.85), k = 0.04) #> [1] 8.333333 4.411765 # ------------------------------------------ # Modified Epley equation max_reps_modified_epley(0.85) #> [1] 5.999167 max_reps_modified_epley(c(0.75, 0.85), kmod = 0.05) #> [1] 7.666667 4.529412 # ------------------------------------------ # Linear/Brzycki's equation max_reps_linear(0.85) #> [1] 5.95 max_reps_linear(c(0.75, 0.85), klin = 36) #> [1] 10.0  6.4"},{"path":"https://mladenjovanovic.github.io/STMr/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://mladenjovanovic.github.io/STMr/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/plot.STMr_release.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting of the Release — plot.STMr_release","title":"Plotting of the Release — plot.STMr_release","text":"Function creating ggplot2 plot Release STMr_release object","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/plot.STMr_release.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting of the Release — plot.STMr_release","text":"","code":"# S3 method for STMr_release plot(x, font_size = 14, load_1RM_agg_func = max, ...)"},{"path":"https://mladenjovanovic.github.io/STMr/reference/plot.STMr_release.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting of the Release — plot.STMr_release","text":"x STMr_release object font_size Numeric. Default 14 load_1RM_agg_func Function aggregate step load_1RM multiple sets. Default max ... Forwarded geom_bar_text geom_fit_text functions. Can used se highest labels size, example, using size=5. See documentation two packages info","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/plot.STMr_release.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting of the Release — plot.STMr_release","text":"ggplot2 object","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/plot.STMr_release.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting of the Release — plot.STMr_release","text":"","code":"scheme1 <- scheme_step(vertical_planning = vertical_constant) scheme2 <- scheme_step(vertical_planning = vertical_linear) scheme3 <- scheme_step(vertical_planning = vertical_undulating)  release_df <- release(   scheme1, scheme2, scheme3,   additive_1RM_adjustment = 2.5 )  plot(release_df)"},{"path":"https://mladenjovanovic.github.io/STMr/reference/plot.STMr_scheme.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting of the Set and Reps Scheme — plot.STMr_scheme","title":"Plotting of the Set and Reps Scheme — plot.STMr_scheme","text":"Functions creating ggplot2 plot Set Reps Scheme","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/plot.STMr_scheme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting of the Set and Reps Scheme — plot.STMr_scheme","text":"","code":"# S3 method for STMr_scheme plot(x, type = \"bar\", font_size = 14, perc_str = \"%\", ...)"},{"path":"https://mladenjovanovic.github.io/STMr/reference/plot.STMr_scheme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting of the Set and Reps Scheme — plot.STMr_scheme","text":"x STMr_scheme object. See examples type Type plot. Options \"bar\" (default), \"vertical\", \"fraction\" font_size Numeric. Default 14 perc_str Percent string. Default \"%\". Use \"\" space graph ... Forwarded geom_bar_text geom_fit_text functions. Can used se highest labels size, example, using size=5. See documentation two packages info","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/plot.STMr_scheme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting of the Set and Reps Scheme — plot.STMr_scheme","text":"ggplot2 object","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/plot.STMr_scheme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting of the Set and Reps Scheme — plot.STMr_scheme","text":"","code":"scheme <- scheme_wave(   reps = c(10, 8, 6, 10, 8, 6),   # Adjusting sets to use lower %1RM (RIR Inc method used, so RIR adjusted)   adjustment = c(4, 2, 0, 6, 4, 2),   vertical_planning = vertical_linear,   vertical_planning_control = list(reps_change = c(0, -2, -4)),   progression_table = progression_RIR_increment,   progression_table_control = list(volume = \"extensive\") )  plot(scheme)  plot(scheme, type = \"vertical\")  plot(scheme, type = \"fraction\")"},{"path":"https://mladenjovanovic.github.io/STMr/reference/plot_progression_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting of the Progression Table — plot_progression_table","title":"Plotting of the Progression Table — plot_progression_table","text":"Function creating ggplot2 plot Progression Table","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/plot_progression_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting of the Progression Table — plot_progression_table","text":"","code":"plot_progression_table(   progression_table,   plot = \"%1RM\",   signif_digits = 3,   adjustment_multiplier = 1,   font_size = 14,   ... )"},{"path":"https://mladenjovanovic.github.io/STMr/reference/plot_progression_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting of the Progression Table — plot_progression_table","text":"progression_table Function creating progression table plot Character string. Options include \"%1RM\" (default) \"adjustment\" signif_digits Rounding numbers plotting. Default 3 adjustment_multiplier Factor multiply adjustment. Useful converting percentage. Default 1 font_size Numeric. Default 14 ... Forwarded generate_progression_table function","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/plot_progression_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting of the Progression Table — plot_progression_table","text":"ggplot2 object","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/plot_progression_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting of the Progression Table — plot_progression_table","text":"","code":"plot_progression_table(progression_RIR_increment, \"%1RM\", reps = 1:5)  plot_progression_table(progression_RIR_increment, \"adjustment\", reps = 1:5)   # Create progression pot by using specific reps-max table and klin value plot_progression_table(   progression_RIR,   reps = 1:5,   max_perc_1RM_func = max_perc_1RM_linear,   klin = 36 )"},{"path":"https://mladenjovanovic.github.io/STMr/reference/plot_scheme.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting of the Set and Reps Scheme — plot_scheme","title":"Plotting of the Set and Reps Scheme — plot_scheme","text":"Functions creating ggplot2 plot Set Reps Scheme","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/plot_scheme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting of the Set and Reps Scheme — plot_scheme","text":"","code":"plot_scheme(scheme, font_size = 8, perc_str = \"%\")"},{"path":"https://mladenjovanovic.github.io/STMr/reference/plot_scheme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting of the Set and Reps Scheme — plot_scheme","text":"scheme Data Frame create one package functions. See examples font_size Numeric. Default 8 perc_str Percent string. Default \"%\". Use \"\" space graph","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/plot_scheme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting of the Set and Reps Scheme — plot_scheme","text":"ggplot2 object","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/plot_scheme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting of the Set and Reps Scheme — plot_scheme","text":"","code":"scheme <- scheme_wave(   reps = c(10, 8, 6, 10, 8, 6),   # Adjusting sets to use lower %1RM (RIR Inc method used, so RIR adjusted)   adjustment = c(4, 2, 0, 6, 4, 2),   vertical_planning = vertical_linear,   vertical_planning_control = list(reps_change = c(0, -2, -4)),   progression_table = progression_RIR_increment,   progression_table_control = list(volume = \"extensive\") )  plot_scheme(scheme) #> Warning: `plot_scheme()` is deprecated as of STMr 0.1.4. Please use S3 `plot()` method instead."},{"path":"https://mladenjovanovic.github.io/STMr/reference/plot_vertical.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting of the Vertical Planning — plot_vertical","title":"Plotting of the Vertical Planning — plot_vertical","text":"Function creating ggplot2 plot Vertical Planning function","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/plot_vertical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting of the Vertical Planning — plot_vertical","text":"","code":"plot_vertical(vertical_plan, reps = c(5, 5, 5), font_size = 14, ...)"},{"path":"https://mladenjovanovic.github.io/STMr/reference/plot_vertical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting of the Vertical Planning — plot_vertical","text":"vertical_plan Vertical Plan function reps Numeric vector font_size Numeric. Default 14 ... Forwarded vertical_plan function","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/plot_vertical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting of the Vertical Planning — plot_vertical","text":"","code":"plot_vertical(vertical_block_undulating, reps = c(8, 6, 4))"},{"path":"https://mladenjovanovic.github.io/STMr/reference/plus-.STMr_scheme.html","id":null,"dir":"Reference","previous_headings":"","what":"Method for adding set and rep schemes — +.STMr_scheme","title":"Method for adding set and rep schemes — +.STMr_scheme","text":"Method adding set rep schemes","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/plus-.STMr_scheme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method for adding set and rep schemes — +.STMr_scheme","text":"","code":"# S3 method for STMr_scheme +(lhs, rhs)"},{"path":"https://mladenjovanovic.github.io/STMr/reference/plus-.STMr_scheme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method for adding set and rep schemes — +.STMr_scheme","text":"lhs STMr_scheme object rhs STMr_scheme object","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/plus-.STMr_scheme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Method for adding set and rep schemes — +.STMr_scheme","text":"STMr_scheme object","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/plus-.STMr_scheme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Method for adding set and rep schemes — +.STMr_scheme","text":"","code":"scheme1 <- scheme_wave() warmup_scheme <- scheme_perc_1RM() plot(warmup_scheme + scheme1)"},{"path":"https://mladenjovanovic.github.io/STMr/reference/progression_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Family of functions to create progression tables — generate_progression_table","title":"Family of functions to create progression tables — generate_progression_table","text":"Family functions create progression tables","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/progression_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Family of functions to create progression tables — generate_progression_table","text":"","code":"generate_progression_table(   progression_table,   type = c(\"grinding\", \"ballistic\"),   volume = c(\"intensive\", \"normal\", \"extensive\"),   reps = 1:12,   step = seq(-3, 0, 1),   ... )  progression_DI(   reps,   step = 0,   volume = \"normal\",   adjustment = 0,   type = \"grinding\",   mfactor = NULL,   step_increment = -0.025,   volume_increment = step_increment,   ... )  progression_RIR(   reps,   step = 0,   volume = \"normal\",   adjustment = 0,   type = \"grinding\",   mfactor = NULL,   step_increment = 1,   volume_increment = step_increment,   ... )  progression_RIR_increment(   reps,   step = 0,   volume = \"normal\",   adjustment = 0,   type = \"grinding\",   mfactor = NULL,   ... )  progression_perc_MR(   reps,   step = 0,   volume = \"normal\",   adjustment = 0,   type = \"grinding\",   mfactor = NULL,   step_increment = -0.1,   volume_increment = -0.2,   ... )  progression_perc_MR_variable(   reps,   step = 0,   volume = \"normal\",   adjustment = 0,   type = \"grinding\",   mfactor = NULL,   ... )  progression_perc_drop(   reps,   step = 0,   volume = \"normal\",   adjustment = 0,   type = \"grinding\",   mfactor = NULL,   ... )  progression_rel_int(   reps,   step = 0,   volume = \"normal\",   adjustment = 0,   type = \"grinding\",   mfactor = NULL,   step_increment = -0.05,   volume_increment = -0.075,   ... )"},{"path":"https://mladenjovanovic.github.io/STMr/reference/progression_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Family of functions to create progression tables — generate_progression_table","text":"progression_table Progression table function use type Character vector. Type max rep table. Options grinding (Default) ballistic. volume Character vector: 'intensive', 'normal' (Default), 'extensive' reps Numeric vector. Number repetition performed step Numeric vector. Progression step. Default 0. Use negative numbers (.e., -1, -2) ... Extra arguments forwarded adj_perc_1RM family functions Use supply different parameter value (.e., k = 0.035), model function (.e., max_perc_1RM_func = max_perc_1RM_linear) adjustment Numeric vector. Additional post adjustment applied sets. Default none (value depends method). mfactor Numeric vector. Factor adjust max rep table. Used instead type parameter, unless NULL step_increment, volume_increment Numeric vector. Used adjust specific progression methods","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/progression_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Family of functions to create progression tables — generate_progression_table","text":"List two elements: adjustment perc_1RM","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/progression_table.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Family of functions to create progression tables — generate_progression_table","text":"generate_progression_table(): Generates progression tables progression_DI(): Deducted Intensity progression table. simplest progression table simply deducts intensity progress. Adjust deducted using deduction parameter (default equal -0.025) progression_RIR(): Constant RIR Increment progression table. variant constant RIR increment across reps phases phases RIR difference extensive, normal, intensive schemes. Use step_increment  volume_increment parameters utilize needed increments progression_RIR_increment(): RIR Increment progression table (see Strength Training Manual) progression_perc_MR(): Constant %MR Step progression table. variant constant %MR increment across reps phases phases %MR difference extensive, normal, intensive schemes. Use step_increment  volume_increment parameters utilize needed increments progression_perc_MR_variable(): Variable %MR Step progression table progression_perc_drop(): Perc Drop progression table (see Strength Training Manual) progression_rel_int(): Relative Intensity progression table. Use step_increment  volume_increment parameters utilize needed increments","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/progression_table.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Family of functions to create progression tables — generate_progression_table","text":"","code":"Jovanović M. 2020. Strength Training Manual: The Agile Periodization Approach. Independently published. Jovanović M. 2020. Strength Training Manual: The Agile Periodization Approach. Independently published."},{"path":"https://mladenjovanovic.github.io/STMr/reference/progression_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Family of functions to create progression tables — generate_progression_table","text":"","code":"generate_progression_table(progression_RIR) #>          type    volume reps step adjustment  perc_1RM #> 1    grinding intensive    1   -3          3 0.8824568 #> 2   ballistic intensive    1   -3          3 0.7896399 #> 3    grinding    normal    1   -3          4 0.8572653 #> 4   ballistic    normal    1   -3          4 0.7501875 #> 5    grinding extensive    1   -3          5 0.8334722 #> 6   ballistic extensive    1   -3          5 0.7144899 #> 7    grinding intensive    2   -3          3 0.8572653 #> 8   ballistic intensive    2   -3          3 0.7501875 #> 9    grinding    normal    2   -3          4 0.8334722 #> 10  ballistic    normal    2   -3          4 0.7144899 #> 11   grinding extensive    2   -3          5 0.8109642 #> 12  ballistic extensive    2   -3          5 0.6820352 #> 13   grinding intensive    3   -3          3 0.8334722 #> 14  ballistic intensive    3   -3          3 0.7144899 #> 15   grinding    normal    3   -3          4 0.8109642 #> 16  ballistic    normal    3   -3          4 0.6820352 #> 17   grinding extensive    3   -3          5 0.7896399 #> 18  ballistic extensive    3   -3          5 0.6524008 #> 19   grinding intensive    4   -3          3 0.8109642 #> 20  ballistic intensive    4   -3          3 0.6820352 #> 21   grinding    normal    4   -3          4 0.7896399 #> 22  ballistic    normal    4   -3          4 0.6524008 #> 23   grinding extensive    4   -3          5 0.7694083 #> 24  ballistic extensive    4   -3          5 0.6252345 #> 25   grinding intensive    5   -3          3 0.7896399 #> 26  ballistic intensive    5   -3          3 0.6524008 #> 27   grinding    normal    5   -3          4 0.7694083 #> 28  ballistic    normal    5   -3          4 0.6252345 #> 29   grinding extensive    5   -3          5 0.7501875 #> 30  ballistic extensive    5   -3          5 0.6002401 #> 31   grinding intensive    6   -3          3 0.7694083 #> 32  ballistic intensive    6   -3          3 0.6252345 #> 33   grinding    normal    6   -3          4 0.7501875 #> 34  ballistic    normal    6   -3          4 0.6002401 #> 35   grinding extensive    6   -3          5 0.7319037 #> 36  ballistic extensive    6   -3          5 0.5771673 #> 37   grinding intensive    7   -3          3 0.7501875 #> 38  ballistic intensive    7   -3          3 0.6002401 #> 39   grinding    normal    7   -3          4 0.7319037 #> 40  ballistic    normal    7   -3          4 0.5771673 #> 41   grinding extensive    7   -3          5 0.7144899 #> 42  ballistic extensive    7   -3          5 0.5558026 #> 43   grinding intensive    8   -3          3 0.7319037 #> 44  ballistic intensive    8   -3          3 0.5771673 #> 45   grinding    normal    8   -3          4 0.7144899 #> 46  ballistic    normal    8   -3          4 0.5558026 #> 47   grinding extensive    8   -3          5 0.6978854 #> 48  ballistic extensive    8   -3          5 0.5359631 #> 49   grinding intensive    9   -3          3 0.7144899 #> 50  ballistic intensive    9   -3          3 0.5558026 #> 51   grinding    normal    9   -3          4 0.6978854 #> 52  ballistic    normal    9   -3          4 0.5359631 #> 53   grinding extensive    9   -3          5 0.6820352 #> 54  ballistic extensive    9   -3          5 0.5174912 #> 55   grinding intensive   10   -3          3 0.6978854 #> 56  ballistic intensive   10   -3          3 0.5359631 #> 57   grinding    normal   10   -3          4 0.6820352 #> 58  ballistic    normal   10   -3          4 0.5174912 #> 59   grinding extensive   10   -3          5 0.6668890 #> 60  ballistic extensive   10   -3          5 0.5002501 #> 61   grinding intensive   11   -3          3 0.6820352 #> 62  ballistic intensive   11   -3          3 0.5174912 #> 63   grinding    normal   11   -3          4 0.6668890 #> 64  ballistic    normal   11   -3          4 0.5002501 #> 65   grinding extensive   11   -3          5 0.6524008 #> 66  ballistic extensive   11   -3          5 0.4841208 #> 67   grinding intensive   12   -3          3 0.6668890 #> 68  ballistic intensive   12   -3          3 0.5002501 #> 69   grinding    normal   12   -3          4 0.6524008 #> 70  ballistic    normal   12   -3          4 0.4841208 #> 71   grinding extensive   12   -3          5 0.6385288 #> 72  ballistic extensive   12   -3          5 0.4689992 #> 73   grinding intensive    1   -2          2 0.9091736 #> 74  ballistic intensive    1   -2          2 0.8334722 #> 75   grinding    normal    1   -2          3 0.8824568 #> 76  ballistic    normal    1   -2          3 0.7896399 #> 77   grinding extensive    1   -2          4 0.8572653 #> 78  ballistic extensive    1   -2          4 0.7501875 #> 79   grinding intensive    2   -2          2 0.8824568 #> 80  ballistic intensive    2   -2          2 0.7896399 #> 81   grinding    normal    2   -2          3 0.8572653 #> 82  ballistic    normal    2   -2          3 0.7501875 #> 83   grinding extensive    2   -2          4 0.8334722 #> 84  ballistic extensive    2   -2          4 0.7144899 #> 85   grinding intensive    3   -2          2 0.8572653 #> 86  ballistic intensive    3   -2          2 0.7501875 #> 87   grinding    normal    3   -2          3 0.8334722 #> 88  ballistic    normal    3   -2          3 0.7144899 #> 89   grinding extensive    3   -2          4 0.8109642 #> 90  ballistic extensive    3   -2          4 0.6820352 #> 91   grinding intensive    4   -2          2 0.8334722 #> 92  ballistic intensive    4   -2          2 0.7144899 #> 93   grinding    normal    4   -2          3 0.8109642 #> 94  ballistic    normal    4   -2          3 0.6820352 #> 95   grinding extensive    4   -2          4 0.7896399 #> 96  ballistic extensive    4   -2          4 0.6524008 #> 97   grinding intensive    5   -2          2 0.8109642 #> 98  ballistic intensive    5   -2          2 0.6820352 #> 99   grinding    normal    5   -2          3 0.7896399 #> 100 ballistic    normal    5   -2          3 0.6524008 #> 101  grinding extensive    5   -2          4 0.7694083 #> 102 ballistic extensive    5   -2          4 0.6252345 #> 103  grinding intensive    6   -2          2 0.7896399 #> 104 ballistic intensive    6   -2          2 0.6524008 #> 105  grinding    normal    6   -2          3 0.7694083 #> 106 ballistic    normal    6   -2          3 0.6252345 #> 107  grinding extensive    6   -2          4 0.7501875 #> 108 ballistic extensive    6   -2          4 0.6002401 #> 109  grinding intensive    7   -2          2 0.7694083 #> 110 ballistic intensive    7   -2          2 0.6252345 #> 111  grinding    normal    7   -2          3 0.7501875 #> 112 ballistic    normal    7   -2          3 0.6002401 #> 113  grinding extensive    7   -2          4 0.7319037 #> 114 ballistic extensive    7   -2          4 0.5771673 #> 115  grinding intensive    8   -2          2 0.7501875 #> 116 ballistic intensive    8   -2          2 0.6002401 #> 117  grinding    normal    8   -2          3 0.7319037 #> 118 ballistic    normal    8   -2          3 0.5771673 #> 119  grinding extensive    8   -2          4 0.7144899 #> 120 ballistic extensive    8   -2          4 0.5558026 #> 121  grinding intensive    9   -2          2 0.7319037 #> 122 ballistic intensive    9   -2          2 0.5771673 #> 123  grinding    normal    9   -2          3 0.7144899 #> 124 ballistic    normal    9   -2          3 0.5558026 #> 125  grinding extensive    9   -2          4 0.6978854 #> 126 ballistic extensive    9   -2          4 0.5359631 #> 127  grinding intensive   10   -2          2 0.7144899 #> 128 ballistic intensive   10   -2          2 0.5558026 #> 129  grinding    normal   10   -2          3 0.6978854 #> 130 ballistic    normal   10   -2          3 0.5359631 #> 131  grinding extensive   10   -2          4 0.6820352 #> 132 ballistic extensive   10   -2          4 0.5174912 #> 133  grinding intensive   11   -2          2 0.6978854 #> 134 ballistic intensive   11   -2          2 0.5359631 #> 135  grinding    normal   11   -2          3 0.6820352 #> 136 ballistic    normal   11   -2          3 0.5174912 #> 137  grinding extensive   11   -2          4 0.6668890 #> 138 ballistic extensive   11   -2          4 0.5002501 #> 139  grinding intensive   12   -2          2 0.6820352 #> 140 ballistic intensive   12   -2          2 0.5174912 #> 141  grinding    normal   12   -2          3 0.6668890 #> 142 ballistic    normal   12   -2          3 0.5002501 #> 143  grinding extensive   12   -2          4 0.6524008 #> 144 ballistic extensive   12   -2          4 0.4841208 #> 145  grinding intensive    1   -1          1 0.9375586 #> 146 ballistic intensive    1   -1          1 0.8824568 #> 147  grinding    normal    1   -1          2 0.9091736 #> 148 ballistic    normal    1   -1          2 0.8334722 #> 149  grinding extensive    1   -1          3 0.8824568 #> 150 ballistic extensive    1   -1          3 0.7896399 #> 151  grinding intensive    2   -1          1 0.9091736 #> 152 ballistic intensive    2   -1          1 0.8334722 #> 153  grinding    normal    2   -1          2 0.8824568 #> 154 ballistic    normal    2   -1          2 0.7896399 #> 155  grinding extensive    2   -1          3 0.8572653 #> 156 ballistic extensive    2   -1          3 0.7501875 #> 157  grinding intensive    3   -1          1 0.8824568 #> 158 ballistic intensive    3   -1          1 0.7896399 #> 159  grinding    normal    3   -1          2 0.8572653 #> 160 ballistic    normal    3   -1          2 0.7501875 #> 161  grinding extensive    3   -1          3 0.8334722 #> 162 ballistic extensive    3   -1          3 0.7144899 #> 163  grinding intensive    4   -1          1 0.8572653 #> 164 ballistic intensive    4   -1          1 0.7501875 #> 165  grinding    normal    4   -1          2 0.8334722 #> 166 ballistic    normal    4   -1          2 0.7144899 #> 167  grinding extensive    4   -1          3 0.8109642 #> 168 ballistic extensive    4   -1          3 0.6820352 #> 169  grinding intensive    5   -1          1 0.8334722 #> 170 ballistic intensive    5   -1          1 0.7144899 #> 171  grinding    normal    5   -1          2 0.8109642 #> 172 ballistic    normal    5   -1          2 0.6820352 #> 173  grinding extensive    5   -1          3 0.7896399 #> 174 ballistic extensive    5   -1          3 0.6524008 #> 175  grinding intensive    6   -1          1 0.8109642 #> 176 ballistic intensive    6   -1          1 0.6820352 #> 177  grinding    normal    6   -1          2 0.7896399 #> 178 ballistic    normal    6   -1          2 0.6524008 #> 179  grinding extensive    6   -1          3 0.7694083 #> 180 ballistic extensive    6   -1          3 0.6252345 #> 181  grinding intensive    7   -1          1 0.7896399 #> 182 ballistic intensive    7   -1          1 0.6524008 #> 183  grinding    normal    7   -1          2 0.7694083 #> 184 ballistic    normal    7   -1          2 0.6252345 #> 185  grinding extensive    7   -1          3 0.7501875 #> 186 ballistic extensive    7   -1          3 0.6002401 #> 187  grinding intensive    8   -1          1 0.7694083 #> 188 ballistic intensive    8   -1          1 0.6252345 #> 189  grinding    normal    8   -1          2 0.7501875 #> 190 ballistic    normal    8   -1          2 0.6002401 #> 191  grinding extensive    8   -1          3 0.7319037 #> 192 ballistic extensive    8   -1          3 0.5771673 #> 193  grinding intensive    9   -1          1 0.7501875 #> 194 ballistic intensive    9   -1          1 0.6002401 #> 195  grinding    normal    9   -1          2 0.7319037 #> 196 ballistic    normal    9   -1          2 0.5771673 #> 197  grinding extensive    9   -1          3 0.7144899 #> 198 ballistic extensive    9   -1          3 0.5558026 #> 199  grinding intensive   10   -1          1 0.7319037 #> 200 ballistic intensive   10   -1          1 0.5771673 #> 201  grinding    normal   10   -1          2 0.7144899 #> 202 ballistic    normal   10   -1          2 0.5558026 #> 203  grinding extensive   10   -1          3 0.6978854 #> 204 ballistic extensive   10   -1          3 0.5359631 #> 205  grinding intensive   11   -1          1 0.7144899 #> 206 ballistic intensive   11   -1          1 0.5558026 #> 207  grinding    normal   11   -1          2 0.6978854 #> 208 ballistic    normal   11   -1          2 0.5359631 #> 209  grinding extensive   11   -1          3 0.6820352 #> 210 ballistic extensive   11   -1          3 0.5174912 #> 211  grinding intensive   12   -1          1 0.6978854 #> 212 ballistic intensive   12   -1          1 0.5359631 #> 213  grinding    normal   12   -1          2 0.6820352 #> 214 ballistic    normal   12   -1          2 0.5174912 #> 215  grinding extensive   12   -1          3 0.6668890 #> 216 ballistic extensive   12   -1          3 0.5002501 #> 217  grinding intensive    1    0          0 0.9677732 #> 218 ballistic intensive    1    0          0 0.9375586 #> 219  grinding    normal    1    0          1 0.9375586 #> 220 ballistic    normal    1    0          1 0.8824568 #> 221  grinding extensive    1    0          2 0.9091736 #> 222 ballistic extensive    1    0          2 0.8334722 #> 223  grinding intensive    2    0          0 0.9375586 #> 224 ballistic intensive    2    0          0 0.8824568 #> 225  grinding    normal    2    0          1 0.9091736 #> 226 ballistic    normal    2    0          1 0.8334722 #> 227  grinding extensive    2    0          2 0.8824568 #> 228 ballistic extensive    2    0          2 0.7896399 #> 229  grinding intensive    3    0          0 0.9091736 #> 230 ballistic intensive    3    0          0 0.8334722 #> 231  grinding    normal    3    0          1 0.8824568 #> 232 ballistic    normal    3    0          1 0.7896399 #> 233  grinding extensive    3    0          2 0.8572653 #> 234 ballistic extensive    3    0          2 0.7501875 #> 235  grinding intensive    4    0          0 0.8824568 #> 236 ballistic intensive    4    0          0 0.7896399 #> 237  grinding    normal    4    0          1 0.8572653 #> 238 ballistic    normal    4    0          1 0.7501875 #> 239  grinding extensive    4    0          2 0.8334722 #> 240 ballistic extensive    4    0          2 0.7144899 #> 241  grinding intensive    5    0          0 0.8572653 #> 242 ballistic intensive    5    0          0 0.7501875 #> 243  grinding    normal    5    0          1 0.8334722 #> 244 ballistic    normal    5    0          1 0.7144899 #> 245  grinding extensive    5    0          2 0.8109642 #> 246 ballistic extensive    5    0          2 0.6820352 #> 247  grinding intensive    6    0          0 0.8334722 #> 248 ballistic intensive    6    0          0 0.7144899 #> 249  grinding    normal    6    0          1 0.8109642 #> 250 ballistic    normal    6    0          1 0.6820352 #> 251  grinding extensive    6    0          2 0.7896399 #> 252 ballistic extensive    6    0          2 0.6524008 #> 253  grinding intensive    7    0          0 0.8109642 #> 254 ballistic intensive    7    0          0 0.6820352 #> 255  grinding    normal    7    0          1 0.7896399 #> 256 ballistic    normal    7    0          1 0.6524008 #> 257  grinding extensive    7    0          2 0.7694083 #> 258 ballistic extensive    7    0          2 0.6252345 #> 259  grinding intensive    8    0          0 0.7896399 #> 260 ballistic intensive    8    0          0 0.6524008 #> 261  grinding    normal    8    0          1 0.7694083 #> 262 ballistic    normal    8    0          1 0.6252345 #> 263  grinding extensive    8    0          2 0.7501875 #> 264 ballistic extensive    8    0          2 0.6002401 #> 265  grinding intensive    9    0          0 0.7694083 #> 266 ballistic intensive    9    0          0 0.6252345 #> 267  grinding    normal    9    0          1 0.7501875 #> 268 ballistic    normal    9    0          1 0.6002401 #> 269  grinding extensive    9    0          2 0.7319037 #> 270 ballistic extensive    9    0          2 0.5771673 #> 271  grinding intensive   10    0          0 0.7501875 #> 272 ballistic intensive   10    0          0 0.6002401 #> 273  grinding    normal   10    0          1 0.7319037 #> 274 ballistic    normal   10    0          1 0.5771673 #> 275  grinding extensive   10    0          2 0.7144899 #> 276 ballistic extensive   10    0          2 0.5558026 #> 277  grinding intensive   11    0          0 0.7319037 #> 278 ballistic intensive   11    0          0 0.5771673 #> 279  grinding    normal   11    0          1 0.7144899 #> 280 ballistic    normal   11    0          1 0.5558026 #> 281  grinding extensive   11    0          2 0.6978854 #> 282 ballistic extensive   11    0          2 0.5359631 #> 283  grinding intensive   12    0          0 0.7144899 #> 284 ballistic intensive   12    0          0 0.5558026 #> 285  grinding    normal   12    0          1 0.6978854 #> 286 ballistic    normal   12    0          1 0.5359631 #> 287  grinding extensive   12    0          2 0.6820352 #> 288 ballistic extensive   12    0          2 0.5174912  generate_progression_table(   progression_RIR,   type = \"grinding\",   volume = \"normal\",   step_increment = 2 ) #>        type volume reps step adjustment  perc_1RM #> 1  grinding normal    1   -3          8 0.7694083 #> 2  grinding normal    2   -3          8 0.7501875 #> 3  grinding normal    3   -3          8 0.7319037 #> 4  grinding normal    4   -3          8 0.7144899 #> 5  grinding normal    5   -3          8 0.6978854 #> 6  grinding normal    6   -3          8 0.6820352 #> 7  grinding normal    7   -3          8 0.6668890 #> 8  grinding normal    8   -3          8 0.6524008 #> 9  grinding normal    9   -3          8 0.6385288 #> 10 grinding normal   10   -3          8 0.6252345 #> 11 grinding normal   11   -3          8 0.6124824 #> 12 grinding normal   12   -3          8 0.6002401 #> 13 grinding normal    1   -2          6 0.8109642 #> 14 grinding normal    2   -2          6 0.7896399 #> 15 grinding normal    3   -2          6 0.7694083 #> 16 grinding normal    4   -2          6 0.7501875 #> 17 grinding normal    5   -2          6 0.7319037 #> 18 grinding normal    6   -2          6 0.7144899 #> 19 grinding normal    7   -2          6 0.6978854 #> 20 grinding normal    8   -2          6 0.6820352 #> 21 grinding normal    9   -2          6 0.6668890 #> 22 grinding normal   10   -2          6 0.6524008 #> 23 grinding normal   11   -2          6 0.6385288 #> 24 grinding normal   12   -2          6 0.6252345 #> 25 grinding normal    1   -1          4 0.8572653 #> 26 grinding normal    2   -1          4 0.8334722 #> 27 grinding normal    3   -1          4 0.8109642 #> 28 grinding normal    4   -1          4 0.7896399 #> 29 grinding normal    5   -1          4 0.7694083 #> 30 grinding normal    6   -1          4 0.7501875 #> 31 grinding normal    7   -1          4 0.7319037 #> 32 grinding normal    8   -1          4 0.7144899 #> 33 grinding normal    9   -1          4 0.6978854 #> 34 grinding normal   10   -1          4 0.6820352 #> 35 grinding normal   11   -1          4 0.6668890 #> 36 grinding normal   12   -1          4 0.6524008 #> 37 grinding normal    1    0          2 0.9091736 #> 38 grinding normal    2    0          2 0.8824568 #> 39 grinding normal    3    0          2 0.8572653 #> 40 grinding normal    4    0          2 0.8334722 #> 41 grinding normal    5    0          2 0.8109642 #> 42 grinding normal    6    0          2 0.7896399 #> 43 grinding normal    7    0          2 0.7694083 #> 44 grinding normal    8    0          2 0.7501875 #> 45 grinding normal    9    0          2 0.7319037 #> 46 grinding normal   10    0          2 0.7144899 #> 47 grinding normal   11    0          2 0.6978854 #> 48 grinding normal   12    0          2 0.6820352  # Create progression table using specific reps-max table and k value generate_progression_table(   progression_RIR,   max_perc_1RM_func = max_perc_1RM_modified_epley,   kmod = 0.0388 ) #>          type    volume reps step adjustment  perc_1RM #> 1    grinding intensive    1   -3          3 0.8957363 #> 2   ballistic intensive    1   -3          3 0.7864108 #> 3    grinding    normal    1   -3          4 0.8656510 #> 4   ballistic    normal    1   -3          4 0.7411800 #> 5    grinding extensive    1   -3          5 0.8375209 #> 6   ballistic extensive    1   -3          5 0.7008691 #> 7    grinding intensive    2   -3          3 0.8656510 #> 8   ballistic intensive    2   -3          3 0.7411800 #> 9    grinding    normal    2   -3          4 0.8375209 #> 10  ballistic    normal    2   -3          4 0.7008691 #> 11   grinding extensive    2   -3          5 0.8111616 #> 12  ballistic extensive    2   -3          5 0.6647168 #> 13   grinding intensive    3   -3          3 0.8375209 #> 14  ballistic intensive    3   -3          3 0.7008691 #> 15   grinding    normal    3   -3          4 0.8111616 #> 16  ballistic    normal    3   -3          4 0.6647168 #> 17   grinding extensive    3   -3          5 0.7864108 #> 18  ballistic extensive    3   -3          5 0.6321113 #> 19   grinding intensive    4   -3          3 0.8111616 #> 20  ballistic intensive    4   -3          3 0.6647168 #> 21   grinding    normal    4   -3          4 0.7864108 #> 22  ballistic    normal    4   -3          4 0.6321113 #> 23   grinding extensive    4   -3          5 0.7631258 #> 24  ballistic extensive    4   -3          5 0.6025548 #> 25   grinding intensive    5   -3          3 0.7864108 #> 26  ballistic intensive    5   -3          3 0.6321113 #> 27   grinding    normal    5   -3          4 0.7631258 #> 28  ballistic    normal    5   -3          4 0.6025548 #> 29   grinding extensive    5   -3          5 0.7411800 #> 30  ballistic extensive    5   -3          5 0.5756390 #> 31   grinding intensive    6   -3          3 0.7631258 #> 32  ballistic intensive    6   -3          3 0.6025548 #> 33   grinding    normal    6   -3          4 0.7411800 #> 34  ballistic    normal    6   -3          4 0.5756390 #> 35   grinding extensive    6   -3          5 0.7204611 #> 36  ballistic extensive    6   -3          5 0.5510249 #> 37   grinding intensive    7   -3          3 0.7411800 #> 38  ballistic intensive    7   -3          3 0.5756390 #> 39   grinding    normal    7   -3          4 0.7204611 #> 40  ballistic    normal    7   -3          4 0.5510249 #> 41   grinding extensive    7   -3          5 0.7008691 #> 42  ballistic extensive    7   -3          5 0.5284295 #> 43   grinding intensive    8   -3          3 0.7204611 #> 44  ballistic intensive    8   -3          3 0.5510249 #> 45   grinding    normal    8   -3          4 0.7008691 #> 46  ballistic    normal    8   -3          4 0.5284295 #> 47   grinding extensive    8   -3          5 0.6823144 #> 48  ballistic extensive    8   -3          5 0.5076142 #> 49   grinding intensive    9   -3          3 0.7008691 #> 50  ballistic intensive    9   -3          3 0.5284295 #> 51   grinding    normal    9   -3          4 0.6823144 #> 52  ballistic    normal    9   -3          4 0.5076142 #> 53   grinding extensive    9   -3          5 0.6647168 #> 54  ballistic extensive    9   -3          5 0.4883766 #> 55   grinding intensive   10   -3          3 0.6823144 #> 56  ballistic intensive   10   -3          3 0.5076142 #> 57   grinding    normal   10   -3          4 0.6647168 #> 58  ballistic    normal   10   -3          4 0.4883766 #> 59   grinding extensive   10   -3          5 0.6480041 #> 60  ballistic extensive   10   -3          5 0.4705439 #> 61   grinding intensive   11   -3          3 0.6647168 #> 62  ballistic intensive   11   -3          3 0.4883766 #> 63   grinding    normal   11   -3          4 0.6480041 #> 64  ballistic    normal   11   -3          4 0.4705439 #> 65   grinding extensive   11   -3          5 0.6321113 #> 66  ballistic extensive   11   -3          5 0.4539677 #> 67   grinding intensive   12   -3          3 0.6480041 #> 68  ballistic intensive   12   -3          3 0.4705439 #> 69   grinding    normal   12   -3          4 0.6321113 #> 70  ballistic    normal   12   -3          4 0.4539677 #> 71   grinding extensive   12   -3          5 0.6169793 #> 72  ballistic extensive   12   -3          5 0.4385196 #> 73   grinding intensive    1   -2          2 0.9279881 #> 74  ballistic intensive    1   -2          2 0.8375209 #> 75   grinding    normal    1   -2          3 0.8957363 #> 76  ballistic    normal    1   -2          3 0.7864108 #> 77   grinding extensive    1   -2          4 0.8656510 #> 78  ballistic extensive    1   -2          4 0.7411800 #> 79   grinding intensive    2   -2          2 0.8957363 #> 80  ballistic intensive    2   -2          2 0.7864108 #> 81   grinding    normal    2   -2          3 0.8656510 #> 82  ballistic    normal    2   -2          3 0.7411800 #> 83   grinding extensive    2   -2          4 0.8375209 #> 84  ballistic extensive    2   -2          4 0.7008691 #> 85   grinding intensive    3   -2          2 0.8656510 #> 86  ballistic intensive    3   -2          2 0.7411800 #> 87   grinding    normal    3   -2          3 0.8375209 #> 88  ballistic    normal    3   -2          3 0.7008691 #> 89   grinding extensive    3   -2          4 0.8111616 #> 90  ballistic extensive    3   -2          4 0.6647168 #> 91   grinding intensive    4   -2          2 0.8375209 #> 92  ballistic intensive    4   -2          2 0.7008691 #> 93   grinding    normal    4   -2          3 0.8111616 #> 94  ballistic    normal    4   -2          3 0.6647168 #> 95   grinding extensive    4   -2          4 0.7864108 #> 96  ballistic extensive    4   -2          4 0.6321113 #> 97   grinding intensive    5   -2          2 0.8111616 #> 98  ballistic intensive    5   -2          2 0.6647168 #> 99   grinding    normal    5   -2          3 0.7864108 #> 100 ballistic    normal    5   -2          3 0.6321113 #> 101  grinding extensive    5   -2          4 0.7631258 #> 102 ballistic extensive    5   -2          4 0.6025548 #> 103  grinding intensive    6   -2          2 0.7864108 #> 104 ballistic intensive    6   -2          2 0.6321113 #> 105  grinding    normal    6   -2          3 0.7631258 #> 106 ballistic    normal    6   -2          3 0.6025548 #> 107  grinding extensive    6   -2          4 0.7411800 #> 108 ballistic extensive    6   -2          4 0.5756390 #> 109  grinding intensive    7   -2          2 0.7631258 #> 110 ballistic intensive    7   -2          2 0.6025548 #> 111  grinding    normal    7   -2          3 0.7411800 #> 112 ballistic    normal    7   -2          3 0.5756390 #> 113  grinding extensive    7   -2          4 0.7204611 #> 114 ballistic extensive    7   -2          4 0.5510249 #> 115  grinding intensive    8   -2          2 0.7411800 #> 116 ballistic intensive    8   -2          2 0.5756390 #> 117  grinding    normal    8   -2          3 0.7204611 #> 118 ballistic    normal    8   -2          3 0.5510249 #> 119  grinding extensive    8   -2          4 0.7008691 #> 120 ballistic extensive    8   -2          4 0.5284295 #> 121  grinding intensive    9   -2          2 0.7204611 #> 122 ballistic intensive    9   -2          2 0.5510249 #> 123  grinding    normal    9   -2          3 0.7008691 #> 124 ballistic    normal    9   -2          3 0.5284295 #> 125  grinding extensive    9   -2          4 0.6823144 #> 126 ballistic extensive    9   -2          4 0.5076142 #> 127  grinding intensive   10   -2          2 0.7008691 #> 128 ballistic intensive   10   -2          2 0.5284295 #> 129  grinding    normal   10   -2          3 0.6823144 #> 130 ballistic    normal   10   -2          3 0.5076142 #> 131  grinding extensive   10   -2          4 0.6647168 #> 132 ballistic extensive   10   -2          4 0.4883766 #> 133  grinding intensive   11   -2          2 0.6823144 #> 134 ballistic intensive   11   -2          2 0.5076142 #> 135  grinding    normal   11   -2          3 0.6647168 #> 136 ballistic    normal   11   -2          3 0.4883766 #> 137  grinding extensive   11   -2          4 0.6480041 #> 138 ballistic extensive   11   -2          4 0.4705439 #> 139  grinding intensive   12   -2          2 0.6647168 #> 140 ballistic intensive   12   -2          2 0.4883766 #> 141  grinding    normal   12   -2          3 0.6480041 #> 142 ballistic    normal   12   -2          3 0.4705439 #> 143  grinding extensive   12   -2          4 0.6321113 #> 144 ballistic extensive   12   -2          4 0.4539677 #> 145  grinding intensive    1   -1          1 0.9626492 #> 146 ballistic intensive    1   -1          1 0.8957363 #> 147  grinding    normal    1   -1          2 0.9279881 #> 148 ballistic    normal    1   -1          2 0.8375209 #> 149  grinding extensive    1   -1          3 0.8957363 #> 150 ballistic extensive    1   -1          3 0.7864108 #> 151  grinding intensive    2   -1          1 0.9279881 #> 152 ballistic intensive    2   -1          1 0.8375209 #> 153  grinding    normal    2   -1          2 0.8957363 #> 154 ballistic    normal    2   -1          2 0.7864108 #> 155  grinding extensive    2   -1          3 0.8656510 #> 156 ballistic extensive    2   -1          3 0.7411800 #> 157  grinding intensive    3   -1          1 0.8957363 #> 158 ballistic intensive    3   -1          1 0.7864108 #> 159  grinding    normal    3   -1          2 0.8656510 #> 160 ballistic    normal    3   -1          2 0.7411800 #> 161  grinding extensive    3   -1          3 0.8375209 #> 162 ballistic extensive    3   -1          3 0.7008691 #> 163  grinding intensive    4   -1          1 0.8656510 #> 164 ballistic intensive    4   -1          1 0.7411800 #> 165  grinding    normal    4   -1          2 0.8375209 #> 166 ballistic    normal    4   -1          2 0.7008691 #> 167  grinding extensive    4   -1          3 0.8111616 #> 168 ballistic extensive    4   -1          3 0.6647168 #> 169  grinding intensive    5   -1          1 0.8375209 #> 170 ballistic intensive    5   -1          1 0.7008691 #> 171  grinding    normal    5   -1          2 0.8111616 #> 172 ballistic    normal    5   -1          2 0.6647168 #> 173  grinding extensive    5   -1          3 0.7864108 #> 174 ballistic extensive    5   -1          3 0.6321113 #> 175  grinding intensive    6   -1          1 0.8111616 #> 176 ballistic intensive    6   -1          1 0.6647168 #> 177  grinding    normal    6   -1          2 0.7864108 #> 178 ballistic    normal    6   -1          2 0.6321113 #> 179  grinding extensive    6   -1          3 0.7631258 #> 180 ballistic extensive    6   -1          3 0.6025548 #> 181  grinding intensive    7   -1          1 0.7864108 #> 182 ballistic intensive    7   -1          1 0.6321113 #> 183  grinding    normal    7   -1          2 0.7631258 #> 184 ballistic    normal    7   -1          2 0.6025548 #> 185  grinding extensive    7   -1          3 0.7411800 #> 186 ballistic extensive    7   -1          3 0.5756390 #> 187  grinding intensive    8   -1          1 0.7631258 #> 188 ballistic intensive    8   -1          1 0.6025548 #> 189  grinding    normal    8   -1          2 0.7411800 #> 190 ballistic    normal    8   -1          2 0.5756390 #> 191  grinding extensive    8   -1          3 0.7204611 #> 192 ballistic extensive    8   -1          3 0.5510249 #> 193  grinding intensive    9   -1          1 0.7411800 #> 194 ballistic intensive    9   -1          1 0.5756390 #> 195  grinding    normal    9   -1          2 0.7204611 #> 196 ballistic    normal    9   -1          2 0.5510249 #> 197  grinding extensive    9   -1          3 0.7008691 #> 198 ballistic extensive    9   -1          3 0.5284295 #> 199  grinding intensive   10   -1          1 0.7204611 #> 200 ballistic intensive   10   -1          1 0.5510249 #> 201  grinding    normal   10   -1          2 0.7008691 #> 202 ballistic    normal   10   -1          2 0.5284295 #> 203  grinding extensive   10   -1          3 0.6823144 #> 204 ballistic extensive   10   -1          3 0.5076142 #> 205  grinding intensive   11   -1          1 0.7008691 #> 206 ballistic intensive   11   -1          1 0.5284295 #> 207  grinding    normal   11   -1          2 0.6823144 #> 208 ballistic    normal   11   -1          2 0.5076142 #> 209  grinding extensive   11   -1          3 0.6647168 #> 210 ballistic extensive   11   -1          3 0.4883766 #> 211  grinding intensive   12   -1          1 0.6823144 #> 212 ballistic intensive   12   -1          1 0.5076142 #> 213  grinding    normal   12   -1          2 0.6647168 #> 214 ballistic    normal   12   -1          2 0.4883766 #> 215  grinding extensive   12   -1          3 0.6480041 #> 216 ballistic extensive   12   -1          3 0.4705439 #> 217  grinding intensive    1    0          0 1.0000000 #> 218 ballistic intensive    1    0          0 0.9626492 #> 219  grinding    normal    1    0          1 0.9626492 #> 220 ballistic    normal    1    0          1 0.8957363 #> 221  grinding extensive    1    0          2 0.9279881 #> 222 ballistic extensive    1    0          2 0.8375209 #> 223  grinding intensive    2    0          0 0.9626492 #> 224 ballistic intensive    2    0          0 0.8957363 #> 225  grinding    normal    2    0          1 0.9279881 #> 226 ballistic    normal    2    0          1 0.8375209 #> 227  grinding extensive    2    0          2 0.8957363 #> 228 ballistic extensive    2    0          2 0.7864108 #> 229  grinding intensive    3    0          0 0.9279881 #> 230 ballistic intensive    3    0          0 0.8375209 #> 231  grinding    normal    3    0          1 0.8957363 #> 232 ballistic    normal    3    0          1 0.7864108 #> 233  grinding extensive    3    0          2 0.8656510 #> 234 ballistic extensive    3    0          2 0.7411800 #> 235  grinding intensive    4    0          0 0.8957363 #> 236 ballistic intensive    4    0          0 0.7864108 #> 237  grinding    normal    4    0          1 0.8656510 #> 238 ballistic    normal    4    0          1 0.7411800 #> 239  grinding extensive    4    0          2 0.8375209 #> 240 ballistic extensive    4    0          2 0.7008691 #> 241  grinding intensive    5    0          0 0.8656510 #> 242 ballistic intensive    5    0          0 0.7411800 #> 243  grinding    normal    5    0          1 0.8375209 #> 244 ballistic    normal    5    0          1 0.7008691 #> 245  grinding extensive    5    0          2 0.8111616 #> 246 ballistic extensive    5    0          2 0.6647168 #> 247  grinding intensive    6    0          0 0.8375209 #> 248 ballistic intensive    6    0          0 0.7008691 #> 249  grinding    normal    6    0          1 0.8111616 #> 250 ballistic    normal    6    0          1 0.6647168 #> 251  grinding extensive    6    0          2 0.7864108 #> 252 ballistic extensive    6    0          2 0.6321113 #> 253  grinding intensive    7    0          0 0.8111616 #> 254 ballistic intensive    7    0          0 0.6647168 #> 255  grinding    normal    7    0          1 0.7864108 #> 256 ballistic    normal    7    0          1 0.6321113 #> 257  grinding extensive    7    0          2 0.7631258 #> 258 ballistic extensive    7    0          2 0.6025548 #> 259  grinding intensive    8    0          0 0.7864108 #> 260 ballistic intensive    8    0          0 0.6321113 #> 261  grinding    normal    8    0          1 0.7631258 #> 262 ballistic    normal    8    0          1 0.6025548 #> 263  grinding extensive    8    0          2 0.7411800 #> 264 ballistic extensive    8    0          2 0.5756390 #> 265  grinding intensive    9    0          0 0.7631258 #> 266 ballistic intensive    9    0          0 0.6025548 #> 267  grinding    normal    9    0          1 0.7411800 #> 268 ballistic    normal    9    0          1 0.5756390 #> 269  grinding extensive    9    0          2 0.7204611 #> 270 ballistic extensive    9    0          2 0.5510249 #> 271  grinding intensive   10    0          0 0.7411800 #> 272 ballistic intensive   10    0          0 0.5756390 #> 273  grinding    normal   10    0          1 0.7204611 #> 274 ballistic    normal   10    0          1 0.5510249 #> 275  grinding extensive   10    0          2 0.7008691 #> 276 ballistic extensive   10    0          2 0.5284295 #> 277  grinding intensive   11    0          0 0.7204611 #> 278 ballistic intensive   11    0          0 0.5510249 #> 279  grinding    normal   11    0          1 0.7008691 #> 280 ballistic    normal   11    0          1 0.5284295 #> 281  grinding extensive   11    0          2 0.6823144 #> 282 ballistic extensive   11    0          2 0.5076142 #> 283  grinding intensive   12    0          0 0.7008691 #> 284 ballistic intensive   12    0          0 0.5284295 #> 285  grinding    normal   12    0          1 0.6823144 #> 286 ballistic    normal   12    0          1 0.5076142 #> 287  grinding extensive   12    0          2 0.6647168 #> 288 ballistic extensive   12    0          2 0.4883766 # ------------------------------------------ # Progression Deducted Intensity progression_DI(10, step = seq(-3, 0, 1)) #> $adjustment #> [1] -0.100 -0.075 -0.050 -0.025 #>  #> $perc_1RM #> [1] 0.6501875 0.6751875 0.7001875 0.7251875 #>  progression_DI(10, step = seq(-3, 0, 1), volume = \"extensive\") #> $adjustment #> [1] -0.125 -0.100 -0.075 -0.050 #>  #> $perc_1RM #> [1] 0.6251875 0.6501875 0.6751875 0.7001875 #>  progression_DI(5, step = seq(-3, 0, 1), type = \"ballistic\", step_increment = -0.05) #> $adjustment #> [1] -0.20 -0.15 -0.10 -0.05 #>  #> $perc_1RM #> [1] 0.5501875 0.6001875 0.6501875 0.7001875 #>  progression_DI(   5,   step = seq(-3, 0, 1),   type = \"ballistic\",   step_increment = -0.05,   volume_increment = -0.1 ) #> $adjustment #> [1] -0.25 -0.20 -0.15 -0.10 #>  #> $perc_1RM #> [1] 0.5001875 0.5501875 0.6001875 0.6501875 #>   # Generate progression table generate_progression_table(progression_DI, type = \"grinding\", volume = \"normal\") #>        type volume reps step adjustment  perc_1RM #> 1  grinding normal    1   -3     -0.100 0.8677732 #> 2  grinding normal    2   -3     -0.100 0.8375586 #> 3  grinding normal    3   -3     -0.100 0.8091736 #> 4  grinding normal    4   -3     -0.100 0.7824568 #> 5  grinding normal    5   -3     -0.100 0.7572653 #> 6  grinding normal    6   -3     -0.100 0.7334722 #> 7  grinding normal    7   -3     -0.100 0.7109642 #> 8  grinding normal    8   -3     -0.100 0.6896399 #> 9  grinding normal    9   -3     -0.100 0.6694083 #> 10 grinding normal   10   -3     -0.100 0.6501875 #> 11 grinding normal   11   -3     -0.100 0.6319037 #> 12 grinding normal   12   -3     -0.100 0.6144899 #> 13 grinding normal    1   -2     -0.075 0.8927732 #> 14 grinding normal    2   -2     -0.075 0.8625586 #> 15 grinding normal    3   -2     -0.075 0.8341736 #> 16 grinding normal    4   -2     -0.075 0.8074568 #> 17 grinding normal    5   -2     -0.075 0.7822653 #> 18 grinding normal    6   -2     -0.075 0.7584722 #> 19 grinding normal    7   -2     -0.075 0.7359642 #> 20 grinding normal    8   -2     -0.075 0.7146399 #> 21 grinding normal    9   -2     -0.075 0.6944083 #> 22 grinding normal   10   -2     -0.075 0.6751875 #> 23 grinding normal   11   -2     -0.075 0.6569037 #> 24 grinding normal   12   -2     -0.075 0.6394899 #> 25 grinding normal    1   -1     -0.050 0.9177732 #> 26 grinding normal    2   -1     -0.050 0.8875586 #> 27 grinding normal    3   -1     -0.050 0.8591736 #> 28 grinding normal    4   -1     -0.050 0.8324568 #> 29 grinding normal    5   -1     -0.050 0.8072653 #> 30 grinding normal    6   -1     -0.050 0.7834722 #> 31 grinding normal    7   -1     -0.050 0.7609642 #> 32 grinding normal    8   -1     -0.050 0.7396399 #> 33 grinding normal    9   -1     -0.050 0.7194083 #> 34 grinding normal   10   -1     -0.050 0.7001875 #> 35 grinding normal   11   -1     -0.050 0.6819037 #> 36 grinding normal   12   -1     -0.050 0.6644899 #> 37 grinding normal    1    0     -0.025 0.9427732 #> 38 grinding normal    2    0     -0.025 0.9125586 #> 39 grinding normal    3    0     -0.025 0.8841736 #> 40 grinding normal    4    0     -0.025 0.8574568 #> 41 grinding normal    5    0     -0.025 0.8322653 #> 42 grinding normal    6    0     -0.025 0.8084722 #> 43 grinding normal    7    0     -0.025 0.7859642 #> 44 grinding normal    8    0     -0.025 0.7646399 #> 45 grinding normal    9    0     -0.025 0.7444083 #> 46 grinding normal   10    0     -0.025 0.7251875 #> 47 grinding normal   11    0     -0.025 0.7069037 #> 48 grinding normal   12    0     -0.025 0.6894899  # Use different reps-max model generate_progression_table(   progression_DI,   type = \"grinding\",   volume = \"normal\",   max_perc_1RM_func = max_perc_1RM_linear,   klin = 36 ) #>        type volume reps step adjustment  perc_1RM #> 1  grinding normal    1   -3     -0.100 0.9000000 #> 2  grinding normal    2   -3     -0.100 0.8722222 #> 3  grinding normal    3   -3     -0.100 0.8444444 #> 4  grinding normal    4   -3     -0.100 0.8166667 #> 5  grinding normal    5   -3     -0.100 0.7888889 #> 6  grinding normal    6   -3     -0.100 0.7611111 #> 7  grinding normal    7   -3     -0.100 0.7333333 #> 8  grinding normal    8   -3     -0.100 0.7055556 #> 9  grinding normal    9   -3     -0.100 0.6777778 #> 10 grinding normal   10   -3     -0.100 0.6500000 #> 11 grinding normal   11   -3     -0.100 0.6222222 #> 12 grinding normal   12   -3     -0.100 0.5944444 #> 13 grinding normal    1   -2     -0.075 0.9250000 #> 14 grinding normal    2   -2     -0.075 0.8972222 #> 15 grinding normal    3   -2     -0.075 0.8694444 #> 16 grinding normal    4   -2     -0.075 0.8416667 #> 17 grinding normal    5   -2     -0.075 0.8138889 #> 18 grinding normal    6   -2     -0.075 0.7861111 #> 19 grinding normal    7   -2     -0.075 0.7583333 #> 20 grinding normal    8   -2     -0.075 0.7305556 #> 21 grinding normal    9   -2     -0.075 0.7027778 #> 22 grinding normal   10   -2     -0.075 0.6750000 #> 23 grinding normal   11   -2     -0.075 0.6472222 #> 24 grinding normal   12   -2     -0.075 0.6194444 #> 25 grinding normal    1   -1     -0.050 0.9500000 #> 26 grinding normal    2   -1     -0.050 0.9222222 #> 27 grinding normal    3   -1     -0.050 0.8944444 #> 28 grinding normal    4   -1     -0.050 0.8666667 #> 29 grinding normal    5   -1     -0.050 0.8388889 #> 30 grinding normal    6   -1     -0.050 0.8111111 #> 31 grinding normal    7   -1     -0.050 0.7833333 #> 32 grinding normal    8   -1     -0.050 0.7555556 #> 33 grinding normal    9   -1     -0.050 0.7277778 #> 34 grinding normal   10   -1     -0.050 0.7000000 #> 35 grinding normal   11   -1     -0.050 0.6722222 #> 36 grinding normal   12   -1     -0.050 0.6444444 #> 37 grinding normal    1    0     -0.025 0.9750000 #> 38 grinding normal    2    0     -0.025 0.9472222 #> 39 grinding normal    3    0     -0.025 0.9194444 #> 40 grinding normal    4    0     -0.025 0.8916667 #> 41 grinding normal    5    0     -0.025 0.8638889 #> 42 grinding normal    6    0     -0.025 0.8361111 #> 43 grinding normal    7    0     -0.025 0.8083333 #> 44 grinding normal    8    0     -0.025 0.7805556 #> 45 grinding normal    9    0     -0.025 0.7527778 #> 46 grinding normal   10    0     -0.025 0.7250000 #> 47 grinding normal   11    0     -0.025 0.6972222 #> 48 grinding normal   12    0     -0.025 0.6694444  # ------------------------------------------ # Progression RIR Constant progression_RIR(10, step = seq(-3, 0, 1)) #> $adjustment #> [1] 4 3 2 1 #>  #> $perc_1RM #> [1] 0.6820352 0.6978854 0.7144899 0.7319037 #>  progression_RIR(10, step = seq(-3, 0, 1), volume = \"extensive\") #> $adjustment #> [1] 5 4 3 2 #>  #> $perc_1RM #> [1] 0.6668890 0.6820352 0.6978854 0.7144899 #>  progression_RIR(5, step = seq(-3, 0, 1), type = \"ballistic\", step_increment = 2) #> $adjustment #> [1] 8 6 4 2 #>  #> $perc_1RM #> [1] 0.5359631 0.5771673 0.6252345 0.6820352 #>  progression_RIR(   5,   step = seq(-3, 0, 1),   type = \"ballistic\",   step_increment = 3 ) #> $adjustment #> [1] 12  9  6  3 #>  #> $perc_1RM #> [1] 0.4689992 0.5174912 0.5771673 0.6524008 #>   # Generate progression table generate_progression_table(progression_RIR, type = \"grinding\", volume = \"normal\") #>        type volume reps step adjustment  perc_1RM #> 1  grinding normal    1   -3          4 0.8572653 #> 2  grinding normal    2   -3          4 0.8334722 #> 3  grinding normal    3   -3          4 0.8109642 #> 4  grinding normal    4   -3          4 0.7896399 #> 5  grinding normal    5   -3          4 0.7694083 #> 6  grinding normal    6   -3          4 0.7501875 #> 7  grinding normal    7   -3          4 0.7319037 #> 8  grinding normal    8   -3          4 0.7144899 #> 9  grinding normal    9   -3          4 0.6978854 #> 10 grinding normal   10   -3          4 0.6820352 #> 11 grinding normal   11   -3          4 0.6668890 #> 12 grinding normal   12   -3          4 0.6524008 #> 13 grinding normal    1   -2          3 0.8824568 #> 14 grinding normal    2   -2          3 0.8572653 #> 15 grinding normal    3   -2          3 0.8334722 #> 16 grinding normal    4   -2          3 0.8109642 #> 17 grinding normal    5   -2          3 0.7896399 #> 18 grinding normal    6   -2          3 0.7694083 #> 19 grinding normal    7   -2          3 0.7501875 #> 20 grinding normal    8   -2          3 0.7319037 #> 21 grinding normal    9   -2          3 0.7144899 #> 22 grinding normal   10   -2          3 0.6978854 #> 23 grinding normal   11   -2          3 0.6820352 #> 24 grinding normal   12   -2          3 0.6668890 #> 25 grinding normal    1   -1          2 0.9091736 #> 26 grinding normal    2   -1          2 0.8824568 #> 27 grinding normal    3   -1          2 0.8572653 #> 28 grinding normal    4   -1          2 0.8334722 #> 29 grinding normal    5   -1          2 0.8109642 #> 30 grinding normal    6   -1          2 0.7896399 #> 31 grinding normal    7   -1          2 0.7694083 #> 32 grinding normal    8   -1          2 0.7501875 #> 33 grinding normal    9   -1          2 0.7319037 #> 34 grinding normal   10   -1          2 0.7144899 #> 35 grinding normal   11   -1          2 0.6978854 #> 36 grinding normal   12   -1          2 0.6820352 #> 37 grinding normal    1    0          1 0.9375586 #> 38 grinding normal    2    0          1 0.9091736 #> 39 grinding normal    3    0          1 0.8824568 #> 40 grinding normal    4    0          1 0.8572653 #> 41 grinding normal    5    0          1 0.8334722 #> 42 grinding normal    6    0          1 0.8109642 #> 43 grinding normal    7    0          1 0.7896399 #> 44 grinding normal    8    0          1 0.7694083 #> 45 grinding normal    9    0          1 0.7501875 #> 46 grinding normal   10    0          1 0.7319037 #> 47 grinding normal   11    0          1 0.7144899 #> 48 grinding normal   12    0          1 0.6978854  # Use different reps-max model generate_progression_table(   progression_RIR,   type = \"grinding\",   volume = \"normal\",   max_perc_1RM_func = max_perc_1RM_linear,   klin = 36 ) #>        type volume reps step adjustment  perc_1RM #> 1  grinding normal    1   -3          4 0.8888889 #> 2  grinding normal    2   -3          4 0.8611111 #> 3  grinding normal    3   -3          4 0.8333333 #> 4  grinding normal    4   -3          4 0.8055556 #> 5  grinding normal    5   -3          4 0.7777778 #> 6  grinding normal    6   -3          4 0.7500000 #> 7  grinding normal    7   -3          4 0.7222222 #> 8  grinding normal    8   -3          4 0.6944444 #> 9  grinding normal    9   -3          4 0.6666667 #> 10 grinding normal   10   -3          4 0.6388889 #> 11 grinding normal   11   -3          4 0.6111111 #> 12 grinding normal   12   -3          4 0.5833333 #> 13 grinding normal    1   -2          3 0.9166667 #> 14 grinding normal    2   -2          3 0.8888889 #> 15 grinding normal    3   -2          3 0.8611111 #> 16 grinding normal    4   -2          3 0.8333333 #> 17 grinding normal    5   -2          3 0.8055556 #> 18 grinding normal    6   -2          3 0.7777778 #> 19 grinding normal    7   -2          3 0.7500000 #> 20 grinding normal    8   -2          3 0.7222222 #> 21 grinding normal    9   -2          3 0.6944444 #> 22 grinding normal   10   -2          3 0.6666667 #> 23 grinding normal   11   -2          3 0.6388889 #> 24 grinding normal   12   -2          3 0.6111111 #> 25 grinding normal    1   -1          2 0.9444444 #> 26 grinding normal    2   -1          2 0.9166667 #> 27 grinding normal    3   -1          2 0.8888889 #> 28 grinding normal    4   -1          2 0.8611111 #> 29 grinding normal    5   -1          2 0.8333333 #> 30 grinding normal    6   -1          2 0.8055556 #> 31 grinding normal    7   -1          2 0.7777778 #> 32 grinding normal    8   -1          2 0.7500000 #> 33 grinding normal    9   -1          2 0.7222222 #> 34 grinding normal   10   -1          2 0.6944444 #> 35 grinding normal   11   -1          2 0.6666667 #> 36 grinding normal   12   -1          2 0.6388889 #> 37 grinding normal    1    0          1 0.9722222 #> 38 grinding normal    2    0          1 0.9444444 #> 39 grinding normal    3    0          1 0.9166667 #> 40 grinding normal    4    0          1 0.8888889 #> 41 grinding normal    5    0          1 0.8611111 #> 42 grinding normal    6    0          1 0.8333333 #> 43 grinding normal    7    0          1 0.8055556 #> 44 grinding normal    8    0          1 0.7777778 #> 45 grinding normal    9    0          1 0.7500000 #> 46 grinding normal   10    0          1 0.7222222 #> 47 grinding normal   11    0          1 0.6944444 #> 48 grinding normal   12    0          1 0.6666667  # Plot progression table plot_progression_table(progression_RIR)  plot_progression_table(progression_RIR, \"adjustment\")  # ------------------------------------------ # Progression RIR Increment progression_RIR_increment(10, step = seq(-3, 0, 1)) #> $adjustment #> [1] 8.090909 6.272727 4.454545 2.636364 #>  #> $perc_1RM #> [1] 0.6240533 0.6485581 0.6750661 0.7038333 #>  progression_RIR_increment(10, step = seq(-3, 0, 1), volume = \"extensive\") #> $adjustment #> [1] 10.727273  8.909091  7.090909  5.272727 #>  #> $perc_1RM #> [1] 0.5916396 0.6136201 0.6372969 0.6628742 #>  progression_RIR_increment(5, step = seq(-3, 0, 1), type = \"ballistic\") #> $adjustment #> [1] 7.2 5.4 3.6 1.8 #>  #> $perc_1RM #> [1] 0.5517181 0.5907931 0.6358249 0.6882881 #>   # Generate progression table generate_progression_table(progression_RIR_increment, type = \"grinding\", volume = \"normal\") #>        type volume reps step adjustment  perc_1RM #> 1  grinding normal    1   -3   4.000000 0.8572653 #> 2  grinding normal    2   -3   4.454545 0.8230884 #> 3  grinding normal    3   -3   4.909091 0.7915320 #> 4  grinding normal    4   -3   5.363636 0.7623060 #> 5  grinding normal    5   -3   5.818182 0.7351614 #> 6  grinding normal    6   -3   6.272727 0.7098835 #> 7  grinding normal    7   -3   6.727273 0.6862861 #> 8  grinding normal    8   -3   7.181818 0.6642071 #> 9  grinding normal    9   -3   7.636364 0.6435044 #> 10 grinding normal   10   -3   8.090909 0.6240533 #> 11 grinding normal   11   -3   8.545455 0.6057436 #> 12 grinding normal   12   -3   9.000000 0.5884776 #> 13 grinding normal    1   -2   3.000000 0.8824568 #> 14 grinding normal    2   -2   3.363636 0.8484577 #> 15 grinding normal    3   -2   3.727273 0.8169813 #> 16 grinding normal    4   -2   4.090909 0.7877568 #> 17 grinding normal    5   -2   4.454545 0.7605509 #> 18 grinding normal    6   -2   4.818182 0.7351614 #> 19 grinding normal    7   -2   5.181818 0.7114123 #> 20 grinding normal    8   -2   5.545455 0.6891497 #> 21 grinding normal    9   -2   5.909091 0.6682380 #> 22 grinding normal   10   -2   6.272727 0.6485581 #> 23 grinding normal   11   -2   6.636364 0.6300042 #> 24 grinding normal   12   -2   7.000000 0.6124824 #> 25 grinding normal    1   -1   2.000000 0.9091736 #> 26 grinding normal    2   -1   2.272727 0.8754407 #> 27 grinding normal    3   -1   2.545455 0.8441215 #> 28 grinding normal    4   -1   2.818182 0.8149657 #> 29 grinding normal    5   -1   3.090909 0.7877568 #> 30 grinding normal    6   -1   3.363636 0.7623060 #> 31 grinding normal    7   -1   3.636364 0.7384483 #> 32 grinding normal    8   -1   3.909091 0.7160386 #> 33 grinding normal    9   -1   4.181818 0.6949490 #> 34 grinding normal   10   -1   4.454545 0.6750661 #> 35 grinding normal   11   -1   4.727273 0.6562893 #> 36 grinding normal   12   -1   5.000000 0.6385288 #> 37 grinding normal    1    0   1.000000 0.9375586 #> 38 grinding normal    2    0   1.181818 0.9041963 #> 39 grinding normal    3    0   1.363636 0.8731267 #> 40 grinding normal    4    0   1.545455 0.8441215 #> 41 grinding normal    5    0   1.727273 0.8169813 #> 42 grinding normal    6    0   1.909091 0.7915320 #> 43 grinding normal    7    0   2.090909 0.7676204 #> 44 grinding normal    8    0   2.272727 0.7451111 #> 45 grinding normal    9    0   2.454545 0.7238842 #> 46 grinding normal   10    0   2.636364 0.7038333 #> 47 grinding normal   11    0   2.818182 0.6848633 #> 48 grinding normal   12    0   3.000000 0.6668890  # Use different reps-max model generate_progression_table(   progression_RIR_increment,   type = \"grinding\",   volume = \"normal\",   max_perc_1RM_func = max_perc_1RM_linear,   klin = 36 ) #>        type volume reps step adjustment  perc_1RM #> 1  grinding normal    1   -3   4.000000 0.8888889 #> 2  grinding normal    2   -3   4.454545 0.8484848 #> 3  grinding normal    3   -3   4.909091 0.8080808 #> 4  grinding normal    4   -3   5.363636 0.7676768 #> 5  grinding normal    5   -3   5.818182 0.7272727 #> 6  grinding normal    6   -3   6.272727 0.6868687 #> 7  grinding normal    7   -3   6.727273 0.6464646 #> 8  grinding normal    8   -3   7.181818 0.6060606 #> 9  grinding normal    9   -3   7.636364 0.5656566 #> 10 grinding normal   10   -3   8.090909 0.5252525 #> 11 grinding normal   11   -3   8.545455 0.4848485 #> 12 grinding normal   12   -3   9.000000 0.4444444 #> 13 grinding normal    1   -2   3.000000 0.9166667 #> 14 grinding normal    2   -2   3.363636 0.8787879 #> 15 grinding normal    3   -2   3.727273 0.8409091 #> 16 grinding normal    4   -2   4.090909 0.8030303 #> 17 grinding normal    5   -2   4.454545 0.7651515 #> 18 grinding normal    6   -2   4.818182 0.7272727 #> 19 grinding normal    7   -2   5.181818 0.6893939 #> 20 grinding normal    8   -2   5.545455 0.6515152 #> 21 grinding normal    9   -2   5.909091 0.6136364 #> 22 grinding normal   10   -2   6.272727 0.5757576 #> 23 grinding normal   11   -2   6.636364 0.5378788 #> 24 grinding normal   12   -2   7.000000 0.5000000 #> 25 grinding normal    1   -1   2.000000 0.9444444 #> 26 grinding normal    2   -1   2.272727 0.9090909 #> 27 grinding normal    3   -1   2.545455 0.8737374 #> 28 grinding normal    4   -1   2.818182 0.8383838 #> 29 grinding normal    5   -1   3.090909 0.8030303 #> 30 grinding normal    6   -1   3.363636 0.7676768 #> 31 grinding normal    7   -1   3.636364 0.7323232 #> 32 grinding normal    8   -1   3.909091 0.6969697 #> 33 grinding normal    9   -1   4.181818 0.6616162 #> 34 grinding normal   10   -1   4.454545 0.6262626 #> 35 grinding normal   11   -1   4.727273 0.5909091 #> 36 grinding normal   12   -1   5.000000 0.5555556 #> 37 grinding normal    1    0   1.000000 0.9722222 #> 38 grinding normal    2    0   1.181818 0.9393939 #> 39 grinding normal    3    0   1.363636 0.9065657 #> 40 grinding normal    4    0   1.545455 0.8737374 #> 41 grinding normal    5    0   1.727273 0.8409091 #> 42 grinding normal    6    0   1.909091 0.8080808 #> 43 grinding normal    7    0   2.090909 0.7752525 #> 44 grinding normal    8    0   2.272727 0.7424242 #> 45 grinding normal    9    0   2.454545 0.7095960 #> 46 grinding normal   10    0   2.636364 0.6767677 #> 47 grinding normal   11    0   2.818182 0.6439394 #> 48 grinding normal   12    0   3.000000 0.6111111 # ------------------------------------------ # Progression %MR Step Const progression_perc_MR(10, step = seq(-3, 0, 1)) #> $adjustment #> [1] 0.5 0.6 0.7 0.8 #>  #> $perc_1RM #> [1] 0.6002401 0.6430868 0.6776379 0.7060900 #>  progression_perc_MR(10, step = seq(-3, 0, 1), volume = \"extensive\") #> $adjustment #> [1] 0.3 0.4 0.5 0.6 #>  #> $perc_1RM #> [1] 0.4739336 0.5457026 0.6002401 0.6430868 #>  progression_perc_MR(5, step = seq(-3, 0, 1), type = \"ballistic\", step_increment = -0.2) #> $adjustment #> [1] 0.2 0.4 0.6 0.8 #>  #> $perc_1RM #> [1] 0.3752345 0.5457026 0.6430868 0.7060900 #>  progression_perc_MR(   5,   step = seq(-3, 0, 1),   type = \"ballistic\",   step_increment = -0.15,   volume_increment = -0.25 ) #> $adjustment #> [1] 0.30 0.45 0.60 0.75 #>  #> $perc_1RM #> [1] 0.4739336 0.5747126 0.6430868 0.6925208 #>   # Generate progression table generate_progression_table(progression_perc_MR, type = \"grinding\", volume = \"normal\") #>        type volume reps step adjustment  perc_1RM #> 1  grinding normal    1   -3        0.5 0.9375586 #> 2  grinding normal    2   -3        0.5 0.8824568 #> 3  grinding normal    3   -3        0.5 0.8334722 #> 4  grinding normal    4   -3        0.5 0.7896399 #> 5  grinding normal    5   -3        0.5 0.7501875 #> 6  grinding normal    6   -3        0.5 0.7144899 #> 7  grinding normal    7   -3        0.5 0.6820352 #> 8  grinding normal    8   -3        0.5 0.6524008 #> 9  grinding normal    9   -3        0.5 0.6252345 #> 10 grinding normal   10   -3        0.5 0.6002401 #> 11 grinding normal   11   -3        0.5 0.5771673 #> 12 grinding normal   12   -3        0.5 0.5558026 #> 13 grinding normal    1   -2        0.6 0.9474183 #> 14 grinding normal    2   -2        0.6 0.9000900 #> 15 grinding normal    3   -2        0.6 0.8572653 #> 16 grinding normal    4   -2        0.6 0.8183306 #> 17 grinding normal    5   -2        0.6 0.7827789 #> 18 grinding normal    6   -2        0.6 0.7501875 #> 19 grinding normal    7   -2        0.6 0.7202017 #> 20 grinding normal    8   -2        0.6 0.6925208 #> 21 grinding normal    9   -2        0.6 0.6668890 #> 22 grinding normal   10   -2        0.6 0.6430868 #> 23 grinding normal   11   -2        0.6 0.6209252 #> 24 grinding normal   12   -2        0.6 0.6002401 #> 25 grinding normal    1   -1        0.7 0.9545888 #> 26 grinding normal    2   -1        0.7 0.9131229 #> 27 grinding normal    3   -1        0.7 0.8751094 #> 28 grinding normal    4   -1        0.7 0.8401344 #> 29 grinding normal    5   -1        0.7 0.8078477 #> 30 grinding normal    6   -1        0.7 0.7779507 #> 31 grinding normal    7   -1        0.7 0.7501875 #> 32 grinding normal    8   -1        0.7 0.7243377 #> 33 grinding normal    9   -1        0.7 0.7002101 #> 34 grinding normal   10   -1        0.7 0.6776379 #> 35 grinding normal   11   -1        0.7 0.6564757 #> 36 grinding normal   12   -1        0.7 0.6365951 #> 37 grinding normal    1    0        0.8 0.9600384 #> 38 grinding normal    2    0        0.8 0.9231479 #> 39 grinding normal    3    0        0.8 0.8889877 #> 40 grinding normal    4    0        0.8 0.8572653 #> 41 grinding normal    5    0        0.8 0.8277289 #> 42 grinding normal    6    0        0.8 0.8001600 #> 43 grinding normal    7    0        0.8 0.7743684 #> 44 grinding normal    8    0        0.8 0.7501875 #> 45 grinding normal    9    0        0.8 0.7274711 #> 46 grinding normal   10    0        0.8 0.7060900 #> 47 grinding normal   11    0        0.8 0.6859299 #> 48 grinding normal   12    0        0.8 0.6668890  # Use different reps-max model generate_progression_table(   progression_perc_MR,   type = \"grinding\",   volume = \"normal\",   max_perc_1RM_func = max_perc_1RM_linear,   klin = 36 ) #>        type volume reps step adjustment  perc_1RM #> 1  grinding normal    1   -3        0.5 0.9722222 #> 2  grinding normal    2   -3        0.5 0.9166667 #> 3  grinding normal    3   -3        0.5 0.8611111 #> 4  grinding normal    4   -3        0.5 0.8055556 #> 5  grinding normal    5   -3        0.5 0.7500000 #> 6  grinding normal    6   -3        0.5 0.6944444 #> 7  grinding normal    7   -3        0.5 0.6388889 #> 8  grinding normal    8   -3        0.5 0.5833333 #> 9  grinding normal    9   -3        0.5 0.5277778 #> 10 grinding normal   10   -3        0.5 0.4722222 #> 11 grinding normal   11   -3        0.5 0.4166667 #> 12 grinding normal   12   -3        0.5 0.3611111 #> 13 grinding normal    1   -2        0.6 0.9814815 #> 14 grinding normal    2   -2        0.6 0.9351852 #> 15 grinding normal    3   -2        0.6 0.8888889 #> 16 grinding normal    4   -2        0.6 0.8425926 #> 17 grinding normal    5   -2        0.6 0.7962963 #> 18 grinding normal    6   -2        0.6 0.7500000 #> 19 grinding normal    7   -2        0.6 0.7037037 #> 20 grinding normal    8   -2        0.6 0.6574074 #> 21 grinding normal    9   -2        0.6 0.6111111 #> 22 grinding normal   10   -2        0.6 0.5648148 #> 23 grinding normal   11   -2        0.6 0.5185185 #> 24 grinding normal   12   -2        0.6 0.4722222 #> 25 grinding normal    1   -1        0.7 0.9880952 #> 26 grinding normal    2   -1        0.7 0.9484127 #> 27 grinding normal    3   -1        0.7 0.9087302 #> 28 grinding normal    4   -1        0.7 0.8690476 #> 29 grinding normal    5   -1        0.7 0.8293651 #> 30 grinding normal    6   -1        0.7 0.7896825 #> 31 grinding normal    7   -1        0.7 0.7500000 #> 32 grinding normal    8   -1        0.7 0.7103175 #> 33 grinding normal    9   -1        0.7 0.6706349 #> 34 grinding normal   10   -1        0.7 0.6309524 #> 35 grinding normal   11   -1        0.7 0.5912698 #> 36 grinding normal   12   -1        0.7 0.5515873 #> 37 grinding normal    1    0        0.8 0.9930556 #> 38 grinding normal    2    0        0.8 0.9583333 #> 39 grinding normal    3    0        0.8 0.9236111 #> 40 grinding normal    4    0        0.8 0.8888889 #> 41 grinding normal    5    0        0.8 0.8541667 #> 42 grinding normal    6    0        0.8 0.8194444 #> 43 grinding normal    7    0        0.8 0.7847222 #> 44 grinding normal    8    0        0.8 0.7500000 #> 45 grinding normal    9    0        0.8 0.7152778 #> 46 grinding normal   10    0        0.8 0.6805556 #> 47 grinding normal   11    0        0.8 0.6458333 #> 48 grinding normal   12    0        0.8 0.6111111  # ------------------------------------------ # Progression %MR Step Variable progression_perc_MR_variable(10, step = seq(-3, 0, 1)) #> $adjustment #> [1] 0.4818182 0.5818182 0.6818182 0.7818182 #>  #> $perc_1RM #> [1] 0.5913199 0.6359932 0.6718624 0.7012966 #>  progression_perc_MR_variable(10, step = seq(-3, 0, 1), volume = \"extensive\") #> $adjustment #> [1] 0.2818182 0.3818182 0.4818182 0.5818182 #>  #> $perc_1RM #> [1] 0.4583765 0.5341473 0.5913199 0.6359932 #>  progression_perc_MR_variable(5, step = seq(-3, 0, 1), type = \"ballistic\") #> $adjustment #> [1] 0.4363636 0.5363636 0.6363636 0.7363636 #>  #> $perc_1RM #> [1] 0.5671748 0.6169612 0.6564757 0.6885998 #>  # Generate progression table generate_progression_table(progression_perc_MR_variable, type = \"grinding\", volume = \"normal\") #>        type volume reps step adjustment  perc_1RM #> 1  grinding normal    1   -3  0.4000000 0.9231479 #> 2  grinding normal    2   -3  0.4090909 0.8599931 #> 3  grinding normal    3   -3  0.4181818 0.8071733 #> 4  grinding normal    4   -3  0.4272727 0.7623435 #> 5  grinding normal    5   -3  0.4363636 0.7238181 #> 6  grinding normal    6   -3  0.4454545 0.6903548 #> 7  grinding normal    7   -3  0.4545455 0.6610172 #> 8  grinding normal    8   -3  0.4636364 0.6350867 #> 9  grinding normal    9   -3  0.4727273 0.6120023 #> 10 grinding normal   10   -3  0.4818182 0.5913199 #> 11 grinding normal   11   -3  0.4909091 0.5726830 #> 12 grinding normal   12   -3  0.5000000 0.5558026 #> 13 grinding normal    1   -2  0.5000000 0.9375586 #> 14 grinding normal    2   -2  0.5090909 0.8843129 #> 15 grinding normal    3   -2  0.5181818 0.8383709 #> 16 grinding normal    4   -2  0.5272727 0.7983263 #> 17 grinding normal    5   -2  0.5363636 0.7631119 #> 18 grinding normal    6   -2  0.5454545 0.7319037 #> 19 grinding normal    7   -2  0.5545455 0.7040547 #> 20 grinding normal    8   -2  0.5636364 0.6790502 #> 21 grinding normal    9   -2  0.5727273 0.6564757 #> 22 grinding normal   10   -2  0.5818182 0.6359932 #> 23 grinding normal   11   -2  0.5909091 0.6173250 #> 24 grinding normal   12   -2  0.6000000 0.6002401 #> 25 grinding normal    1   -1  0.6000000 0.9474183 #> 26 grinding normal    2   -1  0.6090909 0.9014342 #> 27 grinding normal    3   -1  0.6181818 0.8608794 #> 28 grinding normal    4   -1  0.6272727 0.8248458 #> 29 grinding normal    5   -1  0.6363636 0.7926173 #> 30 grinding normal    6   -1  0.6454545 0.7636215 #> 31 grinding normal    7   -1  0.6545455 0.7373952 #> 32 grinding normal    8   -1  0.6636364 0.7135596 #> 33 grinding normal    9   -1  0.6727273 0.6918021 #> 34 grinding normal   10   -1  0.6818182 0.6718624 #> 35 grinding normal   11   -1  0.6909091 0.6535217 #> 36 grinding normal   12   -1  0.7000000 0.6365951 #> 37 grinding normal    1    0  0.7000000 0.9545888 #> 38 grinding normal    2    0  0.7090909 0.9141411 #> 39 grinding normal    3    0  0.7181818 0.8778851 #> 40 grinding normal    4    0  0.7272727 0.8452014 #> 41 grinding normal    5    0  0.7363636 0.8155868 #> 42 grinding normal    6    0  0.7454545 0.7886284 #> 43 grinding normal    7    0  0.7545455 0.7639841 #> 44 grinding normal    8    0  0.7636364 0.7413684 #> 45 grinding normal    9    0  0.7727273 0.7205405 #> 46 grinding normal   10    0  0.7818182 0.7012966 #> 47 grinding normal   11    0  0.7909091 0.6834626 #> 48 grinding normal   12    0  0.8000000 0.6668890  # Use different reps-max model generate_progression_table(   progression_perc_MR_variable,   type = \"grinding\",   volume = \"normal\",   max_perc_1RM_func = max_perc_1RM_linear,   klin = 36 ) #>        type volume reps step adjustment  perc_1RM #> 1  grinding normal    1   -3  0.4000000 0.9583333 #> 2  grinding normal    2   -3  0.4090909 0.8919753 #> 3  grinding normal    3   -3  0.4181818 0.8285024 #> 4  grinding normal    4   -3  0.4272727 0.7677305 #> 5  grinding normal    5   -3  0.4363636 0.7094907 #> 6  grinding normal    6   -3  0.4454545 0.6536281 #> 7  grinding normal    7   -3  0.4545455 0.6000000 #> 8  grinding normal    8   -3  0.4636364 0.5484749 #> 9  grinding normal    9   -3  0.4727273 0.4989316 #> 10 grinding normal   10   -3  0.4818182 0.4512579 #> 11 grinding normal   11   -3  0.4909091 0.4053498 #> 12 grinding normal   12   -3  0.5000000 0.3611111 #> 13 grinding normal    1   -2  0.5000000 0.9722222 #> 14 grinding normal    2   -2  0.5090909 0.9186508 #> 15 grinding normal    3   -2  0.5181818 0.8669591 #> 16 grinding normal    4   -2  0.5272727 0.8170498 #> 17 grinding normal    5   -2  0.5363636 0.7688324 #> 18 grinding normal    6   -2  0.5454545 0.7222222 #> 19 grinding normal    7   -2  0.5545455 0.6771403 #> 20 grinding normal    8   -2  0.5636364 0.6335125 #> 21 grinding normal    9   -2  0.5727273 0.5912698 #> 22 grinding normal   10   -2  0.5818182 0.5503472 #> 23 grinding normal   11   -2  0.5909091 0.5106838 #> 24 grinding normal   12   -2  0.6000000 0.4722222 #> 25 grinding normal    1   -1  0.6000000 0.9814815 #> 26 grinding normal    2   -1  0.6090909 0.9365672 #> 27 grinding normal    3   -1  0.6181818 0.8929739 #> 28 grinding normal    4   -1  0.6272727 0.8506441 #> 29 grinding normal    5   -1  0.6363636 0.8095238 #> 30 grinding normal    6   -1  0.6454545 0.7695618 #> 31 grinding normal    7   -1  0.6545455 0.7307099 #> 32 grinding normal    8   -1  0.6636364 0.6929224 #> 33 grinding normal    9   -1  0.6727273 0.6561562 #> 34 grinding normal   10   -1  0.6818182 0.6203704 #> 35 grinding normal   11   -1  0.6909091 0.5855263 #> 36 grinding normal   12   -1  0.7000000 0.5515873 #> 37 grinding normal    1    0  0.7000000 0.9880952 #> 38 grinding normal    2    0  0.7090909 0.9494302 #> 39 grinding normal    3    0  0.7181818 0.9117440 #> 40 grinding normal    4    0  0.7272727 0.8750000 #> 41 grinding normal    5    0  0.7363636 0.8391632 #> 42 grinding normal    6    0  0.7454545 0.8042005 #> 43 grinding normal    7    0  0.7545455 0.7700803 #> 44 grinding normal    8    0  0.7636364 0.7367725 #> 45 grinding normal    9    0  0.7727273 0.7042484 #> 46 grinding normal   10    0  0.7818182 0.6724806 #> 47 grinding normal   11    0  0.7909091 0.6414432 #> 48 grinding normal   12    0  0.8000000 0.6111111 # ------------------------------------------ # Progression Perc Drop progression_perc_drop(10, step = seq(-3, 0, 1)) #> $adjustment #> [1] -0.18181818 -0.13636364 -0.09090909 -0.04545455 #>  #> $perc_1RM #> [1] 0.5683694 0.6138239 0.6592785 0.7047330 #>  progression_perc_drop(10, step = seq(-3, 0, 1), volume = \"extensive\") #> $adjustment #> [1] -0.22727273 -0.18181818 -0.13636364 -0.09090909 #>  #> $perc_1RM #> [1] 0.5229148 0.5683694 0.6138239 0.6592785 #>  progression_perc_drop(5, step = seq(-3, 0, 1), type = \"ballistic\") #> $adjustment #> [1] -0.170 -0.125 -0.080 -0.035 #>  #> $perc_1RM #> [1] 0.5801875 0.6251875 0.6701875 0.7151875 #>   # Generate progression table generate_progression_table(progression_perc_drop, type = \"grinding\", volume = \"normal\") #>        type volume reps step  adjustment  perc_1RM #> 1  grinding normal    1   -3 -0.10000000 0.8677732 #> 2  grinding normal    2   -3 -0.10909091 0.8284677 #> 3  grinding normal    3   -3 -0.11818182 0.7909917 #> 4  grinding normal    4   -3 -0.12727273 0.7551840 #> 5  grinding normal    5   -3 -0.13636364 0.7209017 #> 6  grinding normal    6   -3 -0.14545455 0.6880177 #> 7  grinding normal    7   -3 -0.15454545 0.6564188 #> 8  grinding normal    8   -3 -0.16363636 0.6260036 #> 9  grinding normal    9   -3 -0.17272727 0.5966811 #> 10 grinding normal   10   -3 -0.18181818 0.5683694 #> 11 grinding normal   11   -3 -0.19090909 0.5409946 #> 12 grinding normal   12   -3 -0.20000000 0.5144899 #> 13 grinding normal    1   -2 -0.07500000 0.8927732 #> 14 grinding normal    2   -2 -0.08181818 0.8557404 #> 15 grinding normal    3   -2 -0.08863636 0.8205372 #> 16 grinding normal    4   -2 -0.09545455 0.7870022 #> 17 grinding normal    5   -2 -0.10227273 0.7549926 #> 18 grinding normal    6   -2 -0.10909091 0.7243813 #> 19 grinding normal    7   -2 -0.11590909 0.6950551 #> 20 grinding normal    8   -2 -0.12272727 0.6669127 #> 21 grinding normal    9   -2 -0.12954545 0.6398629 #> 22 grinding normal   10   -2 -0.13636364 0.6138239 #> 23 grinding normal   11   -2 -0.14318182 0.5887219 #> 24 grinding normal   12   -2 -0.15000000 0.5644899 #> 25 grinding normal    1   -1 -0.05000000 0.9177732 #> 26 grinding normal    2   -1 -0.05454545 0.8830131 #> 27 grinding normal    3   -1 -0.05909091 0.8500827 #> 28 grinding normal    4   -1 -0.06363636 0.8188204 #> 29 grinding normal    5   -1 -0.06818182 0.7890835 #> 30 grinding normal    6   -1 -0.07272727 0.7607450 #> 31 grinding normal    7   -1 -0.07727273 0.7336915 #> 32 grinding normal    8   -1 -0.08181818 0.7078217 #> 33 grinding normal    9   -1 -0.08636364 0.6830447 #> 34 grinding normal   10   -1 -0.09090909 0.6592785 #> 35 grinding normal   11   -1 -0.09545455 0.6364491 #> 36 grinding normal   12   -1 -0.10000000 0.6144899 #> 37 grinding normal    1    0 -0.02500000 0.9427732 #> 38 grinding normal    2    0 -0.02727273 0.9102859 #> 39 grinding normal    3    0 -0.02954545 0.8796281 #> 40 grinding normal    4    0 -0.03181818 0.8506386 #> 41 grinding normal    5    0 -0.03409091 0.8231744 #> 42 grinding normal    6    0 -0.03636364 0.7971086 #> 43 grinding normal    7    0 -0.03863636 0.7723279 #> 44 grinding normal    8    0 -0.04090909 0.7487308 #> 45 grinding normal    9    0 -0.04318182 0.7262265 #> 46 grinding normal   10    0 -0.04545455 0.7047330 #> 47 grinding normal   11    0 -0.04772727 0.6841764 #> 48 grinding normal   12    0 -0.05000000 0.6644899  # Use different reps-max model generate_progression_table(   progression_perc_drop,   type = \"grinding\",   volume = \"normal\",   max_perc_1RM_func = max_perc_1RM_linear,   klin = 36 ) #>        type volume reps step  adjustment  perc_1RM #> 1  grinding normal    1   -3 -0.10000000 0.9000000 #> 2  grinding normal    2   -3 -0.10909091 0.8631313 #> 3  grinding normal    3   -3 -0.11818182 0.8262626 #> 4  grinding normal    4   -3 -0.12727273 0.7893939 #> 5  grinding normal    5   -3 -0.13636364 0.7525253 #> 6  grinding normal    6   -3 -0.14545455 0.7156566 #> 7  grinding normal    7   -3 -0.15454545 0.6787879 #> 8  grinding normal    8   -3 -0.16363636 0.6419192 #> 9  grinding normal    9   -3 -0.17272727 0.6050505 #> 10 grinding normal   10   -3 -0.18181818 0.5681818 #> 11 grinding normal   11   -3 -0.19090909 0.5313131 #> 12 grinding normal   12   -3 -0.20000000 0.4944444 #> 13 grinding normal    1   -2 -0.07500000 0.9250000 #> 14 grinding normal    2   -2 -0.08181818 0.8904040 #> 15 grinding normal    3   -2 -0.08863636 0.8558081 #> 16 grinding normal    4   -2 -0.09545455 0.8212121 #> 17 grinding normal    5   -2 -0.10227273 0.7866162 #> 18 grinding normal    6   -2 -0.10909091 0.7520202 #> 19 grinding normal    7   -2 -0.11590909 0.7174242 #> 20 grinding normal    8   -2 -0.12272727 0.6828283 #> 21 grinding normal    9   -2 -0.12954545 0.6482323 #> 22 grinding normal   10   -2 -0.13636364 0.6136364 #> 23 grinding normal   11   -2 -0.14318182 0.5790404 #> 24 grinding normal   12   -2 -0.15000000 0.5444444 #> 25 grinding normal    1   -1 -0.05000000 0.9500000 #> 26 grinding normal    2   -1 -0.05454545 0.9176768 #> 27 grinding normal    3   -1 -0.05909091 0.8853535 #> 28 grinding normal    4   -1 -0.06363636 0.8530303 #> 29 grinding normal    5   -1 -0.06818182 0.8207071 #> 30 grinding normal    6   -1 -0.07272727 0.7883838 #> 31 grinding normal    7   -1 -0.07727273 0.7560606 #> 32 grinding normal    8   -1 -0.08181818 0.7237374 #> 33 grinding normal    9   -1 -0.08636364 0.6914141 #> 34 grinding normal   10   -1 -0.09090909 0.6590909 #> 35 grinding normal   11   -1 -0.09545455 0.6267677 #> 36 grinding normal   12   -1 -0.10000000 0.5944444 #> 37 grinding normal    1    0 -0.02500000 0.9750000 #> 38 grinding normal    2    0 -0.02727273 0.9449495 #> 39 grinding normal    3    0 -0.02954545 0.9148990 #> 40 grinding normal    4    0 -0.03181818 0.8848485 #> 41 grinding normal    5    0 -0.03409091 0.8547980 #> 42 grinding normal    6    0 -0.03636364 0.8247475 #> 43 grinding normal    7    0 -0.03863636 0.7946970 #> 44 grinding normal    8    0 -0.04090909 0.7646465 #> 45 grinding normal    9    0 -0.04318182 0.7345960 #> 46 grinding normal   10    0 -0.04545455 0.7045455 #> 47 grinding normal   11    0 -0.04772727 0.6744949 #> 48 grinding normal   12    0 -0.05000000 0.6444444 # ------------------------------------------ # Progression Relative Intensity progression_rel_int(10, step = seq(-3, 0, 1)) #> $adjustment #> [1] 0.775 0.825 0.875 0.925 #>  #> $perc_1RM #> [1] 0.5813953 0.6189047 0.6564141 0.6939235 #>  progression_rel_int(10, step = seq(-3, 0, 1), volume = \"extensive\") #> $adjustment #> [1] 0.70 0.75 0.80 0.85 #>  #> $perc_1RM #> [1] 0.5251313 0.5626407 0.6001500 0.6376594 #>  progression_rel_int(5, step = seq(-3, 0, 1), type = \"ballistic\") #> $adjustment #> [1] 0.775 0.825 0.875 0.925 #>  #> $perc_1RM #> [1] 0.5813953 0.6189047 0.6564141 0.6939235 #>   # Generate progression table generate_progression_table(progression_rel_int, type = \"grinding\", volume = \"normal\") #>        type volume reps step adjustment  perc_1RM #> 1  grinding normal    1   -3      0.775 0.7500242 #> 2  grinding normal    2   -3      0.775 0.7266079 #> 3  grinding normal    3   -3      0.775 0.7046095 #> 4  grinding normal    4   -3      0.775 0.6839040 #> 5  grinding normal    5   -3      0.775 0.6643806 #> 6  grinding normal    6   -3      0.775 0.6459410 #> 7  grinding normal    7   -3      0.775 0.6284973 #> 8  grinding normal    8   -3      0.775 0.6119709 #> 9  grinding normal    9   -3      0.775 0.5962915 #> 10 grinding normal   10   -3      0.775 0.5813953 #> 11 grinding normal   11   -3      0.775 0.5672254 #> 12 grinding normal   12   -3      0.775 0.5537296 #> 13 grinding normal    1   -2      0.825 0.7984129 #> 14 grinding normal    2   -2      0.825 0.7734858 #> 15 grinding normal    3   -2      0.825 0.7500682 #> 16 grinding normal    4   -2      0.825 0.7280268 #> 17 grinding normal    5   -2      0.825 0.7072439 #> 18 grinding normal    6   -2      0.825 0.6876146 #> 19 grinding normal    7   -2      0.825 0.6690455 #> 20 grinding normal    8   -2      0.825 0.6514529 #> 21 grinding normal    9   -2      0.825 0.6347619 #> 22 grinding normal   10   -2      0.825 0.6189047 #> 23 grinding normal   11   -2      0.825 0.6038205 #> 24 grinding normal   12   -2      0.825 0.5894541 #> 25 grinding normal    1   -1      0.875 0.8468015 #> 26 grinding normal    2   -1      0.875 0.8203638 #> 27 grinding normal    3   -1      0.875 0.7955269 #> 28 grinding normal    4   -1      0.875 0.7721497 #> 29 grinding normal    5   -1      0.875 0.7501072 #> 30 grinding normal    6   -1      0.875 0.7292882 #> 31 grinding normal    7   -1      0.875 0.7095937 #> 32 grinding normal    8   -1      0.875 0.6909349 #> 33 grinding normal    9   -1      0.875 0.6732323 #> 34 grinding normal   10   -1      0.875 0.6564141 #> 35 grinding normal   11   -1      0.875 0.6404157 #> 36 grinding normal   12   -1      0.875 0.6251786 #> 37 grinding normal    1    0      0.925 0.8951902 #> 38 grinding normal    2    0      0.925 0.8672417 #> 39 grinding normal    3    0      0.925 0.8409855 #> 40 grinding normal    4    0      0.925 0.8162725 #> 41 grinding normal    5    0      0.925 0.7929704 #> 42 grinding normal    6    0      0.925 0.7709618 #> 43 grinding normal    7    0      0.925 0.7501419 #> 44 grinding normal    8    0      0.925 0.7304169 #> 45 grinding normal    9    0      0.925 0.7117027 #> 46 grinding normal   10    0      0.925 0.6939235 #> 47 grinding normal   11    0      0.925 0.6770109 #> 48 grinding normal   12    0      0.925 0.6609031 generate_progression_table(progression_rel_int, step_increment = -0.1, volume_increment = 0.15) #>          type    volume reps step adjustment  perc_1RM #> 1    grinding intensive    1   -3       0.70 0.6774412 #> 2   ballistic intensive    1   -3       0.70 0.6562910 #> 3    grinding    normal    1   -3       0.85 0.8226072 #> 4   ballistic    normal    1   -3       0.85 0.7969248 #> 5    grinding extensive    1   -3       1.00 0.9677732 #> 6   ballistic extensive    1   -3       1.00 0.9375586 #> 7    grinding intensive    2   -3       0.70 0.6562910 #> 8   ballistic intensive    2   -3       0.70 0.6177197 #> 9    grinding    normal    2   -3       0.85 0.7969248 #> 10  ballistic    normal    2   -3       0.85 0.7500882 #> 11   grinding extensive    2   -3       1.00 0.9375586 #> 12  ballistic extensive    2   -3       1.00 0.8824568 #> 13   grinding intensive    3   -3       0.70 0.6364215 #> 14  ballistic intensive    3   -3       0.70 0.5834306 #> 15   grinding    normal    3   -3       0.85 0.7727975 #> 16  ballistic    normal    3   -3       0.85 0.7084514 #> 17   grinding extensive    3   -3       1.00 0.9091736 #> 18  ballistic extensive    3   -3       1.00 0.8334722 #> 19   grinding intensive    4   -3       0.70 0.6177197 #> 20  ballistic intensive    4   -3       0.70 0.5527479 #> 21   grinding    normal    4   -3       0.85 0.7500882 #> 22  ballistic    normal    4   -3       0.85 0.6711939 #> 23   grinding extensive    4   -3       1.00 0.8824568 #> 24  ballistic extensive    4   -3       1.00 0.7896399 #> 25   grinding intensive    5   -3       0.70 0.6000857 #> 26  ballistic intensive    5   -3       0.70 0.5251313 #> 27   grinding    normal    5   -3       0.85 0.7286755 #> 28  ballistic    normal    5   -3       0.85 0.6376594 #> 29   grinding extensive    5   -3       1.00 0.8572653 #> 30  ballistic extensive    5   -3       1.00 0.7501875 #> 31   grinding intensive    6   -3       0.70 0.5834306 #> 32  ballistic intensive    6   -3       0.70 0.5001429 #> 33   grinding    normal    6   -3       0.85 0.7084514 #> 34  ballistic    normal    6   -3       0.85 0.6073164 #> 35   grinding extensive    6   -3       1.00 0.8334722 #> 36  ballistic extensive    6   -3       1.00 0.7144899 #> 37   grinding intensive    7   -3       0.70 0.5676750 #> 38  ballistic intensive    7   -3       0.70 0.4774246 #> 39   grinding    normal    7   -3       0.85 0.6893196 #> 40  ballistic    normal    7   -3       0.85 0.5797299 #> 41   grinding extensive    7   -3       1.00 0.8109642 #> 42  ballistic extensive    7   -3       1.00 0.6820352 #> 43   grinding intensive    8   -3       0.70 0.5527479 #> 44  ballistic intensive    8   -3       0.70 0.4566806 #> 45   grinding    normal    8   -3       0.85 0.6711939 #> 46  ballistic    normal    8   -3       0.85 0.5545407 #> 47   grinding extensive    8   -3       1.00 0.7896399 #> 48  ballistic extensive    8   -3       1.00 0.6524008 #> 49   grinding intensive    9   -3       0.70 0.5385858 #> 50  ballistic intensive    9   -3       0.70 0.4376641 #> 51   grinding    normal    9   -3       0.85 0.6539971 #> 52  ballistic    normal    9   -3       0.85 0.5314493 #> 53   grinding extensive    9   -3       1.00 0.7694083 #> 54  ballistic extensive    9   -3       1.00 0.6252345 #> 55   grinding intensive   10   -3       0.70 0.5251313 #> 56  ballistic intensive   10   -3       0.70 0.4201681 #> 57   grinding    normal   10   -3       0.85 0.6376594 #> 58  ballistic    normal   10   -3       0.85 0.5102041 #> 59   grinding extensive   10   -3       1.00 0.7501875 #> 60  ballistic extensive   10   -3       1.00 0.6002401 #> 61   grinding intensive   11   -3       0.70 0.5123326 #> 62  ballistic intensive   11   -3       0.70 0.4040171 #> 63   grinding    normal   11   -3       0.85 0.6221181 #> 64  ballistic    normal   11   -3       0.85 0.4905922 #> 65   grinding extensive   11   -3       1.00 0.7319037 #> 66  ballistic extensive   11   -3       1.00 0.5771673 #> 67   grinding intensive   12   -3       0.70 0.5001429 #> 68  ballistic intensive   12   -3       0.70 0.3890618 #> 69   grinding    normal   12   -3       0.85 0.6073164 #> 70  ballistic    normal   12   -3       0.85 0.4724322 #> 71   grinding extensive   12   -3       1.00 0.7144899 #> 72  ballistic extensive   12   -3       1.00 0.5558026 #> 73   grinding intensive    1   -2       0.80 0.7742185 #> 74  ballistic intensive    1   -2       0.80 0.7500469 #> 75   grinding    normal    1   -2       0.95 0.9193845 #> 76  ballistic    normal    1   -2       0.95 0.8906807 #> 77   grinding extensive    1   -2       1.10 1.0645505 #> 78  ballistic extensive    1   -2       1.10 1.0313145 #> 79   grinding intensive    2   -2       0.80 0.7500469 #> 80  ballistic intensive    2   -2       0.80 0.7059654 #> 81   grinding    normal    2   -2       0.95 0.8906807 #> 82  ballistic    normal    2   -2       0.95 0.8383339 #> 83   grinding extensive    2   -2       1.10 1.0313145 #> 84  ballistic extensive    2   -2       1.10 0.9707024 #> 85   grinding intensive    3   -2       0.80 0.7273388 #> 86  ballistic intensive    3   -2       0.80 0.6667778 #> 87   grinding    normal    3   -2       0.95 0.8637149 #> 88  ballistic    normal    3   -2       0.95 0.7917986 #> 89   grinding extensive    3   -2       1.10 1.0000909 #> 90  ballistic extensive    3   -2       1.10 0.9168195 #> 91   grinding intensive    4   -2       0.80 0.7059654 #> 92  ballistic intensive    4   -2       0.80 0.6317119 #> 93   grinding    normal    4   -2       0.95 0.8383339 #> 94  ballistic    normal    4   -2       0.95 0.7501579 #> 95   grinding extensive    4   -2       1.10 0.9707024 #> 96  ballistic extensive    4   -2       1.10 0.8686039 #> 97   grinding intensive    5   -2       0.80 0.6858123 #> 98  ballistic intensive    5   -2       0.80 0.6001500 #> 99   grinding    normal    5   -2       0.95 0.8144021 #> 100 ballistic    normal    5   -2       0.95 0.7126782 #> 101  grinding extensive    5   -2       1.10 0.9429919 #> 102 ballistic extensive    5   -2       1.10 0.8252063 #> 103  grinding intensive    6   -2       0.80 0.6667778 #> 104 ballistic intensive    6   -2       0.80 0.5715919 #> 105  grinding    normal    6   -2       0.95 0.7917986 #> 106 ballistic    normal    6   -2       0.95 0.6787654 #> 107  grinding extensive    6   -2       1.10 0.9168195 #> 108 ballistic extensive    6   -2       1.10 0.7859388 #> 109  grinding intensive    7   -2       0.80 0.6487714 #> 110 ballistic intensive    7   -2       0.80 0.5456282 #> 111  grinding    normal    7   -2       0.95 0.7704160 #> 112 ballistic    normal    7   -2       0.95 0.6479334 #> 113  grinding extensive    7   -2       1.10 0.8920607 #> 114 ballistic extensive    7   -2       1.10 0.7502387 #> 115  grinding intensive    8   -2       0.80 0.6317119 #> 116 ballistic intensive    8   -2       0.80 0.5219207 #> 117  grinding    normal    8   -2       0.95 0.7501579 #> 118 ballistic    normal    8   -2       0.95 0.6197808 #> 119  grinding extensive    8   -2       1.10 0.8686039 #> 120 ballistic extensive    8   -2       1.10 0.7176409 #> 121  grinding intensive    9   -2       0.80 0.6155267 #> 122 ballistic intensive    9   -2       0.80 0.5001876 #> 123  grinding    normal    9   -2       0.95 0.7309379 #> 124 ballistic    normal    9   -2       0.95 0.5939727 #> 125  grinding extensive    9   -2       1.10 0.8463492 #> 126 ballistic extensive    9   -2       1.10 0.6877579 #> 127  grinding intensive   10   -2       0.80 0.6001500 #> 128 ballistic intensive   10   -2       0.80 0.4801921 #> 129  grinding    normal   10   -2       0.95 0.7126782 #> 130 ballistic    normal   10   -2       0.95 0.5702281 #> 131  grinding extensive   10   -2       1.10 0.8252063 #> 132 ballistic extensive   10   -2       1.10 0.6602641 #> 133  grinding intensive   11   -2       0.80 0.5855229 #> 134 ballistic intensive   11   -2       0.80 0.4617338 #> 135  grinding    normal   11   -2       0.95 0.6953085 #> 136 ballistic    normal   11   -2       0.95 0.5483089 #> 137  grinding extensive   11   -2       1.10 0.8050940 #> 138 ballistic extensive   11   -2       1.10 0.6348840 #> 139  grinding intensive   12   -2       0.80 0.5715919 #> 140 ballistic intensive   12   -2       0.80 0.4446421 #> 141  grinding    normal   12   -2       0.95 0.6787654 #> 142 ballistic    normal   12   -2       0.95 0.5280124 #> 143  grinding extensive   12   -2       1.10 0.7859388 #> 144 ballistic extensive   12   -2       1.10 0.6113828 #> 145  grinding intensive    1   -1       0.90 0.8709958 #> 146 ballistic intensive    1   -1       0.90 0.8438027 #> 147  grinding    normal    1   -1       1.05 1.0161618 #> 148 ballistic    normal    1   -1       1.05 0.9844365 #> 149  grinding extensive    1   -1       1.20 1.1613278 #> 150 ballistic extensive    1   -1       1.20 1.1250703 #> 151  grinding intensive    2   -1       0.90 0.8438027 #> 152 ballistic intensive    2   -1       0.90 0.7942111 #> 153  grinding    normal    2   -1       1.05 0.9844365 #> 154 ballistic    normal    2   -1       1.05 0.9265796 #> 155  grinding extensive    2   -1       1.20 1.1250703 #> 156 ballistic extensive    2   -1       1.20 1.0589481 #> 157  grinding intensive    3   -1       0.90 0.8182562 #> 158 ballistic intensive    3   -1       0.90 0.7501250 #> 159  grinding    normal    3   -1       1.05 0.9546322 #> 160 ballistic    normal    3   -1       1.05 0.8751459 #> 161  grinding extensive    3   -1       1.20 1.0910083 #> 162 ballistic extensive    3   -1       1.20 1.0001667 #> 163  grinding intensive    4   -1       0.90 0.7942111 #> 164 ballistic intensive    4   -1       0.90 0.7106759 #> 165  grinding    normal    4   -1       1.05 0.9265796 #> 166 ballistic    normal    4   -1       1.05 0.8291219 #> 167  grinding extensive    4   -1       1.20 1.0589481 #> 168 ballistic extensive    4   -1       1.20 0.9475679 #> 169  grinding intensive    5   -1       0.90 0.7715388 #> 170 ballistic intensive    5   -1       0.90 0.6751688 #> 171  grinding    normal    5   -1       1.05 0.9001286 #> 172 ballistic    normal    5   -1       1.05 0.7876969 #> 173  grinding extensive    5   -1       1.20 1.0287184 #> 174 ballistic extensive    5   -1       1.20 0.9002251 #> 175  grinding intensive    6   -1       0.90 0.7501250 #> 176 ballistic intensive    6   -1       0.90 0.6430409 #> 177  grinding    normal    6   -1       1.05 0.8751459 #> 178 ballistic    normal    6   -1       1.05 0.7502143 #> 179  grinding extensive    6   -1       1.20 1.0001667 #> 180 ballistic extensive    6   -1       1.20 0.8573878 #> 181  grinding intensive    7   -1       0.90 0.7298678 #> 182 ballistic intensive    7   -1       0.90 0.6138317 #> 183  grinding    normal    7   -1       1.05 0.8515124 #> 184 ballistic    normal    7   -1       1.05 0.7161370 #> 185  grinding extensive    7   -1       1.20 0.9731571 #> 186 ballistic extensive    7   -1       1.20 0.8184422 #> 187  grinding intensive    8   -1       0.90 0.7106759 #> 188 ballistic intensive    8   -1       0.90 0.5871608 #> 189  grinding    normal    8   -1       1.05 0.8291219 #> 190 ballistic    normal    8   -1       1.05 0.6850209 #> 191  grinding extensive    8   -1       1.20 0.9475679 #> 192 ballistic extensive    8   -1       1.20 0.7828810 #> 193  grinding intensive    9   -1       0.90 0.6924675 #> 194 ballistic intensive    9   -1       0.90 0.5627110 #> 195  grinding    normal    9   -1       1.05 0.8078787 #> 196 ballistic    normal    9   -1       1.05 0.6564962 #> 197  grinding extensive    9   -1       1.20 0.9232900 #> 198 ballistic extensive    9   -1       1.20 0.7502814 #> 199  grinding intensive   10   -1       0.90 0.6751688 #> 200 ballistic intensive   10   -1       0.90 0.5402161 #> 201  grinding    normal   10   -1       1.05 0.7876969 #> 202 ballistic    normal   10   -1       1.05 0.6302521 #> 203  grinding extensive   10   -1       1.20 0.9002251 #> 204 ballistic extensive   10   -1       1.20 0.7202881 #> 205  grinding intensive   11   -1       0.90 0.6587133 #> 206 ballistic intensive   11   -1       0.90 0.5194505 #> 207  grinding    normal   11   -1       1.05 0.7684989 #> 208 ballistic    normal   11   -1       1.05 0.6060256 #> 209  grinding extensive   11   -1       1.20 0.8782844 #> 210 ballistic extensive   11   -1       1.20 0.6926007 #> 211  grinding intensive   12   -1       0.90 0.6430409 #> 212 ballistic intensive   12   -1       0.90 0.5002223 #> 213  grinding    normal   12   -1       1.05 0.7502143 #> 214 ballistic    normal   12   -1       1.05 0.5835927 #> 215  grinding extensive   12   -1       1.20 0.8573878 #> 216 ballistic extensive   12   -1       1.20 0.6669631 #> 217  grinding intensive    1    0       1.00 0.9677732 #> 218 ballistic intensive    1    0       1.00 0.9375586 #> 219  grinding    normal    1    0       1.15 1.1129391 #> 220 ballistic    normal    1    0       1.15 1.0781924 #> 221  grinding extensive    1    0       1.30 1.2581051 #> 222 ballistic extensive    1    0       1.30 1.2188262 #> 223  grinding intensive    2    0       1.00 0.9375586 #> 224 ballistic intensive    2    0       1.00 0.8824568 #> 225  grinding    normal    2    0       1.15 1.0781924 #> 226 ballistic    normal    2    0       1.15 1.0148253 #> 227  grinding extensive    2    0       1.30 1.2188262 #> 228 ballistic extensive    2    0       1.30 1.1471938 #> 229  grinding intensive    3    0       1.00 0.9091736 #> 230 ballistic intensive    3    0       1.00 0.8334722 #> 231  grinding    normal    3    0       1.15 1.0455496 #> 232 ballistic    normal    3    0       1.15 0.9584931 #> 233  grinding extensive    3    0       1.30 1.1819256 #> 234 ballistic extensive    3    0       1.30 1.0835139 #> 235  grinding intensive    4    0       1.00 0.8824568 #> 236 ballistic intensive    4    0       1.00 0.7896399 #> 237  grinding    normal    4    0       1.15 1.0148253 #> 238 ballistic    normal    4    0       1.15 0.9080859 #> 239  grinding extensive    4    0       1.30 1.1471938 #> 240 ballistic extensive    4    0       1.30 1.0265319 #> 241  grinding intensive    5    0       1.00 0.8572653 #> 242 ballistic intensive    5    0       1.00 0.7501875 #> 243  grinding    normal    5    0       1.15 0.9858551 #> 244 ballistic    normal    5    0       1.15 0.8627157 #> 245  grinding extensive    5    0       1.30 1.1144449 #> 246 ballistic extensive    5    0       1.30 0.9752438 #> 247  grinding intensive    6    0       1.00 0.8334722 #> 248 ballistic intensive    6    0       1.00 0.7144899 #> 249  grinding    normal    6    0       1.15 0.9584931 #> 250 ballistic    normal    6    0       1.15 0.8216633 #> 251  grinding extensive    6    0       1.30 1.0835139 #> 252 ballistic extensive    6    0       1.30 0.9288368 #> 253  grinding intensive    7    0       1.00 0.8109642 #> 254 ballistic intensive    7    0       1.00 0.6820352 #> 255  grinding    normal    7    0       1.15 0.9326089 #> 256 ballistic    normal    7    0       1.15 0.7843405 #> 257  grinding extensive    7    0       1.30 1.0542535 #> 258 ballistic extensive    7    0       1.30 0.8866458 #> 259  grinding intensive    8    0       1.00 0.7896399 #> 260 ballistic intensive    8    0       1.00 0.6524008 #> 261  grinding    normal    8    0       1.15 0.9080859 #> 262 ballistic    normal    8    0       1.15 0.7502610 #> 263  grinding extensive    8    0       1.30 1.0265319 #> 264 ballistic extensive    8    0       1.30 0.8481211 #> 265  grinding intensive    9    0       1.00 0.7694083 #> 266 ballistic intensive    9    0       1.00 0.6252345 #> 267  grinding    normal    9    0       1.15 0.8848196 #> 268 ballistic    normal    9    0       1.15 0.7190196 #> 269  grinding extensive    9    0       1.30 1.0002308 #> 270 ballistic extensive    9    0       1.30 0.8128048 #> 271  grinding intensive   10    0       1.00 0.7501875 #> 272 ballistic intensive   10    0       1.00 0.6002401 #> 273  grinding    normal   10    0       1.15 0.8627157 #> 274 ballistic    normal   10    0       1.15 0.6902761 #> 275  grinding extensive   10    0       1.30 0.9752438 #> 276 ballistic extensive   10    0       1.30 0.7803121 #> 277  grinding intensive   11    0       1.00 0.7319037 #> 278 ballistic intensive   11    0       1.00 0.5771673 #> 279  grinding    normal   11    0       1.15 0.8416892 #> 280 ballistic    normal   11    0       1.15 0.6637424 #> 281  grinding extensive   11    0       1.30 0.9514748 #> 282 ballistic extensive   11    0       1.30 0.7503174 #> 283  grinding intensive   12    0       1.00 0.7144899 #> 284 ballistic intensive   12    0       1.00 0.5558026 #> 285  grinding    normal   12    0       1.15 0.8216633 #> 286 ballistic    normal   12    0       1.15 0.6391730 #> 287  grinding extensive   12    0       1.30 0.9288368 #> 288 ballistic extensive   12    0       1.30 0.7225434  # Use different reps-max model generate_progression_table(   progression_rel_int,   type = \"grinding\",   volume = \"normal\",   max_perc_1RM_func = max_perc_1RM_linear,   klin = 36 ) #>        type volume reps step adjustment  perc_1RM #> 1  grinding normal    1   -3      0.775 0.7750000 #> 2  grinding normal    2   -3      0.775 0.7534722 #> 3  grinding normal    3   -3      0.775 0.7319444 #> 4  grinding normal    4   -3      0.775 0.7104167 #> 5  grinding normal    5   -3      0.775 0.6888889 #> 6  grinding normal    6   -3      0.775 0.6673611 #> 7  grinding normal    7   -3      0.775 0.6458333 #> 8  grinding normal    8   -3      0.775 0.6243056 #> 9  grinding normal    9   -3      0.775 0.6027778 #> 10 grinding normal   10   -3      0.775 0.5812500 #> 11 grinding normal   11   -3      0.775 0.5597222 #> 12 grinding normal   12   -3      0.775 0.5381944 #> 13 grinding normal    1   -2      0.825 0.8250000 #> 14 grinding normal    2   -2      0.825 0.8020833 #> 15 grinding normal    3   -2      0.825 0.7791667 #> 16 grinding normal    4   -2      0.825 0.7562500 #> 17 grinding normal    5   -2      0.825 0.7333333 #> 18 grinding normal    6   -2      0.825 0.7104167 #> 19 grinding normal    7   -2      0.825 0.6875000 #> 20 grinding normal    8   -2      0.825 0.6645833 #> 21 grinding normal    9   -2      0.825 0.6416667 #> 22 grinding normal   10   -2      0.825 0.6187500 #> 23 grinding normal   11   -2      0.825 0.5958333 #> 24 grinding normal   12   -2      0.825 0.5729167 #> 25 grinding normal    1   -1      0.875 0.8750000 #> 26 grinding normal    2   -1      0.875 0.8506944 #> 27 grinding normal    3   -1      0.875 0.8263889 #> 28 grinding normal    4   -1      0.875 0.8020833 #> 29 grinding normal    5   -1      0.875 0.7777778 #> 30 grinding normal    6   -1      0.875 0.7534722 #> 31 grinding normal    7   -1      0.875 0.7291667 #> 32 grinding normal    8   -1      0.875 0.7048611 #> 33 grinding normal    9   -1      0.875 0.6805556 #> 34 grinding normal   10   -1      0.875 0.6562500 #> 35 grinding normal   11   -1      0.875 0.6319444 #> 36 grinding normal   12   -1      0.875 0.6076389 #> 37 grinding normal    1    0      0.925 0.9250000 #> 38 grinding normal    2    0      0.925 0.8993056 #> 39 grinding normal    3    0      0.925 0.8736111 #> 40 grinding normal    4    0      0.925 0.8479167 #> 41 grinding normal    5    0      0.925 0.8222222 #> 42 grinding normal    6    0      0.925 0.7965278 #> 43 grinding normal    7    0      0.925 0.7708333 #> 44 grinding normal    8    0      0.925 0.7451389 #> 45 grinding normal    9    0      0.925 0.7194444 #> 46 grinding normal   10    0      0.925 0.6937500 #> 47 grinding normal   11    0      0.925 0.6680556 #> 48 grinding normal   12    0      0.925 0.6423611"},{"path":"https://mladenjovanovic.github.io/STMr/reference/release.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Release period — release","title":"Create a Release period — release","text":"Release combines multiple schemes together prescription_1RM, additive_1RM_adjustment, multiplicative_1RM_adjustment parameters calculate working weight, load_1RM, buffer","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/release.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Release period — release","text":"","code":"release(   ...,   prescription_1RM = 100,   additive_1RM_adjustment = 2.5,   multiplicative_1RM_adjustment = 1,   rounding = 2.5,   max_perc_1RM_func = max_perc_1RM_epley )"},{"path":"https://mladenjovanovic.github.io/STMr/reference/release.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Release period — release","text":"... STMr_scheme objects create scheme_ functions prescription_1RM Initial prescription planning 1RM calculate weight Default 100 additive_1RM_adjustment Additive 1RM adjustment across phases. Default 2.5 multiplicative_1RM_adjustment multiplicative 1RM adjustment across phases. Default 1 (.e., adjustment) rounding Rounding calculated weight. Default 2.5 max_perc_1RM_func Max Perc 1RM function use calculating load_1RM. Default max_perc_1RM_epley","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/release.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Release period — release","text":"STMr_relase data frame","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/release.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Release period — release","text":"","code":"scheme1 <- scheme_step(vertical_planning = vertical_constant) scheme2 <- scheme_step(vertical_planning = vertical_linear) scheme3 <- scheme_step(vertical_planning = vertical_undulating)  release_df <- release(   scheme1, scheme2, scheme3,   additive_1RM_adjustment = 2.5 )  plot(release_df)"},{"path":"https://mladenjovanovic.github.io/STMr/reference/set_and_reps_schemes.html","id":null,"dir":"Reference","previous_headings":"","what":"Set and Rep Schemes — set_and_reps_schemes","title":"Set and Rep Schemes — set_and_reps_schemes","text":"Set Rep Schemes","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/set_and_reps_schemes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set and Rep Schemes — set_and_reps_schemes","text":"","code":"scheme_generic(   reps,   adjustment,   vertical_planning,   vertical_planning_control = list(),   progression_table,   progression_table_control = list() )  scheme_wave(   reps = c(10, 8, 6),   adjustment = -rev((seq_along(reps) - 1) * 5)/100,   vertical_planning = vertical_constant,   vertical_planning_control = list(),   progression_table = progression_perc_drop,   progression_table_control = list(volume = \"normal\") )  scheme_plateau(   reps = c(5, 5, 5),   vertical_planning = vertical_constant,   vertical_planning_control = list(),   progression_table = progression_perc_drop,   progression_table_control = list(volume = \"normal\") )  scheme_step(   reps = c(5, 5, 5),   adjustment = -rev((seq_along(reps) - 1) * 10)/100,   vertical_planning = vertical_constant,   vertical_planning_control = list(),   progression_table = progression_perc_drop,   progression_table_control = list(volume = \"intensive\") )  scheme_step_reverse(   reps = c(5, 5, 5),   adjustment = -((seq_along(reps) - 1) * 10)/100,   vertical_planning = vertical_constant,   vertical_planning_control = list(),   progression_table = progression_perc_drop,   progression_table_control = list(volume = \"intensive\") )  scheme_wave_descending(   reps = c(6, 8, 10),   adjustment = -rev((seq_along(reps) - 1) * 5)/100,   vertical_planning = vertical_constant,   vertical_planning_control = list(),   progression_table = progression_perc_drop,   progression_table_control = list(volume = \"normal\") )  scheme_light_heavy(   reps = c(10, 5, 10, 5),   adjustment = c(-0.1, 0)[(seq_along(reps)%%2) + 1],   vertical_planning = vertical_constant,   vertical_planning_control = list(),   progression_table = progression_perc_drop,   progression_table_control = list(volume = \"normal\") )  scheme_pyramid(   reps = c(12, 10, 8, 10, 12),   adjustment = 0,   vertical_planning = vertical_constant,   vertical_planning_control = list(),   progression_table = progression_perc_drop,   progression_table_control = list(volume = \"extensive\") )  scheme_pyramid_reverse(   reps = c(8, 10, 12, 10, 8),   adjustment = 0,   vertical_planning = vertical_constant,   vertical_planning_control = list(),   progression_table = progression_perc_drop,   progression_table_control = list(volume = \"extensive\") )  scheme_rep_acc(   reps = c(10, 10, 10),   adjustment = 0,   vertical_planning_control = list(step = rep(0, 4)),   progression_table = progression_perc_drop,   progression_table_control = list(volume = \"normal\") )  scheme_ladder(   reps = c(3, 5, 10),   adjustment = 0,   vertical_planning = vertical_constant,   vertical_planning_control = list(),   progression_table = progression_perc_drop,   progression_table_control = list(volume = \"normal\") )  scheme_manual(   index = NULL,   step,   sets = 1,   reps,   adjustment = 0,   perc_1RM = NULL,   progression_table = progression_perc_drop,   progression_table_control = list(volume = \"normal\") )  scheme_perc_1RM(reps = c(5, 5, 5), perc_1RM = c(0.4, 0.5, 0.6), n_steps = 4)"},{"path":"https://mladenjovanovic.github.io/STMr/reference/set_and_reps_schemes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set and Rep Schemes — set_and_reps_schemes","text":"reps Numeric vector indicating reps prescription adjustment Numeric vector indicating adjustments. Forwarded progression_table. vertical_planning Vertical planning function. Default vertical_constant vertical_planning_control Arguments forwarded vertical_planning function progression_table Progression table function. Default progression_perc_drop progression_table_control Arguments forwarded progression_table function index Numeric vector. provided, index create using sequence step step Numeric vector sets Numeric vector. Used replicate reps adjustments perc_1RM Numeric vector user provided 1RM percentage n_steps many progression steps generate? Default 4","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/set_and_reps_schemes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set and Rep Schemes — set_and_reps_schemes","text":"Data frame following columns: reps, index, step, adjustment, perc_1RM.","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/set_and_reps_schemes.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Set and Rep Schemes — set_and_reps_schemes","text":"scheme_generic(): Generic set rep scheme. scheme_generic called set rep schemes - default parameters differ make easier quicker schemes writing groupings scheme_wave(): Wave set rep scheme scheme_plateau(): Plateau set rep scheme scheme_step(): Step set rep scheme scheme_step_reverse(): Reverse Step set rep scheme scheme_wave_descending(): Descending Wave set rep scheme scheme_light_heavy(): Light-Heavy set rep scheme. Please note adjustment column output wrong, hence set NA scheme_pyramid(): Pyramid set rep scheme scheme_pyramid_reverse(): Reverse Pyramid set rep scheme scheme_rep_acc(): Rep Accumulation set rep scheme scheme_ladder(): Ladder set rep scheme. Please note adjustment column output wrong, hence set NA scheme_manual(): Manual set rep scheme scheme_perc_1RM(): Manual %1RM set rep scheme","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/set_and_reps_schemes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set and Rep Schemes — set_and_reps_schemes","text":"","code":"scheme_generic(   reps = c(8, 6, 4, 8, 6, 4),   # Adjusting using lower %1RM (RIR Increment method used)   adjustment = c(4, 2, 0, 6, 4, 2),   vertical_planning = vertical_linear,   vertical_planning_control = list(reps_change = c(0, -2, -4)),   progression_table = progression_RIR_increment,   progression_table_control = list(volume = \"extensive\") ) #>    index step set reps adjustment  perc_1RM #> 1      1   -2   1    8  11.818182 0.6024294 #> 2      1   -2   2    6   8.727273 0.6709526 #> 3      1   -2   3    4   5.636364 0.7570648 #> 4      1   -2   4    8  13.818182 0.5791912 #> 5      1   -2   5    6  10.727273 0.6422533 #> 6      1   -2   6    4   7.636364 0.7207254 #> 7      2   -1   1    6   9.272727 0.6628742 #> 8      2   -1   2    4   6.363636 0.7434341 #> 9      2   -1   3    2   3.454545 0.8462840 #> 10     2   -1   4    6  11.272727 0.6348473 #> 11     2   -1   5    4   8.363636 0.7083612 #> 12     2   -1   6    2   5.454545 0.8011303 #> 13     3    0   1    4   7.090909 0.7302856 #> 14     3    0   2    2   4.363636 0.8251444 #> 15     3    0   3    0   1.636364 0.9483249 #> 16     3    0   4    4   9.090909 0.6964141 #> 17     3    0   5    2   6.363636 0.7821610 #> 18     3    0   6    0   3.636364 0.8919883  # Wave set and rep schemes # -------------------------- scheme_wave() #>    index step set reps  adjustment  perc_1RM #> 1      1   -3   1   10 -0.28181818 0.4683694 #> 2      1   -3   2    8 -0.21363636 0.5760036 #> 3      1   -3   3    6 -0.14545455 0.6880177 #> 4      2   -2   1   10 -0.23636364 0.5138239 #> 5      2   -2   2    8 -0.17272727 0.6169127 #> 6      2   -2   3    6 -0.10909091 0.7243813 #> 7      3   -1   1   10 -0.19090909 0.5592785 #> 8      3   -1   2    8 -0.13181818 0.6578217 #> 9      3   -1   3    6 -0.07272727 0.7607450 #> 10     4    0   1   10 -0.14545455 0.6047330 #> 11     4    0   2    8 -0.09090909 0.6987308 #> 12     4    0   3    6 -0.03636364 0.7971086  scheme_wave(   reps = c(8, 6, 4, 8, 6, 4),   # Second wave with higher intensity   adjustment = c(-0.25, -0.15, 0.05, -0.2, -0.1, 0),   vertical_planning = vertical_block,   progression_table = progression_perc_drop,   progression_table_control = list(type = \"ballistic\") ) #>    index step set reps adjustment  perc_1RM #> 1      1   -2   1    8    -0.4125 0.2399008 #> 2      1   -2   2    6    -0.2875 0.4269899 #> 3      1   -2   3    4    -0.0625 0.7271399 #> 4      1   -2   4    8    -0.3625 0.2899008 #> 5      1   -2   5    6    -0.2375 0.4769899 #> 6      1   -2   6    4    -0.1125 0.6771399 #> 7      2   -1   1    8    -0.3525 0.2999008 #> 8      2   -1   2    6    -0.2375 0.4769899 #> 9      2   -1   3    4    -0.0225 0.7671399 #> 10     2   -1   4    8    -0.3025 0.3499008 #> 11     2   -1   5    6    -0.1875 0.5269899 #> 12     2   -1   6    4    -0.0725 0.7171399 #> 13     3    0   1    8    -0.2925 0.3599008 #> 14     3    0   2    6    -0.1875 0.5269899 #> 15     3    0   3    4     0.0175 0.8071399 #> 16     3    0   4    8    -0.2425 0.4099008 #> 17     3    0   5    6    -0.1375 0.5769899 #> 18     3    0   6    4    -0.0325 0.7571399 #> 19     4   -3   1    8    -0.4725 0.1799008 #> 20     4   -3   2    6    -0.3375 0.3769899 #> 21     4   -3   3    4    -0.1025 0.6871399 #> 22     4   -3   4    8    -0.4225 0.2299008 #> 23     4   -3   5    6    -0.2875 0.4269899 #> 24     4   -3   6    4    -0.1525 0.6371399  # Adjusted second wave # and using 3 steps progression scheme_wave(   reps = c(8, 6, 4, 8, 6, 4),   # Adjusting using lower %1RM (progression_perc_drop method used)   adjustment = c(0, 0, 0, -0.1, -0.1, -0.1),   vertical_planning = vertical_linear,   vertical_planning_control = list(reps_change = c(0, -2, -4)),   progression_table = progression_perc_drop,   progression_table_control = list(volume = \"extensive\") ) #>    index step set reps  adjustment  perc_1RM #> 1      1   -2   1    8 -0.16363636 0.6260036 #> 2      1   -2   2    6 -0.14545455 0.6880177 #> 3      1   -2   3    4 -0.12727273 0.7551840 #> 4      1   -2   4    8 -0.26363636 0.5260036 #> 5      1   -2   5    6 -0.24545455 0.5880177 #> 6      1   -2   6    4 -0.22727273 0.6551840 #> 7      2   -1   1    6 -0.10909091 0.7243813 #> 8      2   -1   2    4 -0.09545455 0.7870022 #> 9      2   -1   3    2 -0.08181818 0.8557404 #> 10     2   -1   4    6 -0.20909091 0.6243813 #> 11     2   -1   5    4 -0.19545455 0.6870022 #> 12     2   -1   6    2 -0.18181818 0.7557404 #> 13     3    0   1    4 -0.06363636 0.8188204 #> 14     3    0   2    2 -0.05454545 0.8830131 #> 15     3    0   3    0 -0.04545455 0.9545455 #> 16     3    0   4    4 -0.16363636 0.7188204 #> 17     3    0   5    2 -0.15454545 0.7830131 #> 18     3    0   6    0 -0.14545455 0.8545455  # Adjusted using RIR inc # This time we adjust first wave as well, first two sets easier scheme <- scheme_wave(   reps = c(8, 6, 4, 8, 6, 4),   # Adjusting using lower %1RM (RIR Increment method used)   adjustment = c(4, 2, 0, 6, 4, 2),   vertical_planning = vertical_linear,   vertical_planning_control = list(reps_change = c(0, -2, -4)),   progression_table = progression_RIR_increment,   progression_table_control = list(volume = \"extensive\") ) plot(scheme)   # Plateau set and rep schemes # -------------------------- scheme_plateau() #>    index step set reps  adjustment  perc_1RM #> 1      1   -3   1    5 -0.13636364 0.7209017 #> 2      1   -3   2    5 -0.13636364 0.7209017 #> 3      1   -3   3    5 -0.13636364 0.7209017 #> 4      2   -2   1    5 -0.10227273 0.7549926 #> 5      2   -2   2    5 -0.10227273 0.7549926 #> 6      2   -2   3    5 -0.10227273 0.7549926 #> 7      3   -1   1    5 -0.06818182 0.7890835 #> 8      3   -1   2    5 -0.06818182 0.7890835 #> 9      3   -1   3    5 -0.06818182 0.7890835 #> 10     4    0   1    5 -0.03409091 0.8231744 #> 11     4    0   2    5 -0.03409091 0.8231744 #> 12     4    0   3    5 -0.03409091 0.8231744  scheme <- scheme_plateau(   reps = c(3, 3, 3),   progression_table_control = list(type = \"ballistic\") ) plot(scheme)   # Step set and rep schemes # -------------------------- scheme_step() #>    index step set reps  adjustment  perc_1RM #> 1      1   -3   1    5 -0.30227273 0.5549926 #> 2      1   -3   2    5 -0.20227273 0.6549926 #> 3      1   -3   3    5 -0.10227273 0.7549926 #> 4      2   -2   1    5 -0.26818182 0.5890835 #> 5      2   -2   2    5 -0.16818182 0.6890835 #> 6      2   -2   3    5 -0.06818182 0.7890835 #> 7      3   -1   1    5 -0.23409091 0.6231744 #> 8      3   -1   2    5 -0.13409091 0.7231744 #> 9      3   -1   3    5 -0.03409091 0.8231744 #> 10     4    0   1    5 -0.20000000 0.6572653 #> 11     4    0   2    5 -0.10000000 0.7572653 #> 12     4    0   3    5  0.00000000 0.8572653  scheme <- scheme_step(   reps = c(2, 2, 2),   adjustment = c(-0.1, -0.05, 0),   vertical_planning = vertical_linear_reverse,   progression_table_control = list(type = \"ballistic\") ) plot(scheme)   # Reverse Step set and rep schemes #- ------------------------- scheme <- scheme_step_reverse() plot(scheme)   # Descending Wave set and rep schemes # -------------------------- scheme <- scheme_wave_descending() plot(scheme)   # Light-Heavy set and rep schemes # -------------------------- scheme <- scheme_light_heavy() plot(scheme)   # Pyramid set and rep schemes # -------------------------- scheme <- scheme_pyramid() plot(scheme)   # Reverse Pyramid set and rep schemes # -------------------------- scheme <- scheme_pyramid_reverse() plot(scheme)   # Rep Accumulation set and rep schemes # -------------------------- scheme_rep_acc() #>    index step set reps  adjustment perc_1RM #> 1      1    0   1    7 -0.04545455 0.704733 #> 2      1    0   2    7 -0.04545455 0.704733 #> 3      1    0   3    7 -0.04545455 0.704733 #> 4      2    0   1    8 -0.04545455 0.704733 #> 5      2    0   2    8 -0.04545455 0.704733 #> 6      2    0   3    8 -0.04545455 0.704733 #> 7      3    0   1    9 -0.04545455 0.704733 #> 8      3    0   2    9 -0.04545455 0.704733 #> 9      3    0   3    9 -0.04545455 0.704733 #> 10     4    0   1   10 -0.04545455 0.704733 #> 11     4    0   2   10 -0.04545455 0.704733 #> 12     4    0   3   10 -0.04545455 0.704733  # Generate Wave scheme with rep accumulation vertical progression # This functions doesn't allow you to use different vertical planning # options scheme <- scheme_rep_acc(reps = c(10, 8, 6), adjustment = c(-0.1, -0.05, 0)) plot(scheme)   # Other options is to use `.vertical_rep_accumulation.post()` and # apply it after # The default vertical progression is `vertical_const()` scheme <- scheme_wave(reps = c(10, 8, 6), adjustment = c(-0.1, -0.05, 0))  .vertical_rep_accumulation.post(scheme) #>    index step set reps adjustment  perc_1RM #> 1      1    0   1    7         NA 0.6047330 #> 2      1    0   2    5         NA 0.6987308 #> 3      1    0   3    3         NA 0.7971086 #> 4      2    0   1    8         NA 0.6047330 #> 5      2    0   2    6         NA 0.6987308 #> 6      2    0   3    4         NA 0.7971086 #> 7      3    0   1    9         NA 0.6047330 #> 8      3    0   2    7         NA 0.6987308 #> 9      3    0   3    5         NA 0.7971086 #> 10     4    0   1   10         NA 0.6047330 #> 11     4    0   2    8         NA 0.6987308 #> 12     4    0   3    6         NA 0.7971086  # We can also create \"undulating\" rep decrements .vertical_rep_accumulation.post(   scheme,   rep_decrement = c(-3, -1, -2, 0) ) #>    index step set reps adjustment  perc_1RM #> 1      1    0   1    7         NA 0.6047330 #> 2      1    0   2    5         NA 0.6987308 #> 3      1    0   3    3         NA 0.7971086 #> 4      2    0   1    9         NA 0.6047330 #> 5      2    0   2    7         NA 0.6987308 #> 6      2    0   3    5         NA 0.7971086 #> 7      3    0   1    8         NA 0.6047330 #> 8      3    0   2    6         NA 0.6987308 #> 9      3    0   3    4         NA 0.7971086 #> 10     4    0   1   10         NA 0.6047330 #> 11     4    0   2    8         NA 0.6987308 #> 12     4    0   3    6         NA 0.7971086  # `scheme_rep_acc` will not allow you to generate `scheme_ladder()` # and `scheme_scheme_light_heavy()` # You must use `.vertical_rep_accumulation.post()` to do so scheme <- scheme_ladder() scheme <- .vertical_rep_accumulation.post(scheme) plot(scheme)   # Please note that reps < 1 are removed. If you do not want this, # use `remove_reps = FALSE` parameter scheme <- scheme_ladder() scheme <- .vertical_rep_accumulation.post(scheme, remove_reps = FALSE) plot(scheme)   # Ladder set and rep schemes # -------------------------- scheme <- scheme_ladder() plot(scheme)   # Manual set and rep schemes # -------------------------- scheme_df <- data.frame(   index = 1, # Use this just as an example   step = c(-3, -2, -1, 0),   # Sets are just an easy way to repeat reps and adjustment   sets = c(5, 4, 3, 2),   reps = c(5, 4, 3, 2),   adjustment = 0 )  # Step index is estimated to be sequences of steps # If you want specific indexes, use it as an argument (see next example) scheme <- scheme_manual(   step = scheme_df$step,   sets = scheme_df$sets,   reps = scheme_df$reps,   adjustment = scheme_df$adjustment )  plot(scheme)   # Here we are going to provide our own index scheme <- scheme_manual(   index = scheme_df$index,   step = scheme_df$step,   sets = scheme_df$sets,   reps = scheme_df$reps,   adjustment = scheme_df$adjustment )  plot(scheme)   # More complicated example scheme_df <- data.frame(   step = c(-3, -3, -3, -3, -2, -2, -2, -1, -1, 0),   sets = 1,   reps = c(5, 5, 5, 5, 3, 2, 1, 2, 1, 1),   adjustment = c(0, -0.05, -0.1, -0.15, -0.1, -0.05, 0, -0.1, 0, 0) )  scheme_df #>    step sets reps adjustment #> 1    -3    1    5       0.00 #> 2    -3    1    5      -0.05 #> 3    -3    1    5      -0.10 #> 4    -3    1    5      -0.15 #> 5    -2    1    3      -0.10 #> 6    -2    1    2      -0.05 #> 7    -2    1    1       0.00 #> 8    -1    1    2      -0.10 #> 9    -1    1    1       0.00 #> 10    0    1    1       0.00  scheme <- scheme_manual(   step = scheme_df$step,   sets = scheme_df$sets,   reps = scheme_df$reps,   adjustment = scheme_df$adjustment,    # Select another progression table   progression_table = progression_DI,   # Extra parameters for the progression table   progression_table_control = list(     volume = \"extensive\",     type = \"ballistic\",     max_perc_1RM_func = max_perc_1RM_linear,     klin = 36   ) )  plot(scheme)   # Provide %1RM manually  scheme_df <- data.frame(   index = rep(c(1, 2, 3, 4), each = 3),   reps = rep(c(5, 5, 5), 4),   perc_1RM = rep(c(0.4, 0.5, 0.6), 4) )  warmup_scheme <- scheme_manual(   index = scheme_df$index,   reps = scheme_df$reps,   perc_1RM = scheme_df$perc_1RM )  plot(warmup_scheme)  # Manual %1RM set and rep schemes # -------------------------- warmup_scheme <- scheme_perc_1RM(   reps = c(10, 8, 6),   perc_1RM = c(0.4, 0.5, 0.6),   n_steps = 3 )  plot(warmup_scheme)"},{"path":"https://mladenjovanovic.github.io/STMr/reference/strength_training_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Strength Training Log — strength_training_log","title":"Strength Training Log — strength_training_log","text":"dataset containing strength training log single athlete. Strength training program involves two strength training sessions, 12 week (4 phases 3 weeks ). Session involves linear wave-loading pattern starting 2x12/10/8 reps reaching 2x8/6/4 reps. Session B involves constant wave-loading pattern using 2x3/2/1. dataset contains weight used, well estimated reps--reserve (eRIR), represent subjective rating proximity failure","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/strength_training_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Strength Training Log — strength_training_log","text":"","code":"strength_training_log"},{"path":"https://mladenjovanovic.github.io/STMr/reference/strength_training_log.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Strength Training Log — strength_training_log","text":"data frame 144 rows 8 variables: phase Phase index number. Numeric 1 4 week Week index number (within phase). Numeric 1 3 day Day (total) index number. Numeric 1 3 session Name session. Can \"Session \" \"Session B\" set Set index number. Numeric 1 6 weight Weight kg used reps Number reps done eRIR Estimated reps--reserve","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/vertical_planning_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Vertical Planning Functions — vertical_planning_functions","title":"Vertical Planning Functions — vertical_planning_functions","text":"Functions creating vertical planning (progressions)","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/vertical_planning_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vertical Planning Functions — vertical_planning_functions","text":"","code":"vertical_planning(reps, reps_change = NULL, step = NULL)  vertical_constant(reps, n_steps = 4)  vertical_linear(reps, reps_change = c(0, -1, -2, -3))  vertical_linear_reverse(reps, reps_change = c(0, 1, 2, 3))  vertical_block(reps, step = c(-2, -1, 0, -3))  vertical_block_variant(reps, step = c(-2, -1, -3, 0))  vertical_rep_accumulation(   reps,   reps_change = c(-3, -2, -1, 0),   step = c(0, 0, 0, 0) )  vertical_set_accumulation(   reps,   step = c(-2, -2, -2, -2),   reps_change = rep(0, length(step)),   accumulate_set = length(reps),   set_increment = 1,   sequence = TRUE )  vertical_set_accumulation_reverse(   reps,   step = c(-3, -2, -1, 0),   reps_change = rep(0, length(step)),   accumulate_set = length(reps),   set_increment = 1,   sequence = TRUE )  vertical_undulating(reps, reps_change = c(0, -2, -1, -3))  vertical_undulating_reverse(reps, reps_change = c(0, 2, 1, 3))  vertical_block_undulating(   reps,   reps_change = c(0, -2, -1, -3),   step = c(-2, -1, -3, 0) )  vertical_volume_intensity(reps, reps_change = c(0, 0, -3, -3))  .vertical_rep_accumulation.post(   scheme,   rep_decrement = c(-3, -2, -1, 0),   remove_reps = TRUE )"},{"path":"https://mladenjovanovic.github.io/STMr/reference/vertical_planning_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vertical Planning Functions — vertical_planning_functions","text":"reps Numeric vector indicating reps prescription reps_change Change reps across progression steps step Numeric vector indicating progression steps (.e. -3, -2, -1, 0) n_steps Number progression steps. Default 4 accumulate_set set (position reps) accumulate set_increment many sets increase step? Default 1 sequence sequence accumulated sets repeated, individual sets? scheme Scheme generated scheme_ functions rep_decrement Rep decrements across progression step remove_reps < 1 reps removed?","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/vertical_planning_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vertical Planning Functions — vertical_planning_functions","text":"Data frame reps, index, step columns","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/vertical_planning_functions.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Vertical Planning Functions — vertical_planning_functions","text":"vertical_planning(): Generic Vertical Planning vertical_constant(): Constants Vertical Planning vertical_linear(): Linear Vertical Planning vertical_linear_reverse(): Reverse Linear Vertical Planning vertical_block(): Block Vertical Planning vertical_block_variant(): Block Variant Vertical Planning vertical_rep_accumulation(): Rep Accumulation Vertical Planning vertical_set_accumulation(): Set Accumulation Vertical Planning vertical_set_accumulation_reverse(): Set Accumulation Reverse Vertical Planning vertical_undulating(): Undulating Vertical Planning vertical_undulating_reverse(): Undulating Vertical Planning vertical_block_undulating(): Block Undulating Vertical Planning vertical_volume_intensity(): Volume-Intensity Vertical Planning .vertical_rep_accumulation.post(): Rep Accumulation Vertical Planning POST treatment functions applied scheme generated. options use scheme_rep_acc function, flexible enough generate options, except scheme_ladder scheme_light_heavy. Please note adjustment column output wrong, hence set NA","code":""},{"path":"https://mladenjovanovic.github.io/STMr/reference/vertical_planning_functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vertical Planning Functions — vertical_planning_functions","text":"","code":"# Generic vertical planning function # ----------------------------------  # Constant vertical_planning(reps = c(3, 2, 1), step = c(-3, -2, -1, 0)) #>    index step set set_id reps #> 1      1   -3   1      1    3 #> 2      1   -3   2      2    2 #> 3      1   -3   3      3    1 #> 4      2   -2   1      1    3 #> 5      2   -2   2      2    2 #> 6      2   -2   3      3    1 #> 7      3   -1   1      1    3 #> 8      3   -1   2      2    2 #> 9      3   -1   3      3    1 #> 10     4    0   1      1    3 #> 11     4    0   2      2    2 #> 12     4    0   3      3    1  # Linear vertical_planning(reps = c(5, 5, 5, 5, 5), reps_change = c(0, -1, -2)) #>    index step set set_id reps #> 1      1   -2   1      1    5 #> 2      1   -2   2      2    5 #> 3      1   -2   3      3    5 #> 4      1   -2   4      4    5 #> 5      1   -2   5      5    5 #> 6      2   -1   1      1    4 #> 7      2   -1   2      2    4 #> 8      2   -1   3      3    4 #> 9      2   -1   4      4    4 #> 10     2   -1   5      5    4 #> 11     3    0   1      1    3 #> 12     3    0   2      2    3 #> 13     3    0   3      3    3 #> 14     3    0   4      4    3 #> 15     3    0   5      5    3  # Reverse Linear vertical_planning(reps = c(5, 5, 5, 5, 5), reps_change = c(0, 1, 2)) #>    index step set set_id reps #> 1      1   -2   1      1    5 #> 2      1   -2   2      2    5 #> 3      1   -2   3      3    5 #> 4      1   -2   4      4    5 #> 5      1   -2   5      5    5 #> 6      2   -1   1      1    6 #> 7      2   -1   2      2    6 #> 8      2   -1   3      3    6 #> 9      2   -1   4      4    6 #> 10     2   -1   5      5    6 #> 11     3    0   1      1    7 #> 12     3    0   2      2    7 #> 13     3    0   3      3    7 #> 14     3    0   4      4    7 #> 15     3    0   5      5    7  # Block vertical_planning(reps = c(5, 5, 5, 5, 5), step = c(-2, -1, 0, -3)) #>    index step set set_id reps #> 1      1   -2   1      1    5 #> 2      1   -2   2      2    5 #> 3      1   -2   3      3    5 #> 4      1   -2   4      4    5 #> 5      1   -2   5      5    5 #> 6      2   -1   1      1    5 #> 7      2   -1   2      2    5 #> 8      2   -1   3      3    5 #> 9      2   -1   4      4    5 #> 10     2   -1   5      5    5 #> 11     3    0   1      1    5 #> 12     3    0   2      2    5 #> 13     3    0   3      3    5 #> 14     3    0   4      4    5 #> 15     3    0   5      5    5 #> 16     4   -3   1      1    5 #> 17     4   -3   2      2    5 #> 18     4   -3   3      3    5 #> 19     4   -3   4      4    5 #> 20     4   -3   5      5    5  # Block variant vertical_planning(reps = c(5, 5, 5, 5, 5), step = c(-2, -1, -3, 0)) #>    index step set set_id reps #> 1      1   -2   1      1    5 #> 2      1   -2   2      2    5 #> 3      1   -2   3      3    5 #> 4      1   -2   4      4    5 #> 5      1   -2   5      5    5 #> 6      2   -1   1      1    5 #> 7      2   -1   2      2    5 #> 8      2   -1   3      3    5 #> 9      2   -1   4      4    5 #> 10     2   -1   5      5    5 #> 11     3   -3   1      1    5 #> 12     3   -3   2      2    5 #> 13     3   -3   3      3    5 #> 14     3   -3   4      4    5 #> 15     3   -3   5      5    5 #> 16     4    0   1      1    5 #> 17     4    0   2      2    5 #> 18     4    0   3      3    5 #> 19     4    0   4      4    5 #> 20     4    0   5      5    5  # Undulating vertical_planning(reps = c(12, 10, 8), reps_change = c(0, -4, -2, -6)) #>    index step set set_id reps #> 1      1   -3   1      1   12 #> 2      1   -3   2      2   10 #> 3      1   -3   3      3    8 #> 4      2   -2   1      1    8 #> 5      2   -2   2      2    6 #> 6      2   -2   3      3    4 #> 7      3   -1   1      1   10 #> 8      3   -1   2      2    8 #> 9      3   -1   3      3    6 #> 10     4    0   1      1    6 #> 11     4    0   2      2    4 #> 12     4    0   3      3    2  # Undulating + Block variant vertical_planning(   reps = c(12, 10, 8),   reps_change = c(0, -4, -2, -6),   step = c(-2, -1, -3, 0) ) #>    index step set set_id reps #> 1      1   -2   1      1   12 #> 2      1   -2   2      2   10 #> 3      1   -2   3      3    8 #> 4      2   -1   1      1    8 #> 5      2   -1   2      2    6 #> 6      2   -1   3      3    4 #> 7      3   -3   1      1   10 #> 8      3   -3   2      2    8 #> 9      3   -3   3      3    6 #> 10     4    0   1      1    6 #> 11     4    0   2      2    4 #> 12     4    0   3      3    2  # Rep accumulation # If used with `scheme_generic()` (or any other `scheme_`) it will provide wrong set and rep scheme. # Use `scheme_rep_acc()` instead, or apply `.vertical_rep_accumulation.post()` # function AFTER generating the scheme vertical_planning(   reps = c(10, 8, 6),   reps_change = c(-3, -2, -1, 0),   step = c(0, 0, 0, 0) ) #>    index step set set_id reps #> 1      1    0   1      1    7 #> 2      1    0   2      2    5 #> 3      1    0   3      3    3 #> 4      2    0   1      1    8 #> 5      2    0   2      2    6 #> 6      2    0   3      3    4 #> 7      3    0   1      1    9 #> 8      3    0   2      2    7 #> 9      3    0   3      3    5 #> 10     4    0   1      1   10 #> 11     4    0   2      2    8 #> 12     4    0   3      3    6   # Constant # ---------------------------------- vertical_constant(c(5, 5, 5), 4) #>    index step set set_id reps #> 1      1   -3   1      1    5 #> 2      1   -3   2      2    5 #> 3      1   -3   3      3    5 #> 4      2   -2   1      1    5 #> 5      2   -2   2      2    5 #> 6      2   -2   3      3    5 #> 7      3   -1   1      1    5 #> 8      3   -1   2      2    5 #> 9      3   -1   3      3    5 #> 10     4    0   1      1    5 #> 11     4    0   2      2    5 #> 12     4    0   3      3    5 vertical_constant(c(3, 2, 1), 2) #>   index step set set_id reps #> 1     1   -1   1      1    3 #> 2     1   -1   2      2    2 #> 3     1   -1   3      3    1 #> 4     2    0   1      1    3 #> 5     2    0   2      2    2 #> 6     2    0   3      3    1  plot_vertical(vertical_constant)   # Linear # ---------------------------------- vertical_linear(c(10, 8, 6), c(0, -2, -4)) #>   index step set set_id reps #> 1     1   -2   1      1   10 #> 2     1   -2   2      2    8 #> 3     1   -2   3      3    6 #> 4     2   -1   1      1    8 #> 5     2   -1   2      2    6 #> 6     2   -1   3      3    4 #> 7     3    0   1      1    6 #> 8     3    0   2      2    4 #> 9     3    0   3      3    2 vertical_linear(c(5, 5, 5), c(0, -1, -2, -3)) #>    index step set set_id reps #> 1      1   -3   1      1    5 #> 2      1   -3   2      2    5 #> 3      1   -3   3      3    5 #> 4      2   -2   1      1    4 #> 5      2   -2   2      2    4 #> 6      2   -2   3      3    4 #> 7      3   -1   1      1    3 #> 8      3   -1   2      2    3 #> 9      3   -1   3      3    3 #> 10     4    0   1      1    2 #> 11     4    0   2      2    2 #> 12     4    0   3      3    2  plot_vertical(vertical_linear)   # Reverse Linear # ---------------------------------- vertical_linear_reverse(c(6, 4, 2), c(0, 1, 2)) #>   index step set set_id reps #> 1     1   -2   1      1    6 #> 2     1   -2   2      2    4 #> 3     1   -2   3      3    2 #> 4     2   -1   1      1    7 #> 5     2   -1   2      2    5 #> 6     2   -1   3      3    3 #> 7     3    0   1      1    8 #> 8     3    0   2      2    6 #> 9     3    0   3      3    4 vertical_linear_reverse(c(5, 5, 5)) #>    index step set set_id reps #> 1      1   -3   1      1    5 #> 2      1   -3   2      2    5 #> 3      1   -3   3      3    5 #> 4      2   -2   1      1    6 #> 5      2   -2   2      2    6 #> 6      2   -2   3      3    6 #> 7      3   -1   1      1    7 #> 8      3   -1   2      2    7 #> 9      3   -1   3      3    7 #> 10     4    0   1      1    8 #> 11     4    0   2      2    8 #> 12     4    0   3      3    8  plot_vertical(vertical_linear_reverse)   # Block # ---------------------------------- vertical_block(c(6, 4, 2)) #>    index step set set_id reps #> 1      1   -2   1      1    6 #> 2      1   -2   2      2    4 #> 3      1   -2   3      3    2 #> 4      2   -1   1      1    6 #> 5      2   -1   2      2    4 #> 6      2   -1   3      3    2 #> 7      3    0   1      1    6 #> 8      3    0   2      2    4 #> 9      3    0   3      3    2 #> 10     4   -3   1      1    6 #> 11     4   -3   2      2    4 #> 12     4   -3   3      3    2  plot_vertical(vertical_block)   # Block Variant # ---------------------------------- vertical_block_variant(c(6, 4, 2)) #>    index step set set_id reps #> 1      1   -2   1      1    6 #> 2      1   -2   2      2    4 #> 3      1   -2   3      3    2 #> 4      2   -1   1      1    6 #> 5      2   -1   2      2    4 #> 6      2   -1   3      3    2 #> 7      3   -3   1      1    6 #> 8      3   -3   2      2    4 #> 9      3   -3   3      3    2 #> 10     4    0   1      1    6 #> 11     4    0   2      2    4 #> 12     4    0   3      3    2  plot_vertical(vertical_block_variant)   # Rep Accumulation # ---------------------------------- # If used with `scheme_generic()` (or any other `scheme_`) it will provide wrong set and rep scheme. # Use `scheme_rep_acc()` instead, or apply `.vertical_rep_accumulation.post()` # function AFTER generating the scheme vertical_rep_accumulation(c(10, 8, 6)) #>    index step set set_id reps #> 1      1    0   1      1    7 #> 2      1    0   2      2    5 #> 3      1    0   3      3    3 #> 4      2    0   1      1    8 #> 5      2    0   2      2    6 #> 6      2    0   3      3    4 #> 7      3    0   1      1    9 #> 8      3    0   2      2    7 #> 9      3    0   3      3    5 #> 10     4    0   1      1   10 #> 11     4    0   2      2    8 #> 12     4    0   3      3    6  plot_vertical(vertical_rep_accumulation)   # Set Accumulation # ---------------------------------- # Default is accumulation of the last set vertical_set_accumulation(c(3, 2, 1)) #>    index step set set_id reps #> 1      1   -2   1      1    3 #> 2      1   -2   2      2    2 #> 3      1   -2   3      3    1 #> 4      2   -2   1      1    3 #> 5      2   -2   2      2    2 #> 6      2   -2   3      3    1 #> 7      2   -2   4      3    1 #> 8      3   -2   1      1    3 #> 9      3   -2   2      2    2 #> 10     3   -2   3      3    1 #> 11     3   -2   4      3    1 #> 12     3   -2   5      3    1 #> 13     4   -2   1      1    3 #> 14     4   -2   2      2    2 #> 15     4   -2   3      3    1 #> 16     4   -2   4      3    1 #> 17     4   -2   5      3    1 #> 18     4   -2   6      3    1  # We can have whole sequence being repeated vertical_set_accumulation(c(3, 2, 1), accumulate_set = 1:3) #>    index step set set_id reps #> 1      1   -2   1      1    3 #> 2      1   -2   2      2    2 #> 3      1   -2   3      3    1 #> 4      2   -2   1      1    3 #> 5      2   -2   2      2    2 #> 6      2   -2   3      3    1 #> 7      2   -2   4      1    3 #> 8      2   -2   5      2    2 #> 9      2   -2   6      3    1 #> 10     3   -2   1      1    3 #> 11     3   -2   2      2    2 #> 12     3   -2   3      3    1 #> 13     3   -2   4      1    3 #> 14     3   -2   5      2    2 #> 15     3   -2   6      3    1 #> 16     3   -2   7      1    3 #> 17     3   -2   8      2    2 #> 18     3   -2   9      3    1 #> 19     4   -2   1      1    3 #> 20     4   -2   2      2    2 #> 21     4   -2   3      3    1 #> 22     4   -2   4      1    3 #> 23     4   -2   5      2    2 #> 24     4   -2   6      3    1 #> 25     4   -2   7      1    3 #> 26     4   -2   8      2    2 #> 27     4   -2   9      3    1 #> 28     4   -2  10      1    3 #> 29     4   -2  11      2    2 #> 30     4   -2  12      3    1  # Or we can have accumulation of the individual sets vertical_set_accumulation(c(3, 2, 1), accumulate_set = 1:3, sequence = FALSE) #>    index step set set_id reps #> 1      1   -2   1      1    3 #> 2      1   -2   2      2    2 #> 3      1   -2   3      3    1 #> 4      2   -2   1      1    3 #> 5      2   -2   2      1    3 #> 6      2   -2   3      2    2 #> 7      2   -2   4      2    2 #> 8      2   -2   5      3    1 #> 9      2   -2   6      3    1 #> 10     3   -2   1      1    3 #> 11     3   -2   2      1    3 #> 12     3   -2   3      1    3 #> 13     3   -2   4      2    2 #> 14     3   -2   5      2    2 #> 15     3   -2   6      2    2 #> 16     3   -2   7      3    1 #> 17     3   -2   8      3    1 #> 18     3   -2   9      3    1 #> 19     4   -2   1      1    3 #> 20     4   -2   2      1    3 #> 21     4   -2   3      1    3 #> 22     4   -2   4      1    3 #> 23     4   -2   5      2    2 #> 24     4   -2   6      2    2 #> 25     4   -2   7      2    2 #> 26     4   -2   8      2    2 #> 27     4   -2   9      3    1 #> 28     4   -2  10      3    1 #> 29     4   -2  11      3    1 #> 30     4   -2  12      3    1  # We can also have two or more sequences vertical_set_accumulation(c(10, 8, 6, 4, 2, 1), accumulate_set = c(1:2, 5:6)) #>    index step set set_id reps #> 1      1   -2   1      1   10 #> 2      1   -2   2      2    8 #> 3      1   -2   3      3    6 #> 4      1   -2   4      4    4 #> 5      1   -2   5      5    2 #> 6      1   -2   6      6    1 #> 7      2   -2   1      1   10 #> 8      2   -2   2      2    8 #> 9      2   -2   3      1   10 #> 10     2   -2   4      2    8 #> 11     2   -2   5      3    6 #> 12     2   -2   6      4    4 #> 13     2   -2   7      5    2 #> 14     2   -2   8      6    1 #> 15     2   -2   9      5    2 #> 16     2   -2  10      6    1 #> 17     3   -2   1      1   10 #> 18     3   -2   2      2    8 #> 19     3   -2   3      1   10 #> 20     3   -2   4      2    8 #> 21     3   -2   5      1   10 #> 22     3   -2   6      2    8 #> 23     3   -2   7      3    6 #> 24     3   -2   8      4    4 #> 25     3   -2   9      5    2 #> 26     3   -2  10      6    1 #> 27     3   -2  11      5    2 #> 28     3   -2  12      6    1 #> 29     3   -2  13      5    2 #> 30     3   -2  14      6    1 #> 31     4   -2   1      1   10 #> 32     4   -2   2      2    8 #> 33     4   -2   3      1   10 #> 34     4   -2   4      2    8 #> 35     4   -2   5      1   10 #> 36     4   -2   6      2    8 #> 37     4   -2   7      1   10 #> 38     4   -2   8      2    8 #> 39     4   -2   9      3    6 #> 40     4   -2  10      4    4 #> 41     4   -2  11      5    2 #> 42     4   -2  12      6    1 #> 43     4   -2  13      5    2 #> 44     4   -2  14      6    1 #> 45     4   -2  15      5    2 #> 46     4   -2  16      6    1 #> 47     4   -2  17      5    2 #> 48     4   -2  18      6    1  # And also repeat the individual sets vertical_set_accumulation(   c(10, 8, 6, 4, 2, 1),   accumulate_set = c(1:2, 5:6),   sequence = FALSE ) #>    index step set set_id reps #> 1      1   -2   1      1   10 #> 2      1   -2   2      2    8 #> 3      1   -2   3      3    6 #> 4      1   -2   4      4    4 #> 5      1   -2   5      5    2 #> 6      1   -2   6      6    1 #> 7      2   -2   1      1   10 #> 8      2   -2   2      1   10 #> 9      2   -2   3      2    8 #> 10     2   -2   4      2    8 #> 11     2   -2   5      3    6 #> 12     2   -2   6      4    4 #> 13     2   -2   7      5    2 #> 14     2   -2   8      5    2 #> 15     2   -2   9      6    1 #> 16     2   -2  10      6    1 #> 17     3   -2   1      1   10 #> 18     3   -2   2      1   10 #> 19     3   -2   3      1   10 #> 20     3   -2   4      2    8 #> 21     3   -2   5      2    8 #> 22     3   -2   6      2    8 #> 23     3   -2   7      3    6 #> 24     3   -2   8      4    4 #> 25     3   -2   9      5    2 #> 26     3   -2  10      5    2 #> 27     3   -2  11      5    2 #> 28     3   -2  12      6    1 #> 29     3   -2  13      6    1 #> 30     3   -2  14      6    1 #> 31     4   -2   1      1   10 #> 32     4   -2   2      1   10 #> 33     4   -2   3      1   10 #> 34     4   -2   4      1   10 #> 35     4   -2   5      2    8 #> 36     4   -2   6      2    8 #> 37     4   -2   7      2    8 #> 38     4   -2   8      2    8 #> 39     4   -2   9      3    6 #> 40     4   -2  10      4    4 #> 41     4   -2  11      5    2 #> 42     4   -2  12      5    2 #> 43     4   -2  13      5    2 #> 44     4   -2  14      5    2 #> 45     4   -2  15      6    1 #> 46     4   -2  16      6    1 #> 47     4   -2  17      6    1 #> 48     4   -2  18      6    1 plot_vertical(vertical_set_accumulation)   # Reverse Set Accumulation # ---------------------------------- # Default is accumulation of the last set vertical_set_accumulation_reverse(c(3, 2, 1)) #>    index step set set_id reps #> 1      1   -3   1      1    3 #> 2      1   -3   2      2    2 #> 3      1   -3   3      3    1 #> 4      1   -3   4      3    1 #> 5      1   -3   5      3    1 #> 6      1   -3   6      3    1 #> 7      2   -2   1      1    3 #> 8      2   -2   2      2    2 #> 9      2   -2   3      3    1 #> 10     2   -2   4      3    1 #> 11     2   -2   5      3    1 #> 12     3   -1   1      1    3 #> 13     3   -1   2      2    2 #> 14     3   -1   3      3    1 #> 15     3   -1   4      3    1 #> 16     4    0   1      1    3 #> 17     4    0   2      2    2 #> 18     4    0   3      3    1  # We can have whole sequence being repeated vertical_set_accumulation_reverse(c(3, 2, 1), accumulate_set = 1:3) #>    index step set set_id reps #> 1      1   -3   1      1    3 #> 2      1   -3   2      2    2 #> 3      1   -3   3      3    1 #> 4      1   -3   4      1    3 #> 5      1   -3   5      2    2 #> 6      1   -3   6      3    1 #> 7      1   -3   7      1    3 #> 8      1   -3   8      2    2 #> 9      1   -3   9      3    1 #> 10     1   -3  10      1    3 #> 11     1   -3  11      2    2 #> 12     1   -3  12      3    1 #> 13     2   -2   1      1    3 #> 14     2   -2   2      2    2 #> 15     2   -2   3      3    1 #> 16     2   -2   4      1    3 #> 17     2   -2   5      2    2 #> 18     2   -2   6      3    1 #> 19     2   -2   7      1    3 #> 20     2   -2   8      2    2 #> 21     2   -2   9      3    1 #> 22     3   -1   1      1    3 #> 23     3   -1   2      2    2 #> 24     3   -1   3      3    1 #> 25     3   -1   4      1    3 #> 26     3   -1   5      2    2 #> 27     3   -1   6      3    1 #> 28     4    0   1      1    3 #> 29     4    0   2      2    2 #> 30     4    0   3      3    1  # Or we can have accumulation of the individual sets vertical_set_accumulation_reverse(c(3, 2, 1), accumulate_set = 1:3, sequence = FALSE) #>    index step set set_id reps #> 1      1   -3   1      1    3 #> 2      1   -3   2      1    3 #> 3      1   -3   3      1    3 #> 4      1   -3   4      1    3 #> 5      1   -3   5      2    2 #> 6      1   -3   6      2    2 #> 7      1   -3   7      2    2 #> 8      1   -3   8      2    2 #> 9      1   -3   9      3    1 #> 10     1   -3  10      3    1 #> 11     1   -3  11      3    1 #> 12     1   -3  12      3    1 #> 13     2   -2   1      1    3 #> 14     2   -2   2      1    3 #> 15     2   -2   3      1    3 #> 16     2   -2   4      2    2 #> 17     2   -2   5      2    2 #> 18     2   -2   6      2    2 #> 19     2   -2   7      3    1 #> 20     2   -2   8      3    1 #> 21     2   -2   9      3    1 #> 22     3   -1   1      1    3 #> 23     3   -1   2      1    3 #> 24     3   -1   3      2    2 #> 25     3   -1   4      2    2 #> 26     3   -1   5      3    1 #> 27     3   -1   6      3    1 #> 28     4    0   1      1    3 #> 29     4    0   2      2    2 #> 30     4    0   3      3    1  # We can also have two or more sequences vertical_set_accumulation_reverse(c(10, 8, 6, 4, 2, 1), accumulate_set = c(1:2, 5:6)) #>    index step set set_id reps #> 1      1   -3   1      1   10 #> 2      1   -3   2      2    8 #> 3      1   -3   3      1   10 #> 4      1   -3   4      2    8 #> 5      1   -3   5      1   10 #> 6      1   -3   6      2    8 #> 7      1   -3   7      1   10 #> 8      1   -3   8      2    8 #> 9      1   -3   9      3    6 #> 10     1   -3  10      4    4 #> 11     1   -3  11      5    2 #> 12     1   -3  12      6    1 #> 13     1   -3  13      5    2 #> 14     1   -3  14      6    1 #> 15     1   -3  15      5    2 #> 16     1   -3  16      6    1 #> 17     1   -3  17      5    2 #> 18     1   -3  18      6    1 #> 19     2   -2   1      1   10 #> 20     2   -2   2      2    8 #> 21     2   -2   3      1   10 #> 22     2   -2   4      2    8 #> 23     2   -2   5      1   10 #> 24     2   -2   6      2    8 #> 25     2   -2   7      3    6 #> 26     2   -2   8      4    4 #> 27     2   -2   9      5    2 #> 28     2   -2  10      6    1 #> 29     2   -2  11      5    2 #> 30     2   -2  12      6    1 #> 31     2   -2  13      5    2 #> 32     2   -2  14      6    1 #> 33     3   -1   1      1   10 #> 34     3   -1   2      2    8 #> 35     3   -1   3      1   10 #> 36     3   -1   4      2    8 #> 37     3   -1   5      3    6 #> 38     3   -1   6      4    4 #> 39     3   -1   7      5    2 #> 40     3   -1   8      6    1 #> 41     3   -1   9      5    2 #> 42     3   -1  10      6    1 #> 43     4    0   1      1   10 #> 44     4    0   2      2    8 #> 45     4    0   3      3    6 #> 46     4    0   4      4    4 #> 47     4    0   5      5    2 #> 48     4    0   6      6    1  # And also repeat the individual sets vertical_set_accumulation_reverse(   c(10, 8, 6, 4, 2, 1),   accumulate_set = c(1:2, 5:6),   sequence = FALSE ) #>    index step set set_id reps #> 1      1   -3   1      1   10 #> 2      1   -3   2      1   10 #> 3      1   -3   3      1   10 #> 4      1   -3   4      1   10 #> 5      1   -3   5      2    8 #> 6      1   -3   6      2    8 #> 7      1   -3   7      2    8 #> 8      1   -3   8      2    8 #> 9      1   -3   9      3    6 #> 10     1   -3  10      4    4 #> 11     1   -3  11      5    2 #> 12     1   -3  12      5    2 #> 13     1   -3  13      5    2 #> 14     1   -3  14      5    2 #> 15     1   -3  15      6    1 #> 16     1   -3  16      6    1 #> 17     1   -3  17      6    1 #> 18     1   -3  18      6    1 #> 19     2   -2   1      1   10 #> 20     2   -2   2      1   10 #> 21     2   -2   3      1   10 #> 22     2   -2   4      2    8 #> 23     2   -2   5      2    8 #> 24     2   -2   6      2    8 #> 25     2   -2   7      3    6 #> 26     2   -2   8      4    4 #> 27     2   -2   9      5    2 #> 28     2   -2  10      5    2 #> 29     2   -2  11      5    2 #> 30     2   -2  12      6    1 #> 31     2   -2  13      6    1 #> 32     2   -2  14      6    1 #> 33     3   -1   1      1   10 #> 34     3   -1   2      1   10 #> 35     3   -1   3      2    8 #> 36     3   -1   4      2    8 #> 37     3   -1   5      3    6 #> 38     3   -1   6      4    4 #> 39     3   -1   7      5    2 #> 40     3   -1   8      5    2 #> 41     3   -1   9      6    1 #> 42     3   -1  10      6    1 #> 43     4    0   1      1   10 #> 44     4    0   2      2    8 #> 45     4    0   3      3    6 #> 46     4    0   4      4    4 #> 47     4    0   5      5    2 #> 48     4    0   6      6    1  plot_vertical(vertical_set_accumulation_reverse)   # Undulating # ---------------------------------- vertical_undulating(c(8, 6, 4)) #>    index step set set_id reps #> 1      1   -3   1      1    8 #> 2      1   -3   2      2    6 #> 3      1   -3   3      3    4 #> 4      2   -2   1      1    6 #> 5      2   -2   2      2    4 #> 6      2   -2   3      3    2 #> 7      3   -1   1      1    7 #> 8      3   -1   2      2    5 #> 9      3   -1   3      3    3 #> 10     4    0   1      1    5 #> 11     4    0   2      2    3 #> 12     4    0   3      3    1  # Reverse Undulating # ---------------------------------- vertical_undulating_reverse(c(8, 6, 4)) #>    index step set set_id reps #> 1      1   -3   1      1    8 #> 2      1   -3   2      2    6 #> 3      1   -3   3      3    4 #> 4      2   -2   1      1   10 #> 5      2   -2   2      2    8 #> 6      2   -2   3      3    6 #> 7      3   -1   1      1    9 #> 8      3   -1   2      2    7 #> 9      3   -1   3      3    5 #> 10     4    0   1      1   11 #> 11     4    0   2      2    9 #> 12     4    0   3      3    7  # Block Undulating # ---------------------------------- # This is a combination of Block Variant (undulation in the steps) and # Undulating (undulation in reps) vertical_block_undulating(c(8, 6, 4)) #>    index step set set_id reps #> 1      1   -2   1      1    8 #> 2      1   -2   2      2    6 #> 3      1   -2   3      3    4 #> 4      2   -1   1      1    6 #> 5      2   -1   2      2    4 #> 6      2   -1   3      3    2 #> 7      3   -3   1      1    7 #> 8      3   -3   2      2    5 #> 9      3   -3   3      3    3 #> 10     4    0   1      1    5 #> 11     4    0   2      2    3 #> 12     4    0   3      3    1  # Volume-Intensity # ---------------------------------- vertical_volume_intensity(c(6, 6, 6)) #>    index step set set_id reps #> 1      1   -3   1      1    6 #> 2      1   -3   2      2    6 #> 3      1   -3   3      3    6 #> 4      2   -2   1      1    6 #> 5      2   -2   2      2    6 #> 6      2   -2   3      3    6 #> 7      3   -1   1      1    3 #> 8      3   -1   2      2    3 #> 9      3   -1   3      3    3 #> 10     4    0   1      1    3 #> 11     4    0   2      2    3 #> 12     4    0   3      3    3  # Rep Accumulation # -------------------------- scheme_rep_acc() #>    index step set reps  adjustment perc_1RM #> 1      1    0   1    7 -0.04545455 0.704733 #> 2      1    0   2    7 -0.04545455 0.704733 #> 3      1    0   3    7 -0.04545455 0.704733 #> 4      2    0   1    8 -0.04545455 0.704733 #> 5      2    0   2    8 -0.04545455 0.704733 #> 6      2    0   3    8 -0.04545455 0.704733 #> 7      3    0   1    9 -0.04545455 0.704733 #> 8      3    0   2    9 -0.04545455 0.704733 #> 9      3    0   3    9 -0.04545455 0.704733 #> 10     4    0   1   10 -0.04545455 0.704733 #> 11     4    0   2   10 -0.04545455 0.704733 #> 12     4    0   3   10 -0.04545455 0.704733  # Generate Wave scheme with rep accumulation vertical progression # This functions doesn't allow you to use different vertical planning # options scheme <- scheme_rep_acc(reps = c(10, 8, 6), adjustment = c(-0.1, -0.05, 0)) plot(scheme)   # Other options is to use `.vertical_rep_accumulation.post()` and # apply it after # The default vertical progression is `vertical_const()` scheme <- scheme_wave(reps = c(10, 8, 6), adjustment = c(-0.1, -0.05, 0))  .vertical_rep_accumulation.post(scheme) #>    index step set reps adjustment  perc_1RM #> 1      1    0   1    7         NA 0.6047330 #> 2      1    0   2    5         NA 0.6987308 #> 3      1    0   3    3         NA 0.7971086 #> 4      2    0   1    8         NA 0.6047330 #> 5      2    0   2    6         NA 0.6987308 #> 6      2    0   3    4         NA 0.7971086 #> 7      3    0   1    9         NA 0.6047330 #> 8      3    0   2    7         NA 0.6987308 #> 9      3    0   3    5         NA 0.7971086 #> 10     4    0   1   10         NA 0.6047330 #> 11     4    0   2    8         NA 0.6987308 #> 12     4    0   3    6         NA 0.7971086  # We can also create \"undulating\" rep decrements .vertical_rep_accumulation.post(   scheme,   rep_decrement = c(-3, -1, -2, 0) ) #>    index step set reps adjustment  perc_1RM #> 1      1    0   1    7         NA 0.6047330 #> 2      1    0   2    5         NA 0.6987308 #> 3      1    0   3    3         NA 0.7971086 #> 4      2    0   1    9         NA 0.6047330 #> 5      2    0   2    7         NA 0.6987308 #> 6      2    0   3    5         NA 0.7971086 #> 7      3    0   1    8         NA 0.6047330 #> 8      3    0   2    6         NA 0.6987308 #> 9      3    0   3    4         NA 0.7971086 #> 10     4    0   1   10         NA 0.6047330 #> 11     4    0   2    8         NA 0.6987308 #> 12     4    0   3    6         NA 0.7971086  # `scheme_rep_acc` will not allow you to generate `scheme_ladder()` # and `scheme_scheme_light_heavy()` # You must use `.vertical_rep_accumulation.post()` to do so scheme <- scheme_ladder() scheme <- .vertical_rep_accumulation.post(scheme) plot(scheme)   # Please note that reps < 1 are removed. If you do not want this, # use `remove_reps = FALSE` parameter scheme <- scheme_ladder() scheme <- .vertical_rep_accumulation.post(scheme, remove_reps = FALSE) plot(scheme)"},{"path":"https://mladenjovanovic.github.io/STMr/news/index.html","id":"stmr-0159000","dir":"Changelog","previous_headings":"","what":"STMR 0.1.5.9000","title":"STMR 0.1.5.9000","text":"Changed stats::nlm() minpack.lm::nlsLM() function estimating parameters estimate_k(), estimate_k_1RM(), estimate_kmod(), estimate_kmod_1RM(), estimate_klin(), estimate_klin_1RM() functions. Added estimate_k_generic() estimate_k_generic_1RM(). functions return model object, use default k value 0.0333 Added estimate_k_generic_1RM_mixed() uses generic k value 0.0333 predict 0RM Added estimate_k_generic_1RM_quantile() uses generic k value 0.0333 predict 0RM","code":""},{"path":"https://mladenjovanovic.github.io/STMr/news/index.html","id":"stmr-015","dir":"Changelog","previous_headings":"","what":"STMr 0.1.5","title":"STMr 0.1.5","text":"CRAN release: 2022-09-17 Added day counter (day) strength_training_log dataset. used example use rolling estimation Added estimate_rolling_1RM() function. used implement “embedded testing” using training logs estimate reps-max profiles 1RMs Updated README.Rmd file additions Added TOC README.Rmd","code":""},{"path":"https://mladenjovanovic.github.io/STMr/news/index.html","id":"stmr-014","dir":"Changelog","previous_headings":"","what":"STMr 0.1.4","title":"STMr 0.1.4","text":"CRAN release: 2022-08-31 Fixed bug scheme_rep_acc() - now END rep step used, reps counted backwards intended Added comment vertical_generic() vertical_rep_accumulation() avoid generating rep accumulation schme using two functions, rather using scheme_rep_acc() Formatting error scheme_() functions Changed default progression table progression_perc_drop scheme_() functions Changed default vertical planning vertical_const scheme_() functions Fixed bug scheme_light_heavy() - now takes highest rep use estimate %1RMs Added scheme_ladder() set rep scheme Added .vertical_rep_accumulation.post() function. functions applied scheme generated. options use scheme_rep_acc() function, flexible enough generate schemes, except scheme_ladder() scheme_light_heavy() Added vertical_block_undulating() vertical planning function. combination Block Variant (undulation steps) Undulating (undulation reps) Fixed “corner case” bug scheme_generic(), vertical_set_accumulation didn’t repeat adjustments, cause problems single set accumulated. adjustments accumulated, rather “recycled”. Changed parameter name accumulate_rep accumulate_set vertical_set_accumulation() vertical_set_accumulation_reverse() functions Expanded README.Rmd include discussion Rep Accumulation scheme Added extra features vertical_set_accumulation() vertical_set_accumulation_reverse() (see sequence argument) Fixed default arguments adjustment scheme_ functions. Now flexible, depending reps argument, follow general logic given scheme. Improved simplified scheme plotting plot_scheme() function. Removed {ggstance} package dependencies Added font_size arguments plot_scheme() plot_progression_table() functions Removed default progression table generate_progression_table(), create_example(), plot_progression_table() functions Added plot_vertical() function plotting vertical plan Created STMr_scheme class (subclass data frame), now scheme can plotted using simple S3 plot method. plot_scheme() function now deprecated. Added three types plots: bar, vertical, fraction. STMr_scheme class now following columns: index, step, set, reps, adjustment, perc_1RM. Added STMr_vertical constructor. Now vertical_ functions return STMr_vertical data frame object following column names: index, step, set, set_id, reps. set_id needed sort issue (see ) vertical_set_accumulation() vertical_set_accumulation_reverse() vertical plans adjustment applied inside scheme_generic() function output scheme_light_heavy() scheme_ladder() functions, set adjustment NA since avoid confusing user. due modifications functions “light” sets, adjustment applicable related selected progression table Added ggfittext package dependency, plot labels now flexible fit “container”. can useful set accumulation used, labels go outside bars Added reps_change vertical_set_accumulation() vertical_set_accumulation_reverse(), making really flexible functions Added scheme_manual() manual generation scheme, provides ultimate flexibility Added perc_str argument plot() S3 method, allows user remove “%” thus space label Created release function S3 plot method merging multiple schemes (.e., blocks phases) one release. used inspect multiple back--back phases mold together Added perc_1RM argument scheme_manual() user provide manual 1RM percentages, rather estimated Added scheme_perc_1RM() simpler scheme_manual() manually entering 1RM percentages. example creating simple warm-scheme Added + method STMr_scheme objects. allows easy modular adding schemes","code":""},{"path":"https://mladenjovanovic.github.io/STMr/news/index.html","id":"stmr-013","dir":"Changelog","previous_headings":"","what":"STMr 0.1.3","title":"STMr 0.1.3","text":"CRAN release: 2022-03-16 Changed STMr ‘STMr’ DESCRIPTION per CRAN member recommendation Added documentation functions output/return values per CRAN member recommendation. Documentation following functions updated: create_example(), get_perc_1RM(), get_reps()","code":""},{"path":"https://mladenjovanovic.github.io/STMr/news/index.html","id":"stmr-012","dir":"Changelog","previous_headings":"","what":"STMr 0.1.2","title":"STMr 0.1.2","text":"Renamed package {STMr} since already CRAN package STM Fixed bug progression_rel_int() function Renamed nRM_testing dataset RTF_testing, well renamed columns descriptive Added mixed-level estimation functions simple 1RM estimation: estimate_k_mixed(), estimate_k_1RM_mixed(), estimate_kmod_mixed(), estimate_kmod_1RM_mixed(), estimate_klin_mixed(), estimate_klin_1RM_mixed(). implemented using {nlme} package nlme::nlme() function Improvements strength_training_log dataset. eRIR ratings now halved, everything 5 now NA Fixed examples get_reps() function documentation Rewrote README.Rmd file","code":""},{"path":"https://mladenjovanovic.github.io/STMr/news/index.html","id":"stmr-011","dir":"Changelog","previous_headings":"","what":"STMr 0.1.1","title":"STMr 0.1.1","text":"Added different weighting options estimate_ family functions. include “none” (equal weight, weighting observations) “reps” (1/reps weighting) “load” (using weight %1RM) “eRIR” (1/(eRIR+1) weighting) “reps x load” “reps x eRIR” “load x eRIR” “reps x load x eRIR” Added strength_training_log dataset. Single individual performing two strength training sessions per week, course 12 weeks (4 phases, 3 weeks long). Individual eRIR (estimated reps--reserve) subjective rating included dataset. dataset used demonstrate techniques embedded testing 1RM individual profiles Added estimate_k_quantile(), estimate_kmod_quantile(), estimate_klin_quantile() functions implement non-linear quantile estimation parameters","code":""},{"path":"https://mladenjovanovic.github.io/STMr/news/index.html","id":"stmr-010","dir":"Changelog","previous_headings":"","what":"STMr 0.1.0","title":"STMr 0.1.0","text":"REWRITTEN whole package. version compatibility issues previous version due different naming functions. package now modular, flexible, can parameterized easily functions organized following manner: estimation functions (start estimate_) reps-max functions (start max_). Epley’s, Modified Epley’s Linear/Brzycki’s model implemented adjustment functions (start adj_). Deducted Intensity (DI), Relative Intensity (RelInt), Reps Reserve (RIR), % Max Reps (%MR) methods implemented wrapper functions get_reps() get_perc_1RM() implemented combine reps-max models well progression (adjustment) functions easy use format progression functions (start progression_) implemented allow easy parameterization involve specific model estimated parameter values vertical planning functions (start vertical_) scheme function (start scheme_) plotting printing functions: generate_progression_table(), plot_progression_table(), plot_scheme(), create_example() Fixed typos citation() Added sample data set nRM_testing, contains reps max testing 12 athletes using 70, 80, 90% 1RM","code":""},{"path":"https://mladenjovanovic.github.io/STMr/news/index.html","id":"stmr-003","dir":"Changelog","previous_headings":"","what":"STMr 0.0.3","title":"STMr 0.0.3","text":"Estimated 1RM estimate_xxx_1RM() functions now second place coefficient order Added create_example() function quickly creating example using selected progression table","code":""},{"path":"https://mladenjovanovic.github.io/STMr/news/index.html","id":"stmr-002","dir":"Changelog","previous_headings":"","what":"STMr 0.0.2","title":"STMr 0.0.2","text":"Added functionality forward extra arguments custom max-reps functions (.e., get_max_perc_1RM()). Also see get_max_perc_1RM_k() functions Added get_max_perc_1RM_k(), get_max_reps_k(), get_predicted_1RM_k() functions uses user defined k value/parameter. Together previous functionality, use able easily create custom max-reps table functions extra arguments. provides great flexibility Added get_max_perc_1RM_kmod(), get_max_reps_kmod(), get_predicted_1RM_kmod() functions uses user defined kmod value/parameter modified Epley’s equation Added get_max_perc_1RM_klin(), get_max_reps_klin(), get_predicted_1RM_klin() functions uses user defined klin value/parameter linear equation Added estimate_ family functions estimate Epley’s, modified Epley’s, linear equation parameters, well novel estimation functions uses absolute weight estimate k, kmod, klin 1RM parameters Added missing font_size plotting adjustments using plot_progression_table()","code":""},{"path":"https://mladenjovanovic.github.io/STMr/news/index.html","id":"stmr-001","dir":"Changelog","previous_headings":"","what":"STMr 0.0.1","title":"STMr 0.0.1","text":"Initial complete version package Added Relative Intensity %MR progression tables Added plotting functions","code":""},{"path":"https://mladenjovanovic.github.io/STMr/news/index.html","id":"stmr-0009000","dir":"Changelog","previous_headings":"","what":"STMr 0.0.0.9000","title":"STMr 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
